const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const secretariatHeader = require('./mockObjects.org').secretariatHeader
const existentUser = require('./mockObjects.org').existentUser
const nonExistentUser = require('./mockObjects.org').nonExistentUser
const existentOrg = require('./mockObjects.org').existentOrg
const owningOrg = require('./mockObjects.org').owningOrg
const existentUserDummy = require('./mockObjects.org').existentUserDummy
const existentUserDummy2 = require('./mockObjects.org').existentUserDummy2
const existentOrgDummy2 = require('./mockObjects.org').existentOrgDummy2
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')

describe('Test user functions in Org Controller', () => {
  before(async () => {
    await User.findOneAndUpdate()
      .byUUID(existentUser.UUID)
      .updateOne(existentUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(existentUserDummy.UUID)
      .updateOne(existentUserDummy)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(existentOrg.UUID)
      .updateOne(existentOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(existentOrgDummy2.UUID)
      .updateOne(existentOrgDummy2)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(owningOrg.UUID)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })
  })

  context('Creating a user', () => {
    it('User username is undefined', (done) => {
      const testUser = Object.assign({}, existentUser)
      delete testUser.username

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '/user')
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('To create a user, a username must be provided.')
          done()
        })
    })

    it('User username is null', (done) => {
      const testUser = Object.assign({}, existentUser)
      testUser.username = null

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '/user')
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('To create a user, a username must be provided.')
          done()
        })
    })

    it('User username is an empty string', (done) => {
      const testUser = Object.assign({}, existentUser)
      testUser.username = ''

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '/user')
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The user\'s username cannot be an empty string.')
          done()
        })
    })

    it('User is not created because org does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + nonExistentOrg.short_name + '/user')
        .set(secretariatHeader)
        .send(nonExistentUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The user could not be created because ' + nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('Param org\'s UUID does not match the provided org\'s UUID', (done) => {
      const testUser = Object.assign({}, existentUser)
      testUser.org_UUID = owningOrg.UUID

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '/user')
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' URL parameter does not match ' + owningOrg.short_name + ' in the JSON body.')
          done()
        })
    })

    it('User is created when org UUID is undefined', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      delete testUser.org_UUID

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '/user')
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrg.UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          done()
        })
    })

    it('User is created when org UUID is null', (done) => {
      User.findOneAndRemove()
        .byUUID(nonExistentUser.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          const testUser = Object.assign({}, nonExistentUser)
          testUser.org_UUID = null

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name + '/user')
            .set(secretariatHeader)
            .send(testUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrg.UUID)
              expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
              done()
            })
        })
    })

    it('User is created when user UUID is undefined', (done) => {
      User.findOneAndRemove()
        .byUUID(nonExistentUser.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          const testUser = Object.assign({}, nonExistentUser)
          delete testUser.UUID

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name + '/user')
            .set(secretariatHeader)
            .send(testUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
              expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
              expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
              done()
            })
        })
    })

    it('User is created when UUID is null', (done) => {
      User.findOneAndRemove()
        .byUserNameAndOrgUUID(nonExistentUser.username, nonExistentUser.org_UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          const testUser = Object.assign({}, nonExistentUser)
          testUser.UUID = null

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name + '/user')
            .set(secretariatHeader)
            .send(testUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
              expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
              expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
              done()
            })
        })
    })

    it('User is created when UUID is defined', (done) => {
      User.findOneAndRemove()
        .byUserNameAndOrgUUID(nonExistentUser.username, nonExistentUser.org_UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name + '/user')
            .set(secretariatHeader)
            .send(nonExistentUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('org_UUID').and.to.equal(nonExistentUser.org_UUID)
              expect(res.body.created).to.have.property('username').and.to.equal(nonExistentUser.username)
              expect(res.body.created).to.have.property('UUID').and.to.equal(nonExistentUser.UUID)
              done()
            })
        })
    })

    it('User is not created because it already exists', (done) => {
      User.findOneAndRemove()
        .byUUID(nonExistentUser.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name + '/user')
            .set(secretariatHeader)
            .send(existentUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(400)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(existentUser.username + ' already exists.')
              done()
            })
        })
    })
  })

  context('Updating a user', () => {
    it('User is not updated because org does not exist', (done) => {
      // perform the request to the api
      short_name = nonExistentOrg.short_name.replace(/\s/g, '')
      username = existentUser.username.replace(/\s/g, '')
      chai.request(server)
        .post(`/api/test/cna/${short_name}/user/${username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The user could not be updated because ' + nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('User is not updated because user does not exist', (done) => {
      // perform the request to the api
      short_name = existentOrg.short_name.replace(/\s/g, '')
      username = nonExistentUser.username.replace(/\s/g, '')
      chai.request(server)
        .post(`/api/test/cna/${short_name}/user/${username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.username + ' could not be found.')
          done()
        })
    })

    it('User is not updated because user does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/api/test/cna/${existentOrg.short_name}/user/${existentUser.username}?new_cna_shortname=${nonExistentOrg.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The user could not be updated because ' + nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    // check that the user is unchanged
    it('No query parameters are provided', (done) => {
      User.findOne()
        .byUUID(existentUser.UUID)
        .exec((err, result) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name + '/user/' + existentUser.username)
            .set(secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('updated').and.to.be.a('object')
              expect(JSON.stringify(res.body.updated)).to.equal('{}')
              expect(result.cna_short_name).to.equal(existentUser.cna_short_name)
              expect(result.username).to.equal(existentUser.username)
              expect(result.UUID).to.equal(existentUser.UUID)
              expect(result.secret).to.equal(existentUser.secret)
              expect(result.active).to.equal(existentUser.active)
              expect(result.name.first).to.equal(existentUser.name.first)
              expect(result.name.last).to.equal(existentUser.name.last)
              expect(result.name.middle).to.equal(existentUser.name.middle)
              expect(result.name.suffix).to.equal(existentUser.name.suffix)
              expect(result.name.surname).to.equal(existentUser.name.surname)
              done()
            })
        })
    })
  })

  context('Resetting a user\'s secret', () => {
    it('User secret is not reset because org does not exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + nonExistentOrg.short_name + '/user/' + existentUser.username + '/reset_secret')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The user secret could not be reset because ' + nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('User secret is not reset because user does not exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '/user/' + nonExistentUser.username + '/reset_secret')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.username + ' could not be found.')
          done()
        })
    })

    it('User secret is reset', (done) => {
      chai.request(server)
        // perform the request to the api
        .post('/api/test/cna/' + existentOrg.short_name + '/user/' + existentUser.username + '/reset_secret')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('API-secret').and.to.be.a('string')
          done()
        })
    })
  })

  context('Getting a user', () => {
    it('Org does not exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + nonExistentOrg.short_name + '/user/' + existentUser.username)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('User does not exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + existentOrg.short_name + '/user/' + nonExistentUser.username)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.username + ' does not exist.')
          done()
        })
    })

    it('User exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + existentOrg.short_name + '/user/' + existentUser.username)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('username').and.to.equal(existentUser.username)
          expect(res.body).to.have.property('org_UUID').and.to.equal(existentUser.org_UUID)
          done()
        })
    })
  })

  after(async () => {
    await User.deleteMany({})
    await Org.deleteMany({})

    // The db connection must be closed after all tests are run. The userTest.js is the last test file to run because it is
    // the last file in the unit test folder (tests are run sequentially). Therefore, this test closes the db connection.
    mongoose.connection.close()
  })
})
