const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const headers = require('./mockObjects.org').headers
const orgHeader = require('./mockObjects.org').orgHeader
const existentUser = require('./mockObjects.org').existentUser
const nonExistentUser = require('./mockObjects.org').nonExistentUser
const existentOrg = require('./mockObjects.org').existentOrg
const owningOrg = require('./mockObjects.org').owningOrg
const existentUserDummy = require('./mockObjects.org').existentUserDummy
const existentUserDummy2 = require('./mockObjects.org').existentUserDummy2
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')

describe('Test user functions in Org Controller', () => {
  before(async () => {
    await User.findOneAndRemove()
      .byUUID(nonExistentUser.UUID)

    await Org.findOneAndRemove()
      .byUUID(nonExistentOrg.UUID)

    await User.findOneAndUpdate()
      .byUUID(existentUser.UUID)
      .updateOne(existentUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(existentUserDummy.UUID)
      .updateOne(existentUserDummy)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(existentOrg.UUID)
      .updateOne(existentOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(owningOrg.UUID)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })
  })

  context('Creating a user', () => {
    it('User username is undefined', (done) => {
      const testUser = Object.assign({}, existentUser)
      delete testUser.username

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + testUser.cna_short_name + '/user')
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('To create a user, a username must be provided.')
          done()
        })
    })

    it('User username is null', (done) => {
      const testUser = Object.assign({}, existentUser)
      testUser.username = null

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + testUser.cna_short_name + '/user')
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('To create a user, a username must be provided.')
          done()
        })
    })

    it('User is created when org UUID is undefined', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      delete testUser.org_UUID

      Org.findOne()
        .byUUID(nonExistentUser.org_UUID)
        .exec((err, org) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + org.short_name + '/user')
            .set(headers)
            .send(testUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('org_UUID').and.to.equal(nonExistentUser.org_UUID)
              expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
              done()
            })
        })
    })

    it('User is created when org UUID is null', (done) => {
      User.findOneAndRemove()
        .byUUID(nonExistentUser.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          Org.findOne()
            .byUUID(nonExistentUser.org_UUID)
            .exec((err, org) => {
              if (err) {
                done(err)
              }

              const testUser = Object.assign({}, nonExistentUser)
              testUser.org_UUID = null

              // perform the request to the api
              chai.request(server)
                .post('/api/test/cna/' + org.short_name + '/user')
                .set(headers)
                .send(testUser)
                .end((err, res) => {
                  if (err) {
                    done(err)
                  }

                  // assert expected response
                  expect(res).to.have.status(200)
                  expect(res).to.have.property('body').and.to.be.a('object')
                  expect(res.body).to.have.property('message').and.to.be.a('string')
                  expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
                  expect(res.body).to.have.property('created').and.to.be.a('object')
                  expect(res.body.created).to.have.property('org_UUID').and.to.equal(nonExistentUser.org_UUID)
                  expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
                  done()
                })
            })
        })
    })

    it('User is created when org shortname is defined and user UUID is undefined', (done) => {
      User.findOneAndRemove()
        .byUUID(nonExistentUser.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          Org.findOne()
            .byUUID(nonExistentUser.org_UUID)
            .exec((err, org) => {
              if (err) {
                done(err)
              }

              const testUser = Object.assign({}, nonExistentUser)
              delete testUser.UUID

              // perform the request to the api
              chai.request(server)
                .post('/api/test/cna/' + org.short_name + '/user')
                .set(headers)
                .send(testUser)
                .end((err, res) => {
                  if (err) {
                    done(err)
                  }

                  // assert expected response
                  expect(res).to.have.status(200)
                  expect(res).to.have.property('body').and.to.be.a('object')
                  expect(res.body).to.have.property('message').and.to.be.a('string')
                  expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
                  expect(res.body).to.have.property('created').and.to.be.a('object')
                  expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
                  expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
                  expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
                  done()
                })
            })
        })
    })

    it('User is created when UUID is null', (done) => {
      User.findOneAndRemove()
        .byUserNameAndOrgUUID(nonExistentUser.username, nonExistentUser.org_UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          Org.findOne()
            .byUUID(nonExistentUser.org_UUID)
            .exec((err, org) => {
              if (err) {
                done(err)
              }

              const testUser = Object.assign({}, nonExistentUser)
              testUser.UUID = null

              // perform the request to the api
              chai.request(server)
                .post('/api/test/cna/' + org.short_name + '/user')
                .set(headers)
                .send(testUser)
                .end((err, res) => {
                  if (err) {
                    done(err)
                  }

                  // assert expected response
                  expect(res).to.have.status(200)
                  expect(res).to.have.property('body').and.to.be.a('object')
                  expect(res.body).to.have.property('message').and.to.be.a('string')
                  expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
                  expect(res.body).to.have.property('created').and.to.be.a('object')
                  expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
                  expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
                  expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
                  done()
                })
            })
        })
    })

    it('User is created when UUID is defined', (done) => {
      User.findOneAndRemove()
        .byUserNameAndOrgUUID(nonExistentUser.username, nonExistentUser.org_UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          Org.findOne()
            .byUUID(nonExistentUser.org_UUID)
            .exec((err, org) => {
              if (err) {
                done(err)
              }

              const testUser = Object.assign({}, nonExistentUser)
              testUser.UUID = 'ec8ea481-c630-4afb-a270-c72eb646eaa5'

              // perform the request to the api
              chai.request(server)
                .post('/api/test/cna/' + org.short_name + '/user')
                .set(headers)
                .send(testUser)
                .end((err, res) => {
                  if (err) {
                    done(err)
                  }

                  // assert expected response
                  expect(res).to.have.status(200)
                  expect(res).to.have.property('body').and.to.be.a('object')
                  expect(res.body).to.have.property('message').and.to.be.a('string')
                  expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
                  expect(res.body).to.have.property('created').and.to.be.a('object')
                  expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
                  expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
                  expect(res.body.created).to.have.property('UUID').and.to.equal(testUser.UUID)
                  done()
                })
            })
        })
    })

    // it('User is null', (done) => {
    //   User.findOneAndRemove()
    //     .byUserNameAndOrgUUID(nonExistentUser.username, nonExistentUser.org_UUID)
    //     .exec((err) => {
    //       if (err) {
    //         done(err)
    //       }

    //       User.findOne()
    //         .byUserNameAndOrgUUID(nonExistentUser.username, nonExistentUser.org_UUID)
    //         .exec((err, user) => {
    //           if (err) {
    //             done(err)
    //           }

    //           console.log(user)
    //           done()
    //         })
    //     })
    // })

    // it('User is not created because org shortname does not match', (done) => {
    //   const testUser = Object.assign({}, nonExistentUser)
    //   testUser.cna_short_name = 'apple'

    //   // perform the request to the api
    //   chai.request(server)
    //     .post('/api/test/cna/' + testUser.cna_short_name + '/user')
    //     .set(headers)
    //     .send(nonExistentUser)
    //     .end((err, res) => {
    //       if (err) {
    //         done(err)
    //       }

    //       // assert expected response
    //       expect(res).to.have.status(400)
    //       expect(res).to.have.property('body').and.to.be.a('object')
    //       expect(res.body).to.have.property('message').and.to.be.a('string')
    //       expect(res.body.message).to.equal(testUser.cna_short_name + ' URL parameter does not match ' + nonExistentUser.cna_short_name + ' in the JSON body.')
    //       done()
    //     })
    // })

    // it('User is not created because org does not exists', (done) => {
    //   const testUser = Object.assign({}, nonExistentUser)
    //   testUser.cna_short_name = 'alibaba'

    //   // perform the request to the api
    //   chai.request(server)
    //     .post('/api/test/cna/' + testUser.cna_short_name + '/user')
    //     .set(headers)
    //     .send(testUser)
    //     .end((err, res) => {
    //       if (err) {
    //         done(err)
    //       }

    //       // assert expected response
    //       expect(res).to.have.status(400)
    //       expect(res).to.have.property('body').and.to.be.a('object')
    //       expect(res.body).to.have.property('message').and.to.be.a('string')
    //       expect(res.body.message).to.equal('The user could not be created because ' + testUser.cna_short_name + ' CNA does not exist.')
    //       done()
    //     })
    // })

    // it('User is not created because it already exists', (done) => {
    //   // perform the request to the api
    //   chai.request(server)
    //     .post('/api/test/cna/' + existentUser.cna_short_name + '/user')
    //     .set(headers)
    //     .send(existentUser)
    //     .end((err, res) => {
    //       if (err) {
    //         done(err)
    //       }

    //       // assert expected response
    //       expect(res).to.have.status(400)
    //       expect(res).to.have.property('body').and.to.be.a('object')
    //       expect(res.body).to.have.property('message').and.to.be.a('string')
    //       expect(res.body.message).to.equal(existentUser.username + ' already exists.')
    //       done()
    //     })
    // })
  })

  //   context('Updating a user', () => {
  //     it('Requestor is not secretariat', (done) => {
  //       // perform the request to the api
  //       chai.request(server)
  //         .post('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username + '?active="' + existentUserDummy.active + '"')
  //         .set(orgHeader)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(403)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal('A user cannot be updated by other than the Secretariat.')
  //           done()
  //         })
  //     })

  //     it('Bad active query parameter', (done) => {
  //       // perform the request to the api
  //       chai.request(server)
  //         .post('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username + '?active=rtue"')
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(400)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal('Bad query parameter.')
  //           done()
  //         })
  //     })

  //     it('Invalid query parameter', (done) => {
  //       // perform the request to the api
  //       chai.request(server)
  //         .post('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username + '?username="' + nonExistentUser.username + '"')
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(400)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal('Invalid query parameter \'username\'')
  //           done()
  //         })
  //     })

  //     it('User is not updated because it does not exists', (done) => {
  //       const testUser = Object.assign({}, nonExistentUser)
  //       testUser.cna_short_name = 'alibaba'

  //       // perform the request to the api
  //       chai.request(server)
  //         .post('/api/test/cna/' + testUser.cna_short_name + '/user/' + testUser.username + '?active="' + testUser.active + '"')
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(404)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal(testUser.username + ' could not be found.')
  //           done()
  //         })
  //     })

  //     // username, cna_short_name, active, name.first, name.last, name.middle, name.suffix, and name.surname are changed
  //     it('User is updated', (done) => {
  //       // perform the request to the api
  //       chai.request(server)
  //         .post('/api/test/cna/' + existentUserDummy.cna_short_name + '/user/' + existentUserDummy.username + '?new_username="' + existentUserDummy2.username +
  //         '"&new_cna_shortname="' + existentUserDummy2.cna_short_name + '"&active="' + existentUserDummy2.active + '"&name.first="' + existentUserDummy2.name.first +
  //         '"&name.last="' + existentUserDummy2.name.last + '"&name.middle="' + existentUserDummy2.name.middle + '"&name.suffix="' + existentUserDummy2.name.suffix +
  //         '"&name.surname="' + existentUserDummy2.name.surname + '"')
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(200)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal(existentUserDummy.username + ' was successfully updated.')
  //           expect(res.body.updated.cna_short_name).to.equal(existentUserDummy2.cna_short_name)
  //           expect(res.body.updated.username).to.equal(existentUserDummy2.username)
  //           expect(res.body.updated.active).to.equal(existentUserDummy2.active)
  //           expect(res.body.updated.name.first).to.equal(existentUserDummy2.name.first)
  //           expect(res.body.updated.name.last).to.equal(existentUserDummy2.name.last)
  //           expect(res.body.updated.name.middle).to.equal(existentUserDummy2.name.middle)
  //           expect(res.body.updated.name.suffix).to.equal(existentUserDummy2.name.suffix)
  //           expect(res.body.updated.name.surname).to.equal(existentUserDummy2.name.surname)
  //           done()
  //         })
  //     })

  //     it('No query parameters are provided', (done) => {
  //       User.findOne()
  //         .byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
  //         .exec((err, result) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // perform the request to the api
  //           chai.request(server)
  //             .post('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username)
  //             .set(headers)
  //             .end((err, res) => {
  //               if (err) {
  //                 done(err)
  //               }

  //               // assert expected response
  //               expect(res).to.have.status(200)
  //               expect(res).to.have.property('body').and.to.be.a('object')
  //               expect(res.body).to.have.property('updated').and.to.be.a('object')
  //               expect(JSON.stringify(res.body.updated)).to.equal('{}')
  //               expect(result.cna_short_name).to.equal(existentUser.cna_short_name)
  //               expect(result.username).to.equal(existentUser.username)
  //               expect(result.UUID).to.equal(existentUser.UUID)
  //               expect(result.secret).to.equal(existentUser.secret)
  //               expect(result.active).to.equal(existentUser.active)
  //               expect(result.name.first).to.equal(existentUser.name.first)
  //               expect(result.name.last).to.equal(existentUser.name.last)
  //               expect(result.name.middle).to.equal(existentUser.name.middle)
  //               expect(result.name.suffix).to.equal(existentUser.name.suffix)
  //               expect(result.name.surname).to.equal(existentUser.name.surname)
  //               done()
  //             })
  //         })
  //     })
  //   })

  //   context('Resetting a user\'s secret', () => {
  //     it('Requestor is not secretariat', (done) => {
  //       chai.request(server)
  //         // perform the request to the api
  //         .post('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username + '/reset_secret')
  //         .set(orgHeader)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(403)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal('The user\'s secret cannot be updated by other than the Secretariat.')
  //           done()
  //         })
  //     })

  //     it('User secret is not reset because user does not exists', (done) => {
  //       const testUser = Object.assign({}, nonExistentUser)
  //       testUser.cna_short_name = 'alibaba'

  //       // perform the request to the api
  //       chai.request(server)
  //         .post('/api/test/cna/' + testUser.cna_short_name + '/user/' + testUser.username + '/reset_secret')
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(404)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('message').and.to.be.a('string')
  //           expect(res.body.message).to.equal(testUser.username + ' could not be found.')
  //           done()
  //         })
  //     })

  //     it('Requestor is secretariat', (done) => {
  //       chai.request(server)
  //         // perform the request to the api
  //         .post('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username + '/reset_secret')
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(200)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('API-secret').and.to.be.a('string')
  //           done()
  //         })
  //     })
  //   })

  //   context('Getting a user', () => {
  //     it('User exists', (done) => {
  //       // perform the request to the api
  //       chai.request(server)
  //         .get('/api/test/cna/' + existentUser.cna_short_name + '/user/' + existentUser.username)
  //         .set(headers)
  //         .end((err, res) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // assert expected response
  //           expect(res).to.have.status(200)
  //           expect(res).to.have.property('body').and.to.be.a('object')
  //           expect(res.body).to.have.property('username').and.to.equal(existentUser.username)
  //           expect(res.body).to.have.property('cna_short_name').and.to.equal(existentUser.cna_short_name)
  //           done()
  //         })
  //     })

  //     it('User does not exists', (done) => {
  //       User.findOneAndRemove()
  //         .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
  //         .exec((err) => {
  //           if (err) {
  //             done(err)
  //           }

  //           // perform the request to the api
  //           chai.request(server)
  //             .get('/api/test/cna/' + nonExistentUser.cna_short_name + '/user/' + nonExistentUser.username)
  //             .set(headers)
  //             .end((err, res) => {
  //               if (err) {
  //                 done(err)
  //               }

  //               // assert expected response
  //               expect(res).to.have.status(404)
  //               expect(res).to.have.property('body').and.to.be.a('object')
  //               expect(res.body).to.have.property('message').and.to.be.a('string')
  //               expect(res.body.message).to.equal(nonExistentUser.username + ' does not exist.')
  //               done()
  //             })
  //         })
  //     })
  //   })

  after(async () => {
    await User.deleteMany({})
    await Org.deleteMany({})

    // The db connection must be closed after all tests are run. The userTest.js is the last test file to run because it is
    // the last file in the unit test folder (tests are run sequentially). Therefore, this test closes the db connection.
    mongoose.connection.close()
  })
})
