const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

const orgFixtures = require('./mockObjects.org')
const orgController = require('../../../src/controller/org.controller/org.controller')
const orgParams = require('../../../src/controller/org.controller/org.middleware')

const errors = require('../../../src/controller/org.controller/error')
const error = new errors.OrgControllerError()

describe('Testing the /org/:shortname/users endpoint in Org Controller', () => {
  context('Negative Tests', () => {
    it('should return 404 not found because org does not exist', (done) => {
      class NoOrg {
        async getOrgUUID () {
          return null
        }

        async isSecretariat () {
          return false
        }
      }

      class Blank {
        async aggregate () {
          return []
        }
      }

      server.route('/org-does-not-exist/:shortname/users')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new NoOrg() },
            getUserRepository: () => { return new Blank() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.USER_ALL)

      
      chai.request(server)
        .get(`/org-does-not-exist/${orgFixtures.nonExistentOrg.short_name}/users`)
        .set(orgFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(orgFixtures.nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('should return 403 forbidden because requester does not belong to the same org', (done) => {
      class NotSameOrg {
        async getOrgUUID () {
          return 'not-an-org'
        }

        async isSecretariat () {
          return false
        }
      }

      class Blank {
        async aggregate () {
          return []
        }
      }

      server.route('/requester-does-not-belong/:shortname/users')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new NotSameOrg() },
            getUserRepository: () => { return new Blank() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.USER_ALL)

      
      chai.request(server)
        .get(`/requester-does-not-belong/${orgFixtures.owningOrg.short_name}/users`)
        .set(orgFixtures.orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameOrgOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Positive Tests', () => {
    it('should list the users for cisco org because requester belongs to the same org', (done) => {
      class GetOrgUUID {
        async getOrgUUID () {
          return orgFixtures.owningOrg.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class GetAllOrgUsers {
        async aggregate () {
          return [orgFixtures.existentUserDummy]
        }
      }

      server.route('/user-list-returned-same-org/:shortname/users')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new GetOrgUUID() },
            getUserRepository: () => { return new GetAllOrgUsers() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.USER_ALL)

      
      chai.request(server)
        .get(`/user-list-returned-same-org/${orgFixtures.owningOrg.short_name}/users`)
        .set(orgFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body[0]).to.have.property('org_UUID').and.to.equal(orgFixtures.owningOrg.UUID)
          done()
        })
    })

    it('should list the users for cisco org because requester is the secretariat', (done) => {
      class GetOrgUUID {
        async getOrgUUID () {
          return orgFixtures.owningOrg.UUID
        }

        async isSecretariat () {
          return true
        }
      }

      class GetAllOrgUsers {
        async aggregate () {
          return [orgFixtures.existentUserDummy]
        }
      }

      server.route('/user-list-returned-secretariat/:shortname/users')
        .get((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new GetOrgUUID() },
            getUserRepository: () => { return new GetAllOrgUsers() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseGetParams, orgController.USER_ALL)

      
      chai.request(server)
        .get(`/user-list-returned-secretariat/${orgFixtures.owningOrg.short_name}/users`)
        .set(orgFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body[0]).to.have.property('org_UUID').and.to.equal(orgFixtures.owningOrg.UUID)
          done()
        })
    })
  })
})
