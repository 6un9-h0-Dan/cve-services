const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
const assert = chai.assert
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const headers = require('./mockObjects.org').headers
const existentOrg = require('./mockObjects.org').existentOrg
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg
const orgWithZeroIdQuota = require('./mockObjects.org').orgWithZeroIdQuota
const orgWithNegativeIdQuota = require('./mockObjects.org').orgWithNegativeIdQuota
const secretariatHeader = require('../cve-id/mockObjects.cve-id').secretariatHeader
const existentUser = require('./mockObjects.org').existentUser
const nonExistentUser = require('./mockObjects.org').nonExistentUser
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const logger = require('../../../src/middleware/logger')
const CONSTANTS = require('../../../src/constants')

describe('Test Org Controller', () => {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      User.findOneAndRemove()
        .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          Org.findOneAndRemove()
            .byShortName(nonExistentOrg.shortName)
            .exec((err) => {
              if (err) {
                done(err)
              }

              User.findOneAndUpdate()
                .byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
                .updateOne(existentUser)
                .setOptions({ upsert: true })
                .exec((err) => {
                  if (err) {
                    done(err)
                  }

                  Org.findOneAndUpdate()
                    .byShortName(existentOrg.shortName)
                    .updateOne(existentOrg)
                    .setOptions({ upsert: true })
                    .exec((err) => {
                      if (err) {
                        done(err)
                      }

                      Org.findOneAndUpdate()
                      .byShortName(orgWithZeroIdQuota.shortName)
                      .updateOne({}, orgWithZeroIdQuota, { runValidators: true })
                      .setOptions({ upsert: true })
                      .exec((err) => {
                        if (err) {
                          done(err)
                        } 
                        done()
                      })
                    })
                })
            })
        })
    })
  })

  context('Creating an org', () => {
    it('Org shortname is undefined', (done) => {
      const testCna = Object.assign({}, existentOrg)
      delete testCna.short_name

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s short name to create the cna.')
          done()
        })
    })

    it('Org name is undefined', (done) => {
      const testCna = Object.assign({}, existentOrg)
      delete testCna.name

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s name to create the cna.')
          done()
        })
    })

    it('Org is created when org shortname and org name are defined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(nonExistentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(nonExistentOrg.short_name)
          done()
        })
    })

    it('Org is not created because it already exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA already exists.')
          done()
        })
    })
  })

  context('Updating an org', () => {
    it('Org is updated when org shortname is undefined', (done) => {
      const testCna = Object.assign({}, existentOrg)
      delete testCna.short_name

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name)
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('short_name').to.equal(existentOrg.short_name)
          done()
        })
    })

    it('Org is updated when org shortname is defined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name)
        .set(headers)
        .send(existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('short_name').to.equal(existentOrg.short_name)
          done()
        })
    })

    it('Org is not updated because it does not exists', (done) => {
      Org.findOneAndRemove()
        .byShortName(nonExistentOrg.short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + nonExistentOrg.short_name)
            .set(headers)
            .send(nonExistentOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
              done()
            })
        })
    })
  })

  context('Getting an org', () => {
    it('Org does not exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + nonExistentOrg.short_name)
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('Org exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + existentOrg.short_name)
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(existentOrg.short_name)
          done()
        })
    })
  })

  context('Getting an org\'s ID quota', () => {
    it('Org with a negative ID quoto was not saved', (done) => {
      let org = new Org(orgWithNegativeIdQuota);

        org.validate((err) => {
          expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min_message)
          logger.info(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min)
          done()
        });
    });

    it('Org has an available ID quoto of atleast zero', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + existentOrg.short_name + '/id_quota') 
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200);
          expect(res).to.have.property('body').and.to.be.a('object');
          assert.isAtLeast(res.body.available, CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min, 'Org available ID quota is below the minimum threshold of ' + CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min + '.')
          assert.isBelow(res.body.available, CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max, 'Org available ID quota exceeded maximum threshold of  ' + CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max + '.')
          done()
        });
    });

    it('Org\'s available ID quoto below zero returns an error', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + orgWithZeroIdQuota.short_name + '/id_quota') 
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400);
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Total reserved exceeded id_quota, contact an administrator.')
          logger.info(res)
          done()
        });
    });
  });

  context('Getting all orgs', () => {
    it('Orgs exists', (done) => {
      Org.estimatedDocumentCount((err, count) => {
        if (err) {
          done(err)
        }

        // perform the request to the api
        chai.request(server)
          .get('/api/test/cna')
          .set(headers)
          .end((err, res) => {
            if (err) {
              done(err)
            }

            // assert expected response
            expect(res).to.have.status(200)
            expect(res).to.have.property('body').and.to.be.a('array')
            expect(res.body).to.have.lengthOf(count)
            done()
          })
      })
    })

    // it('Orgs do not exists', (done) => {
    //   Org.deleteMany({}, (err) => {
    //     if (err) {
    //       done(err)
    //     }

    //     // perform the request to the api
    //     chai.request(server)
    //       .get('/api/test/cna')
    //       .set(headers)
    //       .end((err, res) => {
    //         if (err) {
    //           done(err)
    //         }

    //         // assert expected response
    //         expect(res).to.have.status(200)
    //         expect(res).to.have.property('body').and.to.be.a('array')
    //         expect(res.body).to.have.lengthOf(0)
    //         done()
    //       })
    //   })
  })

  after((done) => {
    User.findOneAndRemove()
      .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
      .exec((err) => {
        if (err) {
          done(err)
        }

        Org.findOneAndRemove()
          .byShortName(nonExistentOrg.short_name)
          .exec((err) => {
            if (err) {
              done(err)
            }

            User.findOneAndRemove()
              .byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
              .exec((err) => {
                if (err) {
                  done(err)
                }

                Org.findOneAndRemove()
                  .byShortName(existentOrg.short_name)
                  .exec((err) => {
                    if (err) {
                      done(err)
                    }

                    mongoose.connection.close(done)
                  })
              })
          })
      })
  })
})
