const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const headers = require('./mockObjects.org').headers
const secretariatHeader = require('./mockObjects.org').secretariatHeader
const owningOrgHeader = require('./mockObjects.org').owningOrgHeader
const orgHeader = require('./mockObjects.org').orgHeader
const owningOrg = require('./mockObjects.org').owningOrg
const existentOrg = require('./mockObjects.org').existentOrg
const existentOrgDummy = require('./mockObjects.org').existentOrgDummy
const existentOrgDummy2 = require('./mockObjects.org').existentOrgDummy2
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg
const orgWithZeroIdQuota = require('./mockObjects.org').orgWithZeroIdQuota
const orgWithNegativeIdQuota = require('./mockObjects.org').orgWithNegativeIdQuota
const orgExceedingMaxIdQuota = require('./mockObjects.org').orgExceedingMaxIdQuota
const existentUser = require('./mockObjects.org').existentUser
const nonExistentUser = require('./mockObjects.org').nonExistentUser
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')

describe('Test Org Controller', () => {
  before(async () => {
    await User.findOneAndRemove().byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)

    await Org.findOneAndRemove().byShortName(nonExistentOrg.short_name)

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
      .updateOne(existentUser)
      .setOptions({ upsert: true })

    // await Org.findOneAndUpdate()
    //   .byShortName(existentOrg.short_name)
    //   .updateOne(existentOrg)
    //   .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(existentOrgDummy.short_name)
      .updateOne(existentOrgDummy)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(owningOrg.short_name)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(orgWithZeroIdQuota.short_name)
      .updateOne({}, orgWithZeroIdQuota, { runValidators: true })
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(orgWithNegativeIdQuota.short_name)
      .updateOne(orgWithNegativeIdQuota)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(orgExceedingMaxIdQuota.short_name)
      .updateOne(orgExceedingMaxIdQuota)
      .setOptions({ upsert: true })
  })

  context('Creating an org', () => {
    it('Org shortname is undefined', (done) => {
      const testCna = Object.assign({}, existentOrg)
      delete testCna.short_name

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s short name to create the cna.')
          done()
        })
    })

    it('Org name is undefined', (done) => {
      const testCna = Object.assign({}, existentOrg)
      delete testCna.name

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s name to create the cna.')
          done()
        })
    })

    it('Org is not Secretariat and is created when org shortname and org name are defined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(nonExistentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(nonExistentOrg.short_name)
          expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(nonExistentOrg.policies.id_quota)
          done()
        })
    })

    it('Org is Secretariat and is created when org shortname and org name are defined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
          expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(null)
          done()
        })
    })

    it('Org is not created because it already exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(headers)
        .send(existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA already exists.')
          done()
        })
    })
  })

  context('Updating an org', () => {
    it('Requester is not Secretariat', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('A CNA cannot be updated by other than the Secretariat.')
          done()
        })
    })

    it('Org role does not exist (Adding multiple roles)', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?active_roles.add="ADP"&active_roles.add="vendor"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CNA role \'VENDOR\' does not exist.')
          done()
        })
    })

    it('Org role does not exist (Adding a single role)', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?active_roles.add="VENDOR"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CNA role \'VENDOR\' does not exist.')
          done()
        })
    })

    it('Org role does not exist (Removing multiple roles)', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?active_roles.remove="ROOT_CNA"&active_roles.remove="VENDOR"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CNA role \'VENDOR\' does not exist.')
          done()
        })
    })

    it('Org role does not exist (Removing a single role)', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?active_roles.remove="vendor"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CNA role \'VENDOR\' does not exist.')
          done()
        })
    })

    it('Invalid query parameter', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?cna_short_name="alibaba"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Invalid query parameter \'cna_short_name\'')
          done()
        })
    })

    it('Bad id_quota query parameter', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?id_quota="3ll"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad query parameter.')
          done()
        })
    })

    it('Org is not updated because id_quota exceeds max quota limit', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + nonExistentOrg.cna_short_name + '?id_quota="' + (CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max + 1) + '"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The id_quota does not comply with CVE id quota limitations.')
          done()
        })
    })

    it('Org is not updated because id_quota exceeds min quota limit', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + nonExistentOrg.cna_short_name + '?id_quota="' + (CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min - 1) + '"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The id_quota does not comply with CVE id quota limitations.')
          done()
        })
    })

    it('Org is not updated because CNA shortname already exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentUser.cna_short_name + '?shortname="cisco"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CNA can not be renamed as cisco because this shortname is used by another CNA.')
          done()
        })
    })

    it('Org is not updated because it does not exists', (done) => {
      Org.findOneAndRemove()
        .byShortName(nonExistentOrg.short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + nonExistentOrg.short_name)
            .set(headers)
            .send(nonExistentOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
              done()
            })
        })
    })

    // id_quota, name, and shortname are changed
    // current: 'CNA', 'ADP'
    // add: 'ROOT_CNA', 'SECRETARIAT'
    // remove: 'CNA', 'ADP'
    // result: 'ROOT_CNA', 'SECRETARIAT'
    it('Org is updated with multiple roles added and removed', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrgDummy.short_name + '?id_quota="' + existentOrgDummy2.policies.id_quota + '"&name="' +
        existentOrgDummy2.name + '"&shortname="' + existentOrgDummy2.short_name + '"&active_roles.add="' + existentOrgDummy2.authority.active_roles[0] +
        '"&active_roles.add="' + existentOrgDummy2.authority.active_roles[1] + '&active_roles.remove="' + existentOrgDummy.authority.active_roles[0] +
        '"&active_roles.remove="' + existentOrgDummy.authority.active_roles[1] + '"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrgDummy.short_name + ' CNA was successfully updated.')
          expect(res.body.updated.short_name).to.equal(existentOrgDummy2.short_name)
          expect(res.body.updated.name).to.equal(existentOrgDummy2.name)
          expect(res.body.updated.policies.id_quota).to.equal(existentOrgDummy2.policies.id_quota)
          expect(res.body.updated.authority.active_roles).to.have.lengthOf(2)
          expect(res.body.updated.authority.active_roles[0]).to.equal(existentOrgDummy2.authority.active_roles[0])
          expect(res.body.updated.authority.active_roles[1]).to.equal(existentOrgDummy2.authority.active_roles[1])
          done()
        })
    })

    // id_quota, shortname, and name are unchanged
    // current: 'ROOT_CNA', 'SECRETARIAT'
    // add: 'CNA'
    // remove: 'ROOT_CNA'
    // result: 'SECRETARIAT', 'ROOT_CNA'
    it('Org is updated with single roles added and removed', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrgDummy2.short_name + '?active_roles.add="' + existentOrg.authority.active_roles[0] +
        '&active_roles.remove="' + existentOrgDummy2.authority.active_roles[0] + '"')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrgDummy2.short_name + ' CNA was successfully updated.')
          expect(res.body.updated.authority.active_roles).to.have.lengthOf(2)
          expect(res.body.updated.authority.active_roles[0]).to.equal(existentOrgDummy2.authority.active_roles[1])
          expect(res.body.updated.authority.active_roles[1]).to.equal(existentOrg.authority.active_roles[0])
          done()
        })
    })

    it('New org short_name is not secretariat and id_quota is updated', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '?id_quota="' + existentOrgDummy.policies.id_quota + '"&shortname="' +
        existentOrgDummy.short_name + "'")
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(existentOrgDummy.policies.id_quota)
          expect(res.body.updated).to.have.property('short_name').to.equal(existentOrgDummy.short_name)
          expect(res.body.updated.policies.id_quota).to.be.at.least(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min)
          expect(res.body.updated.policies.id_quota).to.be.at.below(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max)
          done()
        })
    })

    it('New org short_name is secretariat and id_quota is updated', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrgDummy.short_name + '?id_quota="' + existentOrgDummy2.policies.id_quota + '"&shortname="' +
        existentOrg.short_name + "'")
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrgDummy.short_name + ' CNA was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(null)
          expect(res.body.updated).to.have.property('short_name').to.equal(existentOrg.short_name)
          done()
        })
    })

    it('Org is secretariat and id_quota is updated', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '?id_quota="' + existentOrgDummy2.policies.id_quota + "'")
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(null)
          done()
        })
    })

    it('Org is not secretariat and id_quota is updated', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrgDummy2.short_name + '?id_quota="' + existentOrgDummy.policies.id_quota + "'")
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existentOrgDummy2.short_name + ' CNA was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(existentOrgDummy.policies.id_quota)
          expect(res.body.updated.policies.id_quota).to.be.at.least(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min)
          expect(res.body.updated.policies.id_quota).to.be.at.below(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max)
          done()
        })
    })

    it('No query parameters are provided', (done) => {
      Org.findOne()
        .byShortName(existentOrg.short_name)
        .exec((err, result) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name)
            .set(headers)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('updated').and.to.be.a('object')
              expect(res.body.updated.authority.active_roles[0]).to.equal(result.authority.active_roles[0])
              expect(res.body.updated.authority.active_roles[1]).to.equal(result.authority.active_roles[1])
              expect(result.short_name).to.equal(existentOrg.short_name)
              expect(result.policies.id_quota).to.equal(existentOrg.policies.id_quota)
              expect(result.name).to.equal(existentOrg.name)
              done()
            })
        })
    })
  })

  context('Getting an org', () => {
    it('Org does not exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + nonExistentOrg.short_name)
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('Org exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + existentOrg.short_name)
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(existentOrg.short_name)
          done()
        })
    })
  })

  context('Getting an org\'s ID quota', () => {
    it('Org with a negative ID quota was not saved', (done) => {
      const org = new Org(orgWithNegativeIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min_message)
        done()
      })
    })

    it('Org with an ID quota greater than the max was not saved', (done) => {
      const org = new Org(orgExceedingMaxIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max_message)
        done()
      })
    })

    it('Requestor is secretariat and requested org is secretariat', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + existentOrg.short_name + '/id_quota')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(null)
          expect(res.body.total_reserved).to.equal(null)
          expect(res.body.available).to.equal(null)
          done()
        })
    })

    it('Requestor is owning org and requested org is not secretariat', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + owningOrg.short_name + '/id_quota')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(owningOrg.policies.id_quota)
          expect(res.body.available).to.be.at.least(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min)
          expect(res.body.available).to.be.at.below(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max)
          done()
        })
    })

    it('Requestor is not secretariat or owning org', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + owningOrg.short_name + '/id_quota')
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('This information can only be viewed by the owning CNA or the Secretariat.')
          done()
        })
    })

    it('Org does not exist', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + nonExistentOrg.short_name + '/id_quota')
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('Org id quota is below zero', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + orgWithNegativeIdQuota.short_name + '/id_quota')
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Total reserved exceeded id_quota, contact an administrator.')
          done()
        })
    })
  })

  context('Getting all orgs', () => {
    it('Orgs exists', (done) => {
      Org.estimatedDocumentCount((err, count) => {
        if (err) {
          done(err)
        }

        // perform the request to the api
        chai.request(server)
          .get('/api/test/cna')
          .set(headers)
          .end((err, res) => {
            if (err) {
              done(err)
            }

            // assert expected response
            expect(res).to.have.status(200)
            expect(res).to.have.property('body').and.to.be.a('array')
            expect(res.body).to.have.lengthOf(count)
            done()
          })
      })
    })

    it('Orgs do not exists', (done) => {
      Org.deleteMany({}, (err) => {
        if (err) {
          done(err)
        }

        // perform the request to the api
        chai.request(server)
          .get('/api/test/cna')
          .set(headers)
          .end((err, res) => {
            if (err) {
              done(err)
            }

            // assert expected response
            expect(res).to.have.status(200)
            expect(res).to.have.property('body').and.to.be.a('array')
            expect(res.body).to.have.lengthOf(0)
            done()
          })
      })
    })
  })

  after(async () => {
    await User.findOneAndRemove().byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(nonExistentOrg.short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(existentOrg.short_name)
    await Org.findOneAndRemove().byShortName(existentOrgDummy2.short_name)
    await Org.findOneAndRemove().byShortName(owningOrg.short_name)
    await Org.findOneAndRemove().byShortName(orgWithZeroIdQuota.short_name)
    await Org.findOneAndRemove().byShortName(orgWithNegativeIdQuota.short_name)
    await Org.findOneAndRemove().byShortName(orgExceedingMaxIdQuota.short_name)
  })
})
