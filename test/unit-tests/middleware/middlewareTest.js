const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeaders = require('./mockObjects.middleware').secretariatHeaders
const existingUser = require('./mockObjects.middleware').existentUser
const deactivatedUser = require('./mockObjects.middleware').deactivatedUser
const existentOrg = require('./mockObjects.middleware').existentOrg
const errors = require('../../../src/middleware/error')
const error = new errors.MiddlewareError()
const CONSTANTS = require('../../../src/constants')
const cveId5 = 'CVE-2017-4024'
const cvePass5 = require('../../schemas/5.0/' + cveId5 + '.json')
const cvefail5 = require('../../schemas/5.0/' + cveId5 + '_fail.json')
const cveRejectFail5 = require('../../schemas/5.0/' + cveId5 + '_reject_fail.json')
const cveReservedFail5 = require('../../schemas/5.0/' + cveId5 + '_reserved_fail.json')
const cvePublicFail5 = require('../../schemas/5.0/' + cveId5 + '_public_fail.json')

const ReposFactory = require('../../../src/repositories/repositoryFactory')

const repositories = new ReposFactory()

describe('Test for middleware', () => {
  before(async () => {
  })

//   context('Validate json schema 5.0', () => {
//     it('Json is successfully validated', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/schema5')
//         .set(secretariatHeaders)
//         .send(cvePass5)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(200)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
//           done()
//         })
//     })

//     it('Using an invalid STATE', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/schema5')
//         .set(secretariatHeaders)
//         .send(cvefail5)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(400)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
//           expect(res.body).to.have.property('errors').and.to.be.an('array')
//           expect(res.body.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
//           done()
//         })
//     })

//     it('Using a method other than POST or GET', (done) => {
//       // create a request to the api
//       chai.request(server)
//         .put('/api/test/mw/schema5')
//         .set(secretariatHeaders)
//         .send(cveRejectFail5)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.property('status', 404)
//           done()
//         })
//     })

//     it('Json with reject state', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/schema5')
//         .set(secretariatHeaders)
//         .send(cveRejectFail5)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.property('status', 400)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
//           expect(res.body).to.have.property('errors').to.be.an('array')
//           expect(res.body.errors[0]).to.have.string('instance.descriptions[0] requires property "lang"')
//           done()
//         })
//     })

//     it('Json with reserved state', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/schema5')
//         .set(secretariatHeaders)
//         .send(cveReservedFail5)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.property('status', 400)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
//           expect(res.body).to.have.property('errors').to.be.an('array')
//           expect(res.body.errors[0]).to.have.string('value does not meet minimum length of 1')
//           expect(res.body.errors[1]).to.have.string('instance.descriptions[0] requires property "lang"')
//           done()
//         })
//     })

//     it('Json with public state', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/schema5')
//         .set(secretariatHeaders)
//         .send(cvePublicFail5)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(400)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
//           expect(res.body).to.have.property('errors').and.to.be.an('array')
//           expect(res.body.errors[0]).to.have.string('CNA.provider_data_meta.ID is not of a type(s) string')
//           expect(res.body.errors[1]).to.have.string('CNA.affected.vendors[0].products[0].versions[0].version_affected is not one of enum values')
//           expect(res.body.errors[2]).to.have.string('CNA.affected.affects_SWID does not meet minimum length of 1')
//           expect(res.body.errors[3]).to.have.string('CNA.problemtypes contains duplicate item')
//           expect(res.body.errors[4]).to.have.string('additionalProperty "additional" exists in instance when not allowed')
//           done()
//         })
//     })
//   })

  context('Validate user', function () {
    it('User is successfully validated', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/validate-user-successful')
        .set(secretariatHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Org does not exist', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.ORG] = 'jpmorgan'

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-org-doesnt-exist')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          // assert expected response
          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not found', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.USER] = 'morgan'

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-user-not-found')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          // assert expected response
          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Secret apikey is incorrect', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.KEY] = 'wrong secret'

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-key-incorrect')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is deactivated', function (done) {
      const deactivatedHeaders = {}
      deactivatedHeaders[CONSTANTS.AUTH_HEADERS.ORG] = 'mitre'
      deactivatedHeaders[CONSTANTS.AUTH_HEADERS.KEY] = 'S96E4QT-SMT4YE3-KX03X6K-4615CED'
      deactivatedHeaders[CONSTANTS.AUTH_HEADERS.USER] = 'flast'
      deactivatedHeaders['content-type'] = 'application/json'

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-deactivated')
        .set(deactivatedHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.unauthorized()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cna is undefined', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      delete testHeaders[CONSTANTS.AUTH_HEADERS.ORG]

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-cna-undefined')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.badRequest(CONSTANTS.AUTH_HEADERS.ORG)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Submitter is undefined', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      delete testHeaders[CONSTANTS.AUTH_HEADERS.USER]

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-submitter-undefined')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.badRequest(CONSTANTS.AUTH_HEADERS.USER)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Secret is undefined', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      delete testHeaders[CONSTANTS.AUTH_HEADERS.KEY]

      // perform the request to the api
      chai.request(server)
        .post('/validate-user-secret-undefined')
        .set(testHeaders)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.badRequest(CONSTANTS.AUTH_HEADERS.KEY)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  after(async () => {
  })
})
