const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeaders = require('./onlySecretariat.fixtures').secretariatHeaders
const secretariatOrg = require('./onlySecretariat.fixtures').secretariatOrg
const secretariatUser = require('./onlySecretariat.fixtures').secretariatUser
const notSecretariatOrg = require('./onlySecretariat.fixtures').notSecretariatOrg
const notSecretariatUser = require('./onlySecretariat.fixtures').notSecretariatUser
const CONSTANTS = require('../../../src/constants')
const errors = require('../../../src/middleware/error')
const error = new errors.MiddlewareError()

const ReposFactory = require('../../../src/repositories/repositoryFactory')

const repositories = new ReposFactory()

describe('Test only Secretariat middleware', () => {
  before(async () => {
    const userRepo = repositories.getUserRepository()
    const orgRepo = repositories.getOrgRepository()

    await orgRepo.findOneAndUpdate({ UUID: secretariatOrg.UUID }, secretariatOrg, { upsert: true })

    await userRepo.findOneAndUpdate({ UUID: secretariatUser.UUID }, secretariatUser, { upsert: true })

    await orgRepo.findOneAndUpdate({ UUID: notSecretariatOrg.UUID }, notSecretariatOrg, { upsert: true })

    await userRepo.findOneAndUpdate({ UUID: notSecretariatUser.UUID }, notSecretariatUser, { upsert: true })
  })

  context('Positive Tests', function () {
    it('User is a secretariat user', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/secretariat_only')
        .set(secretariatHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })
  })

  context('Negative Tests', function () {
    it('User is not a secretariat user', function (done) {
      const testHeaders = Object.assign({}, secretariatHeaders)
      testHeaders[CONSTANTS.AUTH_HEADERS.USER] = notSecretariatUser.username
      testHeaders[CONSTANTS.AUTH_HEADERS.ORG] = notSecretariatOrg.short_name
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/secretariat_only')
        .set(testHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.secretariatOnly()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  after(async () => {
    const userRepo = repositories.getUserRepository()
    const orgRepo = repositories.getOrgRepository()
    await userRepo.deleteMany({})
    await orgRepo.deleteMany({})
  })
})
