const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const headers = require('./onlySecretariat.fixtures').headers
const secretariatOrg = require('./onlySecretariat.fixtures').secretariatOrg
const secretariatUser = require('./onlySecretariat.fixtures').secretariatUser
const notSecretariatOrg = require('./onlySecretariat.fixtures').notSecretariatOrg
const notSecretariatUser = require('./onlySecretariat.fixtures').notSecretariatUser
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')

// describe('Test only Secretariat middleware', () => {
//   before(async () => {
//     await User.findOneAndUpdate()
//       .byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
//       .updateOne(secretariatUser)
//       .setOptions({ upsert: true })

//     await Org.findOneAndUpdate()
//       .byShortName(secretariatOrg.short_name)
//       .updateOne(secretariatOrg)
//       .setOptions({ upsert: true })

//     await User.findOneAndUpdate()
//       .byUserNameAndCnaShortName(notSecretariatUser.username, notSecretariatUser.cna_short_name)
//       .updateOne(notSecretariatUser)
//       .setOptions({ upsert: true })

//     await Org.findOneAndUpdate()
//       .byShortName(notSecretariatOrg.short_name)
//       .updateOne(notSecretariatOrg)
//       .setOptions({ upsert: true })
//   })

//   context('Positive Tests', function () {
//     it('User is a secretariat user', function (done) {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/secretariat_only')
//         .set(headers)
//         .send()
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(200)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
//           done()
//         })
//     })
//   })

//   context('Negative Tests', function () {
//     it('User is not a secretariat user', function (done) {
//       const testHeaders = Object.assign({}, headers)
//       testHeaders[CONSTANTS.AUTH_HEADERS.USER] = notSecretariatUser.username
//       testHeaders[CONSTANTS.AUTH_HEADERS.ORG] = notSecretariatOrg.short_name
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/mw/secretariat_only')
//         .set(testHeaders)
//         .send()
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(403)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.error).to.equal('SECRETARIAT_ONLY')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal('This function is currently only allowed to the Secretariat. This will change for many functions as more administrative roles are implemented.')
//           done()
//         })
//     })
//   })

//   after(async () => {
//     await User.findOneAndRemove().byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
//     await Org.findOneAndRemove().byShortName(secretariatOrg.short_name)
//     await User.findOneAndRemove().byUserNameAndCnaShortName(notSecretariatUser.username, notSecretariatUser.cna_short_name)
//     await Org.findOneAndRemove().byShortName(notSecretariatOrg.short_name)
//   })
// })
