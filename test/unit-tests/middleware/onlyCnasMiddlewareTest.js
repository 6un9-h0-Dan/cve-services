const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeaders = require('./onlyCnas.fixtures').secretariatHeaders
const secretariatOrg = require('./onlyCnas.fixtures').secretariatOrg
const secretariatUser = require('./onlyCnas.fixtures').secretariatUser
const secretariatAndCnaHeaders = require('./onlyCnas.fixtures').secretariatAndCnaHeaders
const secretariatAndCnaOrg = require('./onlyCnas.fixtures').secretariatAndCnaOrg
const secretariatAndCnaUser = require('./onlyCnas.fixtures').secretariatAndCnaUser
const notCnaHeaders = require('./onlyCnas.fixtures').notCnaHeaders
const notCnaOrg = require('./onlyCnas.fixtures').notCnaOrg
const notCnaUser = require('./onlyCnas.fixtures').notCnaUser
const cnaHeaders = require('./onlyCnas.fixtures').cnaHeaders
const cnaOrg = require('./onlyCnas.fixtures').cnaOrg
const cnaUser = require('./onlyCnas.fixtures').cnaUser
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')

describe('Test only CNA middleware', () => {
  before(async () => {
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(secretariatOrg.short_name)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(secretariatAndCnaUser.username, secretariatAndCnaUser.cna_short_name)
      .updateOne(secretariatAndCnaUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(secretariatAndCnaOrg.short_name)
      .updateOne(secretariatAndCnaOrg)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(notCnaUser.username, notCnaUser.cna_short_name)
      .updateOne(notCnaUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(notCnaOrg.short_name)
      .updateOne(notCnaOrg)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(cnaUser.username, cnaUser.cna_short_name)
      .updateOne(cnaUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(cnaOrg.short_name)
      .updateOne(cnaOrg)
      .setOptions({ upsert: true })
  })

  context('Positive Tests', function () {
    it('Users org is a CNA and should pass checks', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(cnaHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })
    it('Users org is a CNA and Secretariat and should pass checks', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(secretariatAndCnaHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })
    // This test will change with the implementation of Root CNAs, as the burden of reserving IDs
    // on behalf of other organizations transfers to Roots. Secretariat will then step back.
    it('Users org is a Secretariat but not a CNA and should pass checks', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(secretariatHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })
  })

  context('Negative Tests', function () {
    it('Users org is not a CNA and should get rejected', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(notCnaHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.error).to.equal('CNA_ONLY')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('This function is currently only allowed to CNAs. This will change for many functions as more administrative roles are implemented.')
          done()
        })
    })
  })

  after(async () => {
    await User.findOneAndRemove().byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(secretariatOrg.short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(secretariatAndCnaUser.username, secretariatAndCnaUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(secretariatAndCnaOrg.short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(notCnaUser.username, notCnaUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(notCnaOrg.short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(cnaUser.username, cnaUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(cnaOrg.short_name)
  })
})
