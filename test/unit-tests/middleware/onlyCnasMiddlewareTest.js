const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeaders = require('./onlyCnas.fixtures').secretariatHeaders
const secretariatOrg = require('./onlyCnas.fixtures').secretariatOrg
const secretariatUser = require('./onlyCnas.fixtures').secretariatUser
const secretariatAndCnaHeaders = require('./onlyCnas.fixtures').secretariatAndCnaHeaders
const secretariatAndCnaOrg = require('./onlyCnas.fixtures').secretariatAndCnaOrg
const secretariatAndCnaUser = require('./onlyCnas.fixtures').secretariatAndCnaUser
const notCnaHeaders = require('./onlyCnas.fixtures').notCnaHeaders
const notCnaOrg = require('./onlyCnas.fixtures').notCnaOrg
const notCnaUser = require('./onlyCnas.fixtures').notCnaUser
const cnaHeaders = require('./onlyCnas.fixtures').cnaHeaders
const cnaOrg = require('./onlyCnas.fixtures').cnaOrg
const cnaUser = require('./onlyCnas.fixtures').cnaUser
const errors = require('../../../src/middleware/error')
const error = new errors.MiddlewareError()

const ReposFactory = require('../../../src/repositories/repositoryFactory')

const repositories = new ReposFactory()

describe('Test only CNA middleware', () => {
  before(async () => {
    const userRepo = repositories.getUserRepository()
    const orgRepo = repositories.getOrgRepository()

    await orgRepo.findOneAndUpdate({ UUID: secretariatOrg.UUID }, secretariatOrg, { upsert: true })

    await userRepo.findOneAndUpdate({ UUID: secretariatUser.UUID }, secretariatUser, { upsert: true })

    await orgRepo.findOneAndUpdate({ UUID: secretariatAndCnaOrg.UUID }, secretariatAndCnaOrg, { upsert: true })

    await userRepo.findOneAndUpdate({ UUID: secretariatAndCnaUser.UUID }, secretariatAndCnaUser, { upsert: true })

    await orgRepo.findOneAndUpdate({ UUID: notCnaOrg.UUID }, notCnaOrg, { upsert: true })

    await userRepo.findOneAndUpdate({ UUID: notCnaUser.UUID }, notCnaUser, { upsert: true })

    await orgRepo.findOneAndUpdate({ UUID: cnaOrg.UUID }, cnaOrg, { upsert: true })

    await userRepo.findOneAndUpdate({ UUID: cnaUser.UUID }, cnaUser, { upsert: true })
  })

  context('Positive Tests', function () {
    it('Users org is a CNA and should pass checks', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(cnaHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Users org is a CNA and Secretariat and should pass checks', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(secretariatAndCnaHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    // This test will change with the implementation of Root CNAs, as the burden of reserving IDs
    // on behalf of other organizations transfers to Roots. Secretariat will then step back.
    it('Users org is a Secretariat but not a CNA and should pass checks', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(secretariatHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })
  })

  context('Negative Tests', function () {
    it('Users org is not a CNA and should get rejected', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/cna_only')
        .set(notCnaHeaders)
        .send()
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cnaOnly()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  after(async () => {
    const userRepo = repositories.getUserRepository()
    const orgRepo = repositories.getOrgRepository()
    await userRepo.deleteMany({})
    await orgRepo.deleteMany({})
  })
})
