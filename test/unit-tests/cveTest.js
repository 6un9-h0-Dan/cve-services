require('dotenv').config()
process.env.NODE_ENV = 'test'
const server = 'http://localhost:3000'

const chai = require('chai')
const nock = require('nock')
const mongoose = require('mongoose')
const expect = chai.expect
chai.use(require('chai-http'))
chai.use(require('chai-nock'))
const headers = require('../mockObjects').headers
const existingUser = require('../mockObjects').existentUser
const existingCna = require('../mockObjects').existentCna
const Cve = require('../../src/model/cve')
const User = require('../../src/model/user')
const Cna = require('../../src/model/cna')
const nonExistentCveId = 'CVE-2017-35437'
const cveId = 'CVE-2017-5832'
const cvePass = require('../schemas/4.0/' + cveId + '.json')

describe('Test Cve Controller', () => {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      Cve.findOneAndRemove()
        .byCveId(cveId)
        .exec((err) => {
          if (err) {
            done(err)
          }

          Cve.findOneAndRemove()
            .byCveId(nonExistentCveId)
            .exec((err) => {
              if (err) {
                done(err)
              }

              User.findOneAndUpdate()
                .byUserNameAndCnaShortName(existingUser.username, existingUser.cna_short_name)
                .updateOne(existingUser)
                .setOptions({ upsert: true })
                .exec((err) => {
                  if (err) {
                    done(err)
                  }

                  Cna.findOneAndUpdate()
                    .byShortName(existingCna.shortName)
                    .updateOne(existingCna)
                    .setOptions({ upsert: true })
                    .exec((err) => {
                      if (err) {
                        done(err)
                      }

                      done()
                    })
                })
            })
        })
    })
  })

  context('Creating a cve', () => {
    it('Cve is created', (done) => {
      // specify the url to be intercepted
      const scope = nock(server, {
        reqheaders: headers
      })
        .post('/api/cve', cvePass)
        .reply(200, {
          message: cveId + ' has been created.'
        })

      // perform the request to the api which will now be intercepted by nock
      chai.request(server)
        .post('/api/cve')
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert the request was made as expected
          expect(scope).to.have.been.requestedWithHeaders(headers)
          expect(scope).to.have.been.requestedWith(cvePass)

          // assert the mocked response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' has been created.')
          done()
        })
    })

    it('Cve is not created because it already exists', (done) => {
      // specify the url to be intercepted
      const scope = nock(server, {
        reqheaders: headers
      })
        .post('/api/cve', cvePass)
        .reply(400, {
          message: cveId + ' already exists.'
        })

      // perform the request to the api which will now be intercepted by nock
      chai.request(server)
        .post('/api/cve')
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert the request was made as expected
          expect(scope).to.have.been.requestedWithHeaders(headers)
          expect(scope).to.have.been.requestedWith(cvePass)

          // assert the mocked response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' already exists.')
          done()
        })
    })
  })

  context('Updating a cve', () => {
    it('Cve id does not match', (done) => {
      // specify the url to be intercepted
      const scope = nock(server, {
        reqheaders: headers
      })
        .post('/api/cve/' + nonExistentCveId, cvePass)
        .reply(400, {
          message: nonExistentCveId + ' parameter does not match ' + cveId + ' in the JSON body.'
        })

      // perform the request to the api which will now be intercepted by nock
      chai.request(server)
        .post('/api/cve/' + nonExistentCveId)
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert the request was made as expected
          expect(scope).to.have.been.requestedWithHeaders(headers)
          expect(scope).to.have.been.requestedWith(cvePass)

          // assert the mocked response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentCveId + ' parameter does not match ' + cveId + ' in the JSON body.')
          done()
        })
    })

    it('Cve is updated', (done) => {
      // specify the url to be intercepted
      const scope = nock(server, {
        reqheaders: headers
      })
        .post('/api/cve/' + cveId, cvePass)
        .reply(200, {
          message: cveId + ' has been updated.'
        })

      // perform the request to the api which will now be intercepted by nock
      chai.request(server)
        .post('/api/cve/' + cveId)
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert the request was made as expected
          expect(scope).to.have.been.requestedWithHeaders(headers)
          expect(scope).to.have.been.requestedWith(cvePass)

          // assert the mocked response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' has been updated.')
          done()
        })
    })

    it('Cve is not updated because it does not exists', (done) => {
      Cve.findOneAndRemove()
        .byCveId(cveId)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // specify the url to be intercepted
          const scope = nock(server, {
            reqheaders: headers
          })
            .post('/api/cve/' + cveId, cvePass)
            .reply(404, {
              message: cveId + ' does not exist.'
            })

          // perform the request to the api which will now be intercepted by nock
          chai.request(server)
            .post('/api/cve/' + cveId)
            .set(headers)
            .send(cvePass)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert the request was made as expected
              expect(scope).to.have.been.requestedWithHeaders(headers)
              expect(scope).to.have.been.requestedWith(cvePass)

              // assert the mocked response
              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(cveId + ' does not exist.')
              done()
            })
        })
    })
  })

  after((done) => {
    Cve.findOneAndRemove()
      .byCveId(cveId)
      .exec((err) => {
        if (err) {
          done(err)
        }

        Cve.findOneAndRemove()
          .byCveId(nonExistentCveId)
          .exec((err) => {
            if (err) {
              done(err)
            }

            User.findOneAndRemove()
              .byUserNameAndCnaShortName(existingUser.username, existingUser.cna_short_name)
              .exec((err) => {
                if (err) {
                  done(err)
                }

                Cna.findOneAndRemove()
                  .byShortName(existingCna.short_name)
                  .exec((err) => {
                    if (err) {
                      done(err)
                    }

                    mongoose.connection.close(done)
                  })
              })
          })
      })
  })
})
