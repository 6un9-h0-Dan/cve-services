require('dotenv').config()
process.env.NODE_ENV = 'test'
const server = require('../../test-utils/index')

const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const headers = require('../mockObjects').headers
const existingUser = require('../mockObjects').existentUser
const existingCna = require('../mockObjects').existentCna
const User = require('../../src/model/user')
const Cna = require('../../src/model/cna')
const cveId4 = 'CVE-2017-5832'
const cveId5 = 'CVE-2017-4024'
const cvePass5 = require('../schemas/5.0/' + cveId5 + '.json')
const cvefail5 = require('../schemas/5.0/' + cveId5 + '_fail.json')
const cveRejectFail5 = require('../schemas/5.0/' + cveId5 + '_reject_fail.json')
const cveReservedFail5 = require('../schemas/5.0/' + cveId5 + '_reserved_fail.json')
const cvePublicFail5 = require('../schemas/5.0/' + cveId5 + '_public_fail.json')
const cvePass4 = require('../schemas/4.0/' + cveId4 + '.json')
const cvefail4 = require('../schemas/4.0/' + cveId4 + '_fail.json')
const cveRejectFail4 = require('../schemas/4.0/' + cveId4 + '_reject_fail.json')
const cveReservedFail4 = require('../schemas/4.0/' + cveId4 + '_reserved_fail.json')
const cvePublicFail4 = require('../schemas/4.0/' + cveId4 + '_public_fail.json')

describe('Test for json validation', () => {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      User.findOneAndUpdate()
        .byUserNameAndCnaShortName(existingUser.username, existingUser.cna_short_name)
        .updateOne(existingUser)
        .setOptions({ upsert: true })
        .exec((err) => {
          if (err) {
            done(err)
          }

          Cna.findOneAndUpdate()
            .byShortName(existingCna.shortName)
            .updateOne(existingCna)
            .setOptions({ upsert: true })
            .exec((err) => {
              if (err) {
                done(err)
              }

              done()
            })
        })
    })
  })

  context('Validate json schema 5.0', () => {
    it('Json is successfully validated', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema5')
        .set(headers)
        .send(cvePass5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Using an invalid STATE', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema5')
        .set(headers)
        .send(cvefail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
          done()
        })
    })

    it('Using a method other than POST or GET', (done) => {
      // create a request to the api
      chai.request(server)
        .put('/api/test/mw/schema5')
        .set(headers)
        .send(cveRejectFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.property('status', 404)
          done()
        })
    })

    it('Json with reject state', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema5')
        .set(headers)
        .send(cveRejectFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.property('status', 400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').to.be.an('array')
          expect(res.body.errors[0]).to.have.string('instance.descriptions[0] requires property "lang"')
          done()
        })
    })

    it('Json with reserved state', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema5')
        .set(headers)
        .send(cveReservedFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.property('status', 400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CVE_data_meta requires property "ASSIGNER"')
          expect(res.body.errors[1]).to.have.string('value does not meet minimum length of 1')
          expect(res.body.errors[2]).to.have.string('instance.descriptions[0] requires property "lang"')
          done()
        })
    })

    it('Json with public state', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema5')
        .set(headers)
        .send(cvePublicFail5)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CNA.provider_data_meta.ID is not of a type(s) string')
          expect(res.body.errors[1]).to.have.string('CNA.affected.vendors[0].products[0].versions[0].version_affected is not one of enum values')
          expect(res.body.errors[2]).to.have.string('CNA.affected.affects_SWID does not meet minimum length of 1')
          expect(res.body.errors[3]).to.have.string('CNA.problemtypes contains duplicate item')
          expect(res.body.errors[4]).to.have.string('additionalProperty "additional" exists in instance when not allowed')
          done()
        })
    })
  })

  context('Validate json schema 4.0', () => {
    it('Json is successfully validated', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema4')
        .set(headers)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('Using an invalid STATE', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema4')
        .set(headers)
        .send(cvefail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
          done()
        })
    })

    it('Using a method other than POST or GET', (done) => {
      // perform the request to the api
      chai.request(server)
        .put('/api/test/mw/schema4')
        .set(headers)
        .send(cveRejectFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          done()
        })
    })

    it('Json with reject state', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema4')
        .set(headers)
        .send(cveRejectFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').to.be.an('array')
          expect(res.body.errors[0]).to.have.string('instance requires property "affects"')
          expect(res.body.errors[1]).to.have.string('instance requires property "problemtype"')
          expect(res.body.errors[2]).to.have.string('instance requires property "references"')
          done()
        })
    })

    it('Json with reserved state', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema4')
        .set(headers)
        .send(cveReservedFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('instance requires property "affects"')
          expect(res.body.errors[1]).to.have.string('instance requires property "problemtype"')
          expect(res.body.errors[2]).to.have.string('instance requires property "references"')
          done()
        })
    })

    it('Json with public state', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/schema4')
        .set(headers)
        .send(cvePublicFail4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('vendor_data[0].product.product_data[0].version.version_data[0] requires property "version_value"')
          expect(res.body.errors[1]).to.have.string('vendor_data[0].product.product_data[1] requires property "version"')
          expect(res.body.errors[2]).to.have.string('problemtype_data[0].description[0] requires property "lang"')
          expect(res.body.errors[3]).to.have.string('description_data is not of a type(s) array')
          done()
        })
    })
  })

  after((done) => {
    User.findOneAndRemove()
      .byUserNameAndCnaShortName(existingUser.username, existingUser.cna_short_name)
      .exec((err) => {
        if (err) {
          done(err)
        }

        Cna.findOneAndRemove()
          .byShortName(existingCna.short_name)
          .exec((err) => {
            if (err) {
              done(err)
            }

            mongoose.connection.close(done)
          })
      })
  })
})

describe('Test for user authentication', function () {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      User.findOneAndUpdate()
        .byUserNameAndCnaShortName(existingUser.username, existingUser.cna_short_name)
        .updateOne(existingUser)
        .setOptions({ upsert: true })
        .exec((err) => {
          if (err) {
            done(err)
          }

          Cna.findOneAndUpdate()
            .byShortName(existingCna.shortName)
            .updateOne(existingCna)
            .setOptions({ upsert: true })
            .exec((err) => {
              if (err) {
                done(err)
              }

              done()
            })
        })
    })
  })

  context('Authenticate user', function () {
    it('User is successfully validated', function (done) {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/user')
        .set(headers)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Success! You have reached the target endpoint.')
          done()
        })
    })

    it('User is not found', function (done) {
      const testHeaders = Object.assign({}, headers)
      testHeaders['CVE-API-CNA'] = 'jpmorgan'

      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/user')
        .set(testHeaders)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Unauthorized')
          done()
        })
    })

    it('Secret apikey is incorrect', function (done) {
      const testHeaders = Object.assign({}, headers)
      testHeaders['CVE-API-SECRET'] = 'wrong secret'

      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/user')
        .set(testHeaders)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Unauthorized')
          done()
        })
    })

    it('Cna is undefined', function (done) {
      const testHeaders = Object.assign({}, headers)
      delete testHeaders['CVE-API-CNA']

      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/user')
        .set(testHeaders)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad Request: CVE-API-CNA header field required.')
          done()
        })
    })

    it('Submitter is undefined', function (done) {
      const testHeaders = Object.assign({}, headers)
      delete testHeaders['CVE-API-SUBMITTER']

      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/user')
        .set(testHeaders)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad Request: CVE-API-SUBMITTER header field required.')
          done()
        })
    })

    it('Secret is undefined', function (done) {
      const testHeaders = Object.assign({}, headers)
      delete testHeaders['CVE-API-SECRET']

      // perform the request to the api
      chai.request(server)
        .post('/api/test/mw/user')
        .set(testHeaders)
        .send(cvePass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad Request: CVE-API-SECRET header field required.')
          done()
        })
    })
  })

  after((done) => {
    User.findOneAndRemove()
      .byUserNameAndCnaShortName(existingUser.username, existingUser.cna_short_name)
      .exec((err) => {
        if (err) {
          done(err)
        }

        Cna.findOneAndRemove()
          .byShortName(existingCna.short_name)
          .exec((err) => {
            if (err) {
              done(err)
            }

            mongoose.connection.close(done)
          })
      })
  })
})
