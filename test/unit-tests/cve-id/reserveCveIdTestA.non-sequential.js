
const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const availableCveIds = require('./mockObjects.non-sequential').availableCveIds
const secretariatHeader = require('./mockObjects.non-sequential').secretariatHeader
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const userBHeader = require('./mockObjects.non-sequential').userBHeader
const secretariatOrg = require('./mockObjects.non-sequential').secretariatOrg
const secretariatUser = require('./mockObjects.non-sequential').secretariatUser
const orgA = require('./mockObjects.non-sequential').orgA
const orgB = require('./mockObjects.non-sequential').orgB
const userA = require('./mockObjects.non-sequential').userA
const userB = require('./mockObjects.non-sequential').userB
const year = require('./mockObjects.non-sequential').year
let ids = []

describe('Test ID Reservator for Non-Sequential Case A', () => {
  before(async () => {
    // Create a Cve Id Range for year 2030
    const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
    defaultDoc.cve_year = year
    defaultDoc.ranges.general.top_id = 20005
    defaultDoc.ranges.general.end = 30000
    await CveIdRange.findOneAndUpdate({ cve_year: year }, defaultDoc, { upsert: true })

    // Create secretariat org
    await Org.findOneAndUpdate()
      .byShortName(secretariatOrg.short_name)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    // Create secretariat user
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    // Create org A
    await Org.findOneAndUpdate()
      .byShortName(orgA.short_name)
      .updateOne(orgA)
      .setOptions({ upsert: true })

    // Create user A
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(userA.username, userA.cna_short_name)
      .updateOne(userA)
      .setOptions({ upsert: true })

    // Create org B
    await Org.findOneAndUpdate()
      .byShortName(orgB.short_name)
      .updateOne(orgB)
      .setOptions({ upsert: true })

    // Create user B
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(userB.username, userB.cna_short_name)
      .updateOne(userB)
      .setOptions({ upsert: true })

    // Create 5 available CVE IDs
    await CveId.insertMany(availableCveIds)
  })

  context('Case 1: Not enough IDs in the \'AVAILABLE\' pool', () => {
    it('Increment the "available" pool size (amount = 10) and reserve 10 ids', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/api/test/cve-id/case/A?batch_type=non-sequential&short_name=${userA.cna_short_name}&cve_year=${year}&amount=10`)
        .set(userAHeader) // not the owning cna or secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            ids.push({ cve_id: obj.cve_id })
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(20000).and.lessThan(20111)
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
          })

          // checking that ids are non-sequential
          // let isSequential = false
          // let index = []
          // for (let i = 0; i < ids.length; i++) {

          // }

          done()
        })
    })

    it('Check available and reserved ids', async () => {
      // checking that the correct amount of RESERVED ids were created
      const reservedCount = await CveId.countDocuments({ owning_cna: userA.cna_short_name, cve_year: year, state: 'RESERVED' })
      expect(reservedCount).to.equal(10) // end - start + 1

      // checking that the correct amount of AVAILABLE ids were created
      const availableCount = await CveId.countDocuments({ state: 'AVAILABLE' })
      expect(availableCount).to.equal(100) // increment - reserved + initial = 105 - 10 + 5 = 100

      // checking that all CVE IDs returned are RESERVED
      const reserved = await CveId.find({ $or: ids })
      ids = []
      reserved.forEach(obj => {
        ids.push(obj.cve_id)
        expect(obj).to.have.property('state').and.to.equal('RESERVED')
      })

      // checking that all CVE IDs not returned are AVAILABLE
      const available = await CveId.find({ cve_id: { $nin: ids } })
      available.forEach(obj => {
        expect(obj).to.have.property('state').and.to.equal('AVAILABLE')
      })

      // checking that there are no duplicates
      available.forEach(obj1 => {
        let counter = 0

        available.forEach(obj2 => {
          if (obj1.cve_id === obj2.cve_id) {
            counter++
          }
        })

        expect(counter).to.equal(1)
      })
    })
  })

  // context('Case 2: Enough IDs in the \'AVAILABLE\' pool', () => {
  //   it('', (done) => {
  //     done()
  //   })
  // })

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.deleteMany({})
    await User.deleteMany({})
    await Org.deleteMany({})
  })
})
