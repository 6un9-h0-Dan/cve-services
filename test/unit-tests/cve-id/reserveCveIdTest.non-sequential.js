
const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const availableCveIds = require('./mockObjects.non-sequential').availableCveIds
const secretariatHeader = require('./mockObjects.non-sequential').secretariatHeader
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const userBHeader = require('./mockObjects.non-sequential').userBHeader
const secretariatOrg = require('./mockObjects.non-sequential').secretariatOrg
const secretariatUser = require('./mockObjects.non-sequential').secretariatUser
const orgA = require('./mockObjects.non-sequential').orgA
const orgB = require('./mockObjects.non-sequential').orgB
const userA = require('./mockObjects.non-sequential').userA
const userB = require('./mockObjects.non-sequential').userB
const year = require('./mockObjects.non-sequential').year

describe('Test ID Reservator for Non-Sequential', () => {
  before(async () => {
    // Create a Cve Id Range for year 2030
    const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
    defaultDoc.cve_year = year
    defaultDoc.ranges.general.top_id = 20005
    defaultDoc.ranges.general.end = 30000
    await CveIdRange.findOneAndUpdate({ cve_year: year }, defaultDoc, { upsert: true })

    // Create secretariat org
    await Org.findOneAndUpdate()
      .byShortName(secretariatOrg.short_name)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    // Create secretariat user
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    // Create org A
    await Org.findOneAndUpdate()
      .byShortName(orgA.short_name)
      .updateOne(orgA)
      .setOptions({ upsert: true })

    // Create user A
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(userA.username, userA.cna_short_name)
      .updateOne(userA)
      .setOptions({ upsert: true })

    // Create org B
    await Org.findOneAndUpdate()
      .byShortName(orgB.short_name)
      .updateOne(orgB)
      .setOptions({ upsert: true })

    // Create user B
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(userB.username, userB.cna_short_name)
      .updateOne(userB)
      .setOptions({ upsert: true })

    // Create 5 available CVE IDs
    await CveId.insertMany(availableCveIds)
  })

  context('Case 1: Not enough IDs in the \'AVAILABLE\' pool', () => {
    it('Increment the "available" pool size (amount = 10) and reserve 10 ids', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/api/test/cve-id?batch_type=non-sequential&short_name=${userA.cna_short_name}&cve_year=${year}&amount=10`)
        .set(userAHeader) // not the owning cna or secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          console.log(res.body.cve_ids)

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          done()
        })
    })

    // it('Check size of "available" pool', (done) => {
    //   done()
    // })
  })

  context('Case 2: Enough IDs in the \'AVAILABLE\' pool', () => {
    it('', (done) => {
      done()
    })
  })

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.findOneAndRemove().byCveYear(year)
    await User.findOneAndRemove().byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(userA.username, userA.cna_short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(userB.username, userB.cna_short_name)
    await Org.findOneAndRemove().byShortName(secretariatOrg.short_name)
    await Org.findOneAndRemove().byShortName(orgA.short_name)
    await Org.findOneAndRemove().byShortName(orgB.short_name)
  })
})
