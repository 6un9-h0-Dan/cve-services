
const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const availableCveIds = require('./mockObjects.non-sequential').availableCveIdsFG
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const orgA = require('./mockObjects.non-sequential').orgA
const userA = require('./mockObjects.non-sequential').userA
const secretariatOrg = require('./mockObjects.non-sequential').secretariatOrg
const secretariatUser = require('./mockObjects.non-sequential').secretariatUser
const year = require('./mockObjects.non-sequential').year
const reservedByOther = require('../../../test-utils/reserveCaseF.non-sequential').reservedByOther
const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()

describe('Test ID Reservator for Non-Sequential Case F', () => {
  before(async () => {
    // Create a Cve Id Range for year 2030
    const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
    defaultDoc.cve_year = year
    defaultDoc.ranges.general.top_id = 15
    defaultDoc.ranges.general.end = 20

    await CveIdRange.findOneAndUpdate()
      .byCveYear(defaultDoc.cve_year)
      .updateOne(defaultDoc)
      .setOptions({ upsert: true })

    // Create org A
    await Org.findOneAndUpdate()
      .byUUID(orgA.UUID)
      .updateOne(orgA)
      .setOptions({ upsert: true })

    // Create user A
    await User.findOneAndUpdate()
      .byUUID(userA.UUID)
      .updateOne(userA)
      .setOptions({ upsert: true })

    // Create secretariat org
    await Org.findOneAndUpdate()
      .byUUID(secretariatOrg.UUID)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    // Create secretariat user
    await User.findOneAndUpdate()
      .byUUID(secretariatUser.UUID)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    // Create 5 available CVE IDs
    await CveId.insertMany(availableCveIds)
  })

  context('Case F', () => {
    it(`CveId Range document for year ${year} is full after race condition in pool increment`, (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/api/test/cve-id/case/F?batch_type=non-sequential&short_name=${orgA.short_name}&cve_year=${year}&amount=10`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = orgA.policies.id_quota.toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(year)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Check count of reserved ids by userA in the db', async () => {
      // checking that the correct amount of RESERVED ids were created
      const reservedCount = await CveId.countDocuments({ owning_cna: orgA.UUID, cve_year: year, state: 'RESERVED' })
      expect(reservedCount).to.equal(0)
    })

    it('Check count of available ids in the db', async () => {
      // checking that the correct amount of AVAILABLE ids were created
      const availableCount = await CveId.countDocuments({ cve_year: year, state: 'AVAILABLE' })
      expect(availableCount).to.equal(0)
    })

    it('Check that unreserved ids by userA are reserved in the db', async () => {
      const topId = (await CveIdRange.findOneAndUpdate({ cve_year: year })).ranges.general.top_id // get top_id
      // checking that all CVE IDs not returned are RESERVED
      const reserved = await CveId.find({ cve_id: { $in: reservedByOther }, cve_year: year }) // cve ids reserved by secretariatUser
      reserved.forEach(obj => {
        const index = parseInt(obj.cve_id.match(/\d+$/g))
        expect(index).to.be.lessThan(topId + 1) // check that the id is less than the current top id
        expect(obj).to.have.property('state').and.to.equal('RESERVED')
        expect(obj).to.have.property('owning_cna').and.to.equal(secretariatOrg.UUID)
        expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(secretariatUser.org_UUID)
        expect(obj).to.have.nested.property('requested_by.user').and.to.equal(secretariatUser.UUID)
      })
    })
  })

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.deleteMany({})
    await User.deleteMany({})
    await Org.deleteMany({})
  })
})
