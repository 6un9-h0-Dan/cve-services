const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()
const CONSTANTS = require('../../../src/constants')
const secretariatHeader = require('./mockObjects.cve-id').secretariatHeader
const owningOrgHeader = require('./mockObjects.cve-id').owningOrgHeader
const orgHeader = require('./mockObjects.cve-id').orgHeader
const secretariatOrg = require('./mockObjects.cve-id').secretariatOrg
const secretariatUser = require('./mockObjects.cve-id').secretariatUser
const owningOrg = require('./mockObjects.cve-id').owningOrg
const owningOrgUser = require('./mockObjects.cve-id').owningOrgUser
const org = require('./mockObjects.cve-id').org
const orgUser = require('./mockObjects.cve-id').orgUser
const nonExistentOrg = require('./mockObjects.cve-id').nonExistentOrg
const year20 = 2020
const year21 = 2021
const year22 = 2022
let cveIdR

const repos = require('../../../test-utils/repositories')
const cveIdController = require('../../../src/controller/cve-id.controller/cve-id.controller')

describe('Test ID Reservator', () => {
  before(async () => {
    cveIdR = new CveIdRange(CONSTANTS.DEFAULT_CVE_ID_RANGE)
    cveIdR.cve_year = year20
    cveIdR.ranges.general.start = 10
    cveIdR.ranges.general.top_id = 10
    cveIdR.ranges.general.end = 15

    await CveIdRange.findOneAndUpdate()
      .byCveYear(cveIdR.cve_year)
      .updateOne(cveIdR)
      .setOptions({ upsert: true })

    cveIdR = CveIdRange(CONSTANTS.DEFAULT_CVE_ID_RANGE)
    cveIdR.cve_year = year21
    cveIdR.ranges.priority.top_id = cveIdR.ranges.priority.end
    cveIdR.ranges.general.top_id = cveIdR.ranges.general.end - 1

    await CveIdRange.findOneAndUpdate()
      .byCveYear(cveIdR.cve_year)
      .updateOne(cveIdR)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(secretariatUser.UUID)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(owningOrgUser.UUID)
      .updateOne(owningOrgUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(orgUser.UUID)
      .updateOne(orgUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(secretariatOrg.UUID)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(owningOrg.UUID)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(org.UUID)
      .updateOne(org)
      .setOptions({ upsert: true })
  })

  context('Business Logic', () => {
    it('Requester is not the owning Org or the Secretariat', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveNotOwningOrg()
      }
      server.route('/cve-id-reserve-not-owning-org')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-not-owning-org')
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cnaCannotReserveForOther()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Shortname query parameter is undefined', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveShortNameUndefined()
      }
      server.route('/cve-id-reserve-shortname-undefined')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-shortname-undefined')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noCnaShortName()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Year query parameter is undefined', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveShortNameUndefined()
      }
      server.route('/cve-id-reserve-year-undefined')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-year-undefined')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noYear()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is undefined', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveShortNameUndefined()
      }
      server.route('/cve-id-reserve-amount-undefined')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year20
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-amount-undefined')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noAmount()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is <= 0', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveShortNameUndefined()
      }
      server.route('/cve-id-reserve-amount-0')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = '0'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-amount-0')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidAmount()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is > 1 and batchType is undefined', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveShortNameUndefined()
      }
      server.route('/cve-id-reserve-batchtype-undefined')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 5
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-batchtype-undefined')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.noBatchType()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org does not exist', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveOrgDoesntExist()
      }
      server.route('/cve-id-reserve-org-doesnt-exist')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = nonExistentOrg.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-org-doesnt-exist')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          
          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cnaDne(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is greater than max nonsequential amount allowed', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveAmountLargerThanNonSequential()
      }
      server.route('/cve-id-reserve-amount-greater-nonsequential')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = org.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = (CONSTANTS.NONSEQUENTIAL_MAX_AMOUNT + 1)
        req.ctx.query.batch_type = 'nonsequential'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-amount-greater-nonsequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          
          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.overNonSequentialMaxAmount()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Amount query parameter is > than id_quota', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveAmountLargerThanNonSequential()
      }
      server.route('/cve-id-reserve-amount-greater-id-quota')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = org.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 700
        req.ctx.query.batch_type = 'sequential'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-amount-greater-id-quota')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.overIdQuota(res.body.details)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          expect(res.body.details).to.equal(errObj.details)
          done()
        })
    })

    it('Invalid batchType', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveAmountLargerThanNonSequential()
      }
      server.route('/cve-id-reserve-invalid-batchtype')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = org.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 1
        req.ctx.query.batch_type = 'pair'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-invalid-batchtype')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidBatchType()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Priority Reservation', () => {
    it('CveId Range document for year 2025 does not exist', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.NullCveIdRepo()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveYearDoesntExist()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveYear2025RangeDoesntExist()
      }
      server.route('/cve-id-reserve-year-2025-doesnt-exist')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = 2025
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-year-2025-doesnt-exist')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = owningOrg.policies.id_quota.toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cannotReserveForYear('2025')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve ID is reserved in the sequential block because the priority block for year 2021 is full', (done) => {
      const top = cveIdR.ranges.general.top_id
      const count = String(top + 1).padStart(4, '0')

      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.CveIdReserveSequentialPriorityIsFull()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveSequentialPriorityIsFull()
      }
      factory.getUserRepository = () => {
        return new repos.UserReserveSequentialPriorityIsFull()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveSequentialPriorityIsFull()
      }
      server.route('/cve-id-reserve-sequential-block-priority-full')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year21
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-sequential-block-priority-full')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (owningOrg.policies.id_quota - 1).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            expect(obj).to.have.property('cve_id').and.to.equal(`CVE-${year21}-${count}`)
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          })
          done()
        })
    })

    it('Check count of reserved ids in the db', async () => {
      // checking that the correct amount of RESERVED ids were created
      const reservedCount = await CveId.countDocuments({ owning_cna: owningOrg.UUID, cve_year: year21, state: 'RESERVED' })
      expect(reservedCount).to.equal(1)
    })

    it('CveId Range document for year 2021 is full', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.CveIdReserveSequentialPriorityIsFull()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveSequentialPriorityIsFull()
      }
      factory.getUserRepository = () => {
        return new repos.NullUserRepo()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveSequentialPriorityIsFull()
      }
      server.route('/cve-id-reserve-range-2021-full')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year21
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-range-2021-full')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (owningOrg.policies.id_quota - 1).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(year21)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve ID is reserved', (done) => {
      const top = CONSTANTS.DEFAULT_CVE_ID_RANGE.ranges.priority.top_id
      const count = String(top + 1).padStart(4, '0')

      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.CveIdReserveSequentialPriorityIsFull()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveSequentialPriorityIsFull()
      }
      factory.getUserRepository = () => {
        return new repos.UserReserveSequentialPriorityIsFull()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveSequentialPriorityIsFull()
      }
      server.route('/cve-id-reserve-complete')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 1
        next()
      }, cveIdController.CVEID_RESERVE)

      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-complete')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (owningOrg.policies.id_quota - 2).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            expect(obj).to.have.property('cve_id').and.to.equal(`CVE-${year20}-${count}`)
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          })
          done()
        })
    })

    it('Check count of reserved ids in the db', async () => {
      // checking that the correct amount of RESERVED ids were created
      const reservedCount = await CveId.countDocuments({ owning_cna: owningOrg.UUID, cve_year: year20, state: 'RESERVED' })
      expect(reservedCount).to.equal(1)
    })
  })

  context('Sequential Reservation', () => {
    it('CveId Range document for year 2025 does not exist', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.CveIdReserveSequentialPriorityIsFull()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveSequentialPriorityIsFull()
      }
      factory.getUserRepository = () => {
        return new repos.UserReserveSequentialPriorityIsFull()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveYear2025RangeDoesntExistSequential()
      }
      server.route('/cve-id-reserve-2025-doesnt-exist-sequential')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = 2025
        req.ctx.query.amount = 5
        req.ctx.query.batch_type = 'sequential'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-2025-doesnt-exist-sequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (owningOrg.policies.id_quota - 2).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cannotReserveForYear('2025')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('CveId Range document for year 2021 is full', (done) => {
      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.CveIdReserveSequentialPriorityIsFull()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveSequentialPriorityIsFull()
      }
      factory.getUserRepository = () => {
        return new repos.UserReserveSequentialPriorityIsFull()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveYear2025RangeDoesntExistSequential()
      }
      server.route('/cve-id-reserve-2021-full-sequential')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year21
        req.ctx.query.amount = 10
        req.ctx.query.batch_type = 'sequential'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-2021-full-sequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (owningOrg.policies.id_quota - 2).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(year21)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve IDs are reserved for year 2020', (done) => {
      const top = 10
      let counter = 1

      const factory = {}
      factory.getCveIdRepository = () => {
        return new repos.CveIdReserveSequentialPriorityIsFull()
      }
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRangeReserveSequentialPriorityIsFull()
      }
      factory.getUserRepository = () => {
        return new repos.UserReserveSequentialPriorityIsFull()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgReserveYear2020Sequential()
      }
      server.route('/cve-id-reserve-2020-sequential')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.query = {}
        req.ctx.query.short_name = owningOrg.short_name
        req.ctx.query.cve_year = year20
        req.ctx.query.amount = 5
        req.ctx.query.batch_type = 'sequential'
        next()
      }, cveIdController.CVEID_RESERVE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-reserve-2020-sequential')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          
          // checking header
          const quotaHeader = (owningOrg.policies.id_quota - 7).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            const count = String(top + counter).padStart(4, '0')
            expect(obj).to.have.property('cve_id').and.to.equal(`CVE-${year20}-${count}`) // check that cve ids are sequential
            expect(obj).to.have.property('state').and.to.equal('RESERVED')
            expect(obj).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
            counter++
          })
          done()
        })
    })
  })

  context(`Create CveId Range for year ${year22}`, () => {
    it(`CveId Range is created for year ${year22}`, (done) => {
      const factory = {}
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRange2022()
      }
      factory.getUserRepository = () => {
        return new repos.UserCveIdRange2022()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgCveIdRange2022()
      }
      server.route('/cve-id-range-2022')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.params = {}
        req.ctx.params.year = year22
        next()
      }, cveIdController.CVEID_RANGE_CREATE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-range-2022')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          done()
        })
    })

    it(`CveId Range already exists for year ${year22}`, (done) => {
      const factory = {}
      factory.getCveIdRangeRepository = () => {
        return new repos.CveIdRange2022()
      }
      factory.getUserRepository = () => {
        return new repos.UserCveIdRange2022()
      }
      factory.getOrgRepository = () => {
        return new repos.OrgCveIdRange2022()
      }
      server.route('/cve-id-range-2022-already-exists')
      .post((req, res, next) => {
        req.ctx.repositories = factory;
        req.ctx.params = {}
        req.ctx.params.year = year22
        next()
      }, cveIdController.CVEID_RANGE_CREATE)
      // perform the request to the api
      chai.request(server)
        .post('/cve-id-range-2022-already-exists')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeExists(year22)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.deleteMany({})
    await User.deleteMany({})
    await Org.deleteMany({})
  })
})
