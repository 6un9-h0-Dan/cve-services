const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const secretariatHeader = require('./mockObjects.cve-id').secretariatHeader
const owningOrgHeader = require('./mockObjects.cve-id').owningOrgHeader
const orgHeader = require('./mockObjects.cve-id').orgHeader
const secretariatOrg = require('./mockObjects.cve-id').secretariatOrg
const secretariatUser = require('./mockObjects.cve-id').secretariatUser
const owningOrg = require('./mockObjects.cve-id').owningOrg
const owningOrgUser = require('./mockObjects.cve-id').owningOrgUser
const org = require('./mockObjects.cve-id').org
const orgUser = require('./mockObjects.cve-id').orgUser
const nonExistentOrg = require('./mockObjects.cve-id').nonExistentOrg
const cveIdR = new CveIdRange(CONSTANTS.DEFAULT_CVE_ID_RANGE)

describe('Test ID Reservator', () => {
  before(async () => {
    await CveId.deleteMany({})

    await CveIdRange.findOneAndUpdate()
      .byCveYear(cveIdR.cve_year)
      .updateOne(cveIdR)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(owningOrgUser.username, owningOrgUser.cna_short_name)
      .updateOne(owningOrgUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(orgUser.username, orgUser.cna_short_name)
      .updateOne(orgUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(secretariatOrg.short_name)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(owningOrg.short_name)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(org.short_name)
      .updateOne(org)
      .setOptions({ upsert: true })
  })

  context('Business Logic', () => {
    it('Invalid query parameter', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?year=' + cveIdR.cve_year)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Invalid query parameter \'year\'')
          done()
        })
    })

    it('Requester is not the owning Org or the Secretariat', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?cve_year=' + cveIdR.cve_year + '&amount=1')
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE IDs can only be reserved by the owning CNA or by the Secretariat.')
          done()
        })
    })

    it('Shortname query parameter is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?cve_year=' + cveIdR.cve_year + '&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s short name to reserve CVE IDs.')
          done()
        })
    })

    it('Year query parameter is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide a year to reserve CVE IDs.')
          done()
        })
    })

    it('Amount query parameter is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + cveIdR.cve_year)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(CONSTANTS.NO_AMOUNT.message)
          done()
        })
    })

    it('Amount query parameter is <= 0', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + cveIdR.cve_year + '&amount=0')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(CONSTANTS.INVALID_AMOUNT.message)
          done()
        })
    })

    it('Amount query parameter is > 1 and batchType is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + cveIdR.cve_year + '&amount=5')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('A batch type (i.e. sequential, non-sequential) must be specified when allocating more than one CVE ID.')
          done()
        })
    })

    it('Org does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + nonExistentOrg.short_name + '&cve_year=' + cveIdR.cve_year + '&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentOrg.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('Amount query parameter is > that id_quota', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + org.short_name + '&cve_year=' + cveIdR.cve_year + '&amount=700&batch_type=sequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(CONSTANTS.OVER_ID_QUOTA.message)
          done()
        })
    })
  })

  context('Priority Reservation', () => {
    // it('Invalid query parameter', (done) => {
    //     // perform the request to the api
    //     chai.request(server)
    //       .post('/api/test/cve-id?year=' + cveIdR.cve_year)
    //       .set(orgHeader)
    //       .end((err, res) => {
    //         if (err) {
    //           done(err)
    //         }
  
    //         // assert expected response
    //         expect(res).to.have.status(400)
    //         expect(res).to.have.property('body').and.to.be.a('object')
    //         expect(res.body).to.have.property('message').and.to.be.a('string')
    //         expect(res.body.message).to.equal('Invalid query parameter \'year\'')
    //         done()
    //       })
    //   })
  }

  context('Sequential Reservation', () => {
    // it('Invalid query parameter', (done) => {
    //     // perform the request to the api
    //     chai.request(server)
    //       .post('/api/test/cve-id?year=' + cveIdR.cve_year)
    //       .set(orgHeader)
    //       .end((err, res) => {
    //         if (err) {
    //           done(err)
    //         }
  
    //         // assert expected response
    //         expect(res).to.have.status(400)
    //         expect(res).to.have.property('body').and.to.be.a('object')
    //         expect(res.body).to.have.property('message').and.to.be.a('string')
    //         expect(res.body.message).to.equal('Invalid query parameter \'year\'')
    //         done()
    //       })
    //   })
  }

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.deleteMany({})
    await User.findOneAndRemove().byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(owningOrgUser.username, owningOrgUser.cna_short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(orgUser.username, orgUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(secretariatOrg.short_name)
    await Org.findOneAndRemove().byShortName(owningOrg.short_name)
    await Org.findOneAndRemove().byShortName(org.short_name)
  })
})
