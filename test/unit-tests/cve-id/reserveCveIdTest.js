const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const secretariatHeader = require('./mockObjects.cve-id').secretariatHeader
const owningOrgHeader = require('./mockObjects.cve-id').owningOrgHeader
const orgHeader = require('./mockObjects.cve-id').orgHeader
const secretariatOrg = require('./mockObjects.cve-id').secretariatOrg
const secretariatUser = require('./mockObjects.cve-id').secretariatUser
const owningOrg = require('./mockObjects.cve-id').owningOrg
const owningOrgUser = require('./mockObjects.cve-id').owningOrgUser
const org = require('./mockObjects.cve-id').org
const orgUser = require('./mockObjects.cve-id').orgUser
const nonExistentOrg = require('./mockObjects.cve-id').nonExistentOrg
const year20 = 2020
const year21 = 2021
const year22 = 2022

describe('Test ID Reservator', () => {
  before(async () => {
    await CveId.deleteMany({})

    let cveIdR = new CveIdRange(CONSTANTS.DEFAULT_CVE_ID_RANGE)
    cveIdR.cve_year = year20

    await CveIdRange.findOneAndUpdate()
      .byCveYear(cveIdR.cve_year)
      .updateOne(cveIdR)
      .setOptions({ upsert: true })

    cveIdR = CveIdRange(CONSTANTS.DEFAULT_CVE_ID_RANGE)
    cveIdR.cve_year = year21
    cveIdR.ranges.priority.top_id = cveIdR.ranges.priority.end
    cveIdR.ranges.general.top_id = cveIdR.ranges.general.end

    await CveIdRange.findOneAndUpdate()
      .byCveYear(cveIdR.cve_year)
      .updateOne(cveIdR)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(owningOrgUser.username, owningOrgUser.cna_short_name)
      .updateOne(owningOrgUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(orgUser.username, orgUser.cna_short_name)
      .updateOne(orgUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(secretariatOrg.short_name)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(owningOrg.short_name)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byShortName(org.short_name)
      .updateOne(org)
      .setOptions({ upsert: true })
  })

  context('Business Logic', () => {
    it('Invalid query parameter', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?year=' + year20)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Invalid query parameter \'year\'')
          done()
        })
    })

    it('Requester is not the owning Org or the Secretariat', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?cve_year=' + year20 + '&amount=1')
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The CNA designated by the CVE-API-CNA header is not allowed to reserve IDs for the CNA specified by the shortname query parameter.')
          done()
        })
    })

    it('Shortname query parameter is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?cve_year=' + year20 + '&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The shortname query parameter is required to reserve CVE IDs.')
          done()
        })
    })

    it('Year query parameter is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The cve_year query parameter is required [1999-present+1].')
          done()
        })
    })

    it('Amount query parameter is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year20)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(CONSTANTS.NO_AMOUNT.message)
          done()
        })
    })

    it('Amount query parameter is <= 0', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year20 + '&amount=0')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(CONSTANTS.INVALID_AMOUNT.message)
          done()
        })
    })

    it('Amount query parameter is > 1 and batchType is undefined', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year20 + '&amount=5')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The batch_type query parameter must be specified when reserving more than one CVE ID [sequential, nonsequential || non-sequential].')
          done()
        })
    })

    it('Org does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + nonExistentOrg.short_name + '&cve_year=' + year20 + '&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The CNA designated by the shortname query parameter does not exist.')
          done()
        })
    })

    it('Amount query parameter is > that id_quota', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + org.short_name + '&cve_year=' + year20 + '&amount=700&batch_type=sequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(CONSTANTS.OVER_ID_QUOTA.message)
          done()
        })
    })
  })

  context('Priority Reservation', () => {
    it('CveId Range document for year 2025 does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=2025&amount=1')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('IDR is not currently configured reserve IDs for this year. If you believe you are receiving this message in error, please contact an administrator.')
          done()
        })
    })

    it('CveId Range document for year 2021 is full', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year21 + '&amount=1')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('IDR cannot currently reserve IDs for this year as the range its allowed to reserve from is full. Please contact an administrator to have the range extended.')
          done()
        })
    })

    it('Cve ID is reserved', (done) => {
      const top = CONSTANTS.DEFAULT_CVE_ID_RANGE.ranges.priority.top_id
      const count = String(top + 1).padStart(4, '0')

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year20 + '&amount=1')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          expect(res.body.cve_ids).to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').to.equal(`CVE-${year20}-${count}`)
          done()
        })
    })
  })

  context('Sequential Reservation', () => {
    it('CveId Range document for year 2025 does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=2025&amount=5&batch_type=sequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('IDR is not currently configured reserve IDs for this year. If you believe you are receiving this message in error, please contact an administrator.')
          done()
        })
    })

    it('CveId Range document for year 2021 is full', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year21 + '&amount=10&batch_type=sequential')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('IDR cannot currently reserve IDs for this year as the range its allowed to reserve from is full. Please contact an administrator to have the range extended.')
          done()
        })
    })

    // Cve IDs are reserved
    it('Cve IDs are reserved', (done) => {
      const top = CONSTANTS.DEFAULT_CVE_ID_RANGE.ranges.general.top_id
      const count = [String(top + 1).padStart(4, '0'), String(top + 2).padStart(4, '0'), String(top + 3).padStart(4, '0'), String(top + 4).padStart(4, '0'), String(top + 5).padStart(4, '0')]
      const cves = [`CVE-${year20}-${count[0]}`, `CVE-${year20}-${count[1]}`, `CVE-${year20}-${count[2]}`, `CVE-${year20}-${count[3]}`, `CVE-${year20}-${count[4]}`]

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id?short_name=' + owningOrg.short_name + '&cve_year=' + year20 + '&amount=5&batch_type=sequential')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          expect(res.body.cve_ids).to.be.a('array').to.have.lengthOf(5)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').to.equal(cves[0])
          expect(res.body.cve_ids[1]).to.have.property('cve_id').to.equal(cves[1])
          expect(res.body.cve_ids[2]).to.have.property('cve_id').to.equal(cves[2])
          expect(res.body.cve_ids[3]).to.have.property('cve_id').to.equal(cves[3])
          expect(res.body.cve_ids[4]).to.have.property('cve_id').to.equal(cves[4])
          done()
        })
    })
  })

  context(`Create CveId Range for year ${year22}`, () => {
    it('Requester is not the Secretariat', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id-range/' + year22)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('This function is currently only allowed to the Secretariat. This will change for many functions as more administrative roles are implemented.')
          done()
        })
    })

    it(`CveId Range is created for year ${year22}`, (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id-range/' + year22)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          done()
        })
    })

    it(`CveId Range already exists for year ${year22}`, (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id-range/' + year22)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE Id Range document for year ' + year22 + ' was not created because it already exists.')
          done()
        })
    })
  })

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.deleteMany({})
    await User.findOneAndRemove().byUserNameAndCnaShortName(secretariatUser.username, secretariatUser.cna_short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(owningOrgUser.username, owningOrgUser.cna_short_name)
    await User.findOneAndRemove().byUserNameAndCnaShortName(orgUser.username, orgUser.cna_short_name)
    await Org.findOneAndRemove().byShortName(secretariatOrg.short_name)
    await Org.findOneAndRemove().byShortName(owningOrg.short_name)
    await Org.findOneAndRemove().byShortName(org.short_name)
  })
})
