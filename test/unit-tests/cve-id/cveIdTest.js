const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeader = require('./mockObjects.cve-id').secretariatHeader
const owningOrgHeader = require('./mockObjects.cve-id').owningOrgHeader
const orgHeader = require('./mockObjects.cve-id').orgHeader
const secretariatOrg = require('./mockObjects.cve-id').secretariatOrg
const secretariatUser = require('./mockObjects.cve-id').secretariatUser
const owningOrg = require('./mockObjects.cve-id').owningOrg
const owningOrgUser = require('./mockObjects.cve-id').owningOrgUser
const org = require('./mockObjects.cve-id').org
const orgUser = require('./mockObjects.cve-id').orgUser
const nonExistentOrg = require('./mockObjects.cve-id').nonExistentOrg
const cvePublic = require('./mockObjects.cve-id').cvePublic
const cveReserved = require('./mockObjects.cve-id').cveReserved
const cveReject = require('./mockObjects.cve-id').cveReject
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()
const cveIdDummy1 = require('./mockObjects.cve-id').cveDummy1
const cveIdDummy2 = require('./mockObjects.cve-id').cveDummy2
const cveIdDummy3 = require('./mockObjects.cve-id').cveDummy3
const cveIdDummy4 = require('./mockObjects.cve-id').cveDummy4
const cveIdDummy5 = require('./mockObjects.cve-id').cveDummy5
const cveId = require('./mockObjects.cve-id').cveId
const cveIdYear = require('./mockObjects.cve-id').cveIdYear
const nonExistentCveId = 'CVE-2017-35437'

describe('Test ID Reservator Endpoints', () => {
  before(async () => {
    await CveId.findOneAndUpdate()
      .byCveId(cveId)
      .updateOne(cveReserved)
      .setOptions({ upsert: true })

    await CveId.findOneAndUpdate()
      .byCveId(cveIdDummy1.cve_id)
      .updateOne(cveIdDummy1)
      .setOptions({ upsert: true })

    await CveId.findOneAndUpdate()
      .byCveId(cveIdDummy2.cve_id)
      .updateOne(cveIdDummy2)
      .setOptions({ upsert: true })

    await CveId.findOneAndUpdate()
      .byCveId(cveIdDummy3.cve_id)
      .updateOne(cveIdDummy3)
      .setOptions({ upsert: true })

    await CveId.findOneAndUpdate()
      .byCveId(cveIdDummy4.cve_id)
      .updateOne(cveIdDummy4)
      .setOptions({ upsert: true })

    await CveId.findOneAndUpdate()
      .byCveId(cveIdDummy5.cve_id)
      .updateOne(cveIdDummy5)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(secretariatUser.UUID)
      .updateOne(secretariatUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(owningOrgUser.UUID)
      .updateOne(owningOrgUser)
      .setOptions({ upsert: true })

    await User.findOneAndUpdate()
      .byUUID(orgUser.UUID)
      .updateOne(orgUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(secretariatOrg.UUID)
      .updateOne(secretariatOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(owningOrg.UUID)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(org.UUID)
      .updateOne(org)
      .setOptions({ upsert: true })
  })

  context('Getting a cve id', () => {
    it('Cve does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id/' + nonExistentCveId)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(nonExistentCveId)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve is available', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id/' + cveIdDummy5.cve_id)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(cveIdDummy5.cve_id)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Requester is not the owning org or the secretariat and the cve is RESERVED', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id/' + cveId)
        .set(orgHeader) // not the owning cna or secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(cveId)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Requester is not the owning org or the secretariat and the cve is not RESERVED', (done) => {
      CveId.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne(cveReject)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .get('/api/test/cve-id/' + cveId)
            .set(orgHeader) // not the owning cna or secretariat
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('cve_id').and.to.equal(cveId)
              expect(res.body).to.have.property('state').and.to.equal('REJECT')
              expect(res.body).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
              done()
            })
        })
    })

    it('Requester is the owning cna', (done) => {
      CveId.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne(cvePublic)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .get('/api/test/cve-id/' + cveId)
            .set(owningOrgHeader) // the owning cna
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('cve_id').and.to.equal(cveId)
              expect(res.body).to.have.property('state').and.to.equal('PUBLIC')
              expect(res.body).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
              expect(res.body).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
              expect(res.body).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
              done()
            })
        })
    })

    it('Requester is the secretariat', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id/' + cveId)
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_id').and.to.equal(cveId)
          expect(res.body).to.have.property('state').and.to.equal('PUBLIC')
          expect(res.body).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
          expect(res.body).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })
  })

  context('Getting a filtered cve id', () => {
    it('No CVEs were found for the specified query parameters', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id?state=public&cve_id_year=2010')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          done()
        })
    })

    it('The "state" query parameter is provided', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id?state=PUBLIC')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').and.to.equal(cveId)
          expect(res.body.cve_ids[0]).to.have.property('state').and.to.equal('PUBLIC')
          expect(res.body.cve_ids[0]).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })

    it('No available CVEs are returned', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id?state=AVAILABLE')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          done()
        })
    })

    it('The "cve_id_year" query parameter is provided', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id?cve_id_year=' + cveIdYear)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').and.to.equal(cveId)
          expect(res.body.cve_ids[0]).to.have.property('cve_year').and.to.equal(cveIdYear)
          expect(res.body.cve_ids[0]).to.have.property('state').and.to.equal('PUBLIC')
          expect(res.body.cve_ids[0]).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })

    it('The requester is not the Secretariat and no query parameters are provided', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveId }).and.to.nested.include({ cve_year: cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cvePublic.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdDummy1.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          done()
        })
    })

    it('Updating the org of the user who requested the cve id', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/api/test/cna/${owningOrg.short_name}/user/${owningOrgUser.username}?new_cna_shortname=${org.short_name}`)
        .set(owningOrgHeader) // the owning cna
        .end((err) => {
          if (err) {
            done(err)
          }

          chai.request(server)
            .get(`/api/test/cna/${org.short_name}/user/${owningOrgUser.username}`)
            .set(owningOrgHeader) // the owning cna
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('username').and.to.equal(owningOrgUser.username)
              expect(res.body).to.have.property('org_UUID').and.to.equal(org.UUID)
              done()
            })
        })
    })

    it('The requested_by field did not change after updating the org of the user who requested the cve id', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id')
        .set(owningOrgHeader) // the owning cna
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveId }).and.to.nested.include({ cve_year: cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cvePublic.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdDummy1.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          done()
        })
    })

    it('The requester is the Secretariat and no query parameters are provided', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(5)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cvePublic.cve_id }).and.to.nested.include({ cve_year: cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cvePublic.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdDummy1.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          expect(res.body.cve_ids[2]).to.nested.include({ cve_id: cveIdDummy2.cve_id }).and.to.nested.include({ cve_year: cveIdDummy2.cve_year })
          expect(res.body.cve_ids[2]).to.nested.include({ state: cveIdDummy2.state }).and.to.nested.include({ owning_cna: secretariatOrg.short_name })
          expect(res.body.cve_ids[2]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          expect(res.body.cve_ids[3]).to.nested.include({ cve_id: cveIdDummy3.cve_id }).and.to.nested.include({ cve_year: cveIdDummy3.cve_year })
          expect(res.body.cve_ids[3]).to.nested.include({ state: cveIdDummy3.state }).and.to.nested.include({ owning_cna: secretariatOrg.short_name })
          expect(res.body.cve_ids[3]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          expect(res.body.cve_ids[4]).to.nested.include({ cve_id: cveIdDummy4.cve_id }).and.to.nested.include({ cve_year: cveIdDummy4.cve_year })
          expect(res.body.cve_ids[4]).to.nested.include({ state: cveIdDummy4.state }).and.to.nested.include({ owning_cna: org.short_name })
          expect(res.body.cve_ids[4]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          done()
        })
    })

    // Testing pagination
    it('Paginator page header is not defined', (done) => {
      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      delete testSecretariatHeader['PAGINATOR-PAGE']

      // perform the request to the api
      chai.request(server)
        .get('/api/test/cve-id')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(5)
          expect(res.header).to.not.have.property('paginator-itemcount')
          expect(res.header).to.not.have.property('paginator-nextpage')
          done()
        })
    })
  })

  context('Modifying a cve id', () => {
    it('CVE ID does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id/' + nonExistentCveId + '?cna=' + secretariatOrg.short_name + '&state=PUBLIC')
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(nonExistentCveId)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cna query parameter is provided but new cna does not exist', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id/' + cveId + '?cna=' + nonExistentOrg.short_name)
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cnaDne(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('State query parameter is provided but state is RESERVED', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id/' + cveId + '?state=RESERVED')
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidReservedState()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('State query parameter is invalid', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id/' + cveId + '?state=PUBLISHED')
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidState('PUBLISHED')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve is reasigned to another org and state is modified', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id/' + cveId + '?cna=' + org.short_name + '&state=REJECT')
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('state').and.to.equal('REJECT')
          expect(res.body.updated).to.have.property('owning_cna').and.to.equal(org.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })

    it('No query parameters are provided', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cve-id/' + cveId)
        .set(secretariatHeader) // the secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('state').and.to.equal('REJECT')
          expect(res.body.updated).to.have.property('owning_cna').and.to.equal(org.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })
  })

  after(async () => {
    await CveId.deleteMany({})
    await User.deleteMany({})
    await Org.deleteMany({})
  })
})
