
const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const userBHeader = require('./mockObjects.non-sequential').userBHeader
const orgA = require('./mockObjects.non-sequential').orgA
const orgB = require('./mockObjects.non-sequential').orgB
const userA = require('./mockObjects.non-sequential').userA
const userB = require('./mockObjects.non-sequential').userB
const year = require('./mockObjects.non-sequential').year
const idsA = []
const idsB = []

// describe('Test ID Reservator for Non-Sequential Interleaving Case', () => {
//   before(async () => {
//     // Create a Cve Id Range for year 3000
//     const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
//     defaultDoc.cve_year = year
//     defaultDoc.ranges.general.top_id = 0
//     defaultDoc.ranges.general.start = 0
//     defaultDoc.ranges.general.end = 25
//     await CveIdRange.findOneAndUpdate({ cve_year: defaultDoc.cve_year }, defaultDoc, { upsert: true })

//     // Create org A
//     await Org.findOneAndUpdate()
//       .byShortName(orgA.short_name)
//       .updateOne(orgA)
//       .setOptions({ upsert: true })

//     // Create user A
//     await User.findOneAndUpdate()
//       .byUserNameAndCnaShortName(userA.username, userA.cna_short_name)
//       .updateOne(userA)
//       .setOptions({ upsert: true })

//     // Create org B
//     await Org.findOneAndUpdate()
//       .byShortName(orgB.short_name)
//       .updateOne(orgB)
//       .setOptions({ upsert: true })

//     // Create user B
//     await User.findOneAndUpdate()
//       .byUserNameAndCnaShortName(userB.username, userB.cna_short_name)
//       .updateOne(userB)
//       .setOptions({ upsert: true })
//   })

//   context('Interleaving reservation between User A and User B', () => {
//     it('User A reserves 5 ids', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post(`/api/test/cve-id?batch_type=non-sequential&short_name=${userA.cna_short_name}&cve_year=${year}&amount=5`)
//         .set(userAHeader) // not the owning cna or secretariat
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // checking header
//           const quotaHeader = (orgA.policies.id_quota - 5).toString()
//           expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

//           // assert expected response
//           expect(res).to.have.status(200)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
//           res.body.cve_ids.forEach(obj => {
//             idsA.push(obj.cve_id)
//             const index = parseInt(obj.cve_id.match(/\d+$/g))
//             expect(index).to.be.greaterThan(0).and.lessThan(26) // Available id range: CVE-YYYY-0001 to CVE-YYYY-0025
//             expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
//           })
//           done()
//         })
//     })

//     it('Check that there are no duplicates in the reserved ids by User A', (done) => {
//       // checking that there are no duplicates
//       idsA.forEach(id1 => {
//         let counter = 0

//         idsA.forEach(id2 => {
//           if (id1 === id2) {
//             counter++
//           }
//         })

//         expect(counter).to.equal(1)
//       })

//       done()
//     })

//     it('User B reserves 10 ids', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post(`/api/test/cve-id?batch_type=non-sequential&short_name=${userB.cna_short_name}&cve_year=${year}&amount=20`)
//         .set(userBHeader) // not the owning cna or secretariat
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // checking header
//           const quotaHeader = (orgB.policies.id_quota - 20).toString()
//           expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

//           // assert expected response
//           expect(res).to.have.status(200)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
//           res.body.cve_ids.forEach(obj => {
//             idsB.push(obj.cve_id)
//             const index = parseInt(obj.cve_id.match(/\d+$/g))
//             expect(index).to.be.greaterThan(0).and.lessThan(26) // Available id range: CVE-YYYY-0001 to CVE-YYYY-0025
//             expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
//           })
//           done()
//         })
//     })

//     it('Check that there are no duplicates in the reserved ids by User B', (done) => {
//       // checking that there are no duplicates
//       idsB.forEach(id1 => {
//         let counter = 0

//         idsB.forEach(id2 => {
//           if (id1 === id2) {
//             counter++
//           }
//         })

//         expect(counter).to.equal(1)
//       })

//       done()
//     })

//     it(`User A tries to reserve 10 more ids but the CveId Range document for year ${year} is full`, (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post(`/api/test/cve-id?batch_type=non-sequential&short_name=${userA.cna_short_name}&cve_year=${year}&amount=10`)
//         .set(userAHeader)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // checking header
//           const quotaHeader = (orgA.policies.id_quota - 5).toString()
//           expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

//           // assert expected response
//           expect(res).to.have.status(403)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body.error).to.equal(CONSTANTS.YEAR_RANGE_FULL.error)
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal(CONSTANTS.YEAR_RANGE_FULL.message)
//           done()
//         })
//     })

//     it('Check count of reserved ids by User A in the db', async () => {
//       // checking that the correct amount of RESERVED ids were created
//       const reservedCount = await CveId.countDocuments({ owning_cna: userA.cna_short_name, cve_year: year, state: 'RESERVED' })
//       expect(reservedCount).to.equal(5) // end - start + 1
//     })

//     it('Check count of reserved ids by User B in the db', async () => {
//       // checking that the correct amount of RESERVED ids were created
//       const reservedCount = await CveId.countDocuments({ owning_cna: userB.cna_short_name, cve_year: year, state: 'RESERVED' })
//       expect(reservedCount).to.equal(20) // end - start + 1
//     })

//     it('Check that there are no duplicates in the reserved ids by User A and Use B', (done) => {
//       // checking that there are no duplicates
//       idsA.forEach(id1 => {
//         let isDisjoint = true

//         idsB.forEach(id2 => {
//           if (id1 === id2) {
//             isDisjoint = false
//           }
//         })

//         expect(isDisjoint).to.equal(true) // pass: The intersection set between idsA and idsB is null
//       })

//       done()
//     })
//   })

//   after(async () => {
//     await CveId.deleteMany({})
//     await CveIdRange.deleteMany({})
//     await User.deleteMany({})
//     await Org.deleteMany({})
//   })
// })
