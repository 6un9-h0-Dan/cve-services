const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CONSTANTS = require('../../../src/constants')
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const userBHeader = require('./mockObjects.non-sequential').userBHeader
const orgA = require('./mockObjects.non-sequential').orgA
const orgB = require('./mockObjects.non-sequential').orgB
const userA = require('./mockObjects.non-sequential').userA
const userB = require('./mockObjects.non-sequential').userB
const year = require('./mockObjects.non-sequential').year
const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()
const idsA = []
const idsB = []

const ReposFactory = require('../../../src/repositories/repositoryFactory')

const repositories = new ReposFactory()

describe('Test ID Reservator for Non-Sequential Interleaving Case', () => {
  before(async () => {
    const cveIdRangeRepo = repositories.getCveIdRangeRepository()
    const userRepo = repositories.getUserRepository()
    const orgRepo = repositories.getOrgRepository()
    // Create a Cve Id Range for year 3000
    const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
    defaultDoc.cve_year = year
    defaultDoc.ranges.general.top_id = 0
    defaultDoc.ranges.general.start = 0
    defaultDoc.ranges.general.end = 25
    await cveIdRangeRepo.findOneAndUpdate({ cve_year: defaultDoc.cve_year }, defaultDoc, { upsert: true })

    // Create org A
    await orgRepo.findOneAndUpdate({ UUID: orgA.UUID }, orgA, { upsert: true })

    // Create user A
    await userRepo.findOneAndUpdate({ UUID: userA.UUID }, userA, { upsert: true })

    // Create org B
    await orgRepo.findOneAndUpdate({ UUID: orgB.UUID }, orgB, { upsert: true })

    // Create user B
    await userRepo.findOneAndUpdate({ UUID: userB.UUID }, userB, { upsert: true })
  })

  context('Interleaving reservation between User A and User B', () => {
    it('User A reserves 10 ids', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/cve-id-reserve-user-a-10-ids?short_name=${orgA.short_name}&cve_year=${year}&amount=10&batch_type=non-sequential`) // 5
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (orgA.policies.id_quota - 10).toString() // 5
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            idsA.push(obj.cve_id)
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(0).and.lessThan(26) // Available id range: CVE-YYYY-0001 to CVE-YYYY-0025
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
            expect(obj).to.have.property('owning_cna').and.to.equal(orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(orgA.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(userA.username)
          })
          done()
        })
    })

    it('Check that there are no duplicates in the reserved ids by User A', (done) => {
      // checking that there are no duplicates
      idsA.forEach(id1 => {
        let counter = 0

        idsA.forEach(id2 => {
          if (id1 === id2) {
            counter++
          }
        })

        expect(counter).to.equal(1)
      })

      done()
    })

    it('User B reserves 10 ids', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/cve-id-reserve-user-b-10-ids?short_name=${orgB.short_name}&cve_year=${year}&amount=10&batch_type=non-sequential`) // 20
        .set(userBHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          // checking header
          const quotaHeader = (orgB.policies.id_quota - 10).toString() // 20
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            idsB.push(obj.cve_id)
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(0).and.lessThan(26) // Available id range: CVE-YYYY-0001 to CVE-YYYY-0025
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
            expect(obj).to.have.property('owning_cna').and.to.equal(orgB.short_name)
            expect(obj).to.have.nested.property('requested_by.cna').and.to.equal(orgB.short_name)
            expect(obj).to.have.nested.property('requested_by.user').and.to.equal(userB.username)
          })
          done()
        })
    })

    it('Check that there are no duplicates in the reserved ids by User B', (done) => {
      // checking that there are no duplicates
      idsB.forEach(id1 => {
        let counter = 0

        idsB.forEach(id2 => {
          if (id1 === id2) {
            counter++
          }
        })

        expect(counter).to.equal(1)
      })

      done()
    })

    it(`User A tries to reserve 10 more ids but the CveId Range document for year ${year} is full`, (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/cve-id-reserve-user-a-10-ids-year-full?short_name=${orgA.short_name}&cve_year=${year}&amount=10&batch_type=non-sequential`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (orgA.policies.id_quota - 10).toString() // 5
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.yearRangeFull(year)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Check count of reserved ids by User A in the db', async () => {
      // checking that the correct amount of RESERVED ids were created
      const cveIdRepo = repositories.getCveIdRepository()
      const reservedCount = await cveIdRepo.countDocuments({ owning_cna: orgA.UUID, cve_year: year, state: 'RESERVED' })
      expect(reservedCount).to.equal(10) // end - start + 1 // 5
    })

    it('Check count of reserved ids by User B in the db', async () => {
      // checking that the correct amount of RESERVED ids were created
      const cveIdRepo = repositories.getCveIdRepository()
      const reservedCount = await cveIdRepo.countDocuments({ owning_cna: orgB.UUID, cve_year: year, state: 'RESERVED' })
      expect(reservedCount).to.equal(10) // end - start + 1 // 20
    })

    it('Check that there are no duplicates in the reserved ids by User A and Use B', (done) => {
      // checking that there are no duplicates
      idsA.forEach(id1 => {
        let isDisjoint = true

        idsB.forEach(id2 => {
          if (id1 === id2) {
            isDisjoint = false
          }
        })

        expect(isDisjoint).to.equal(true) // pass: The intersection set between idsA and idsB is null
      })

      done()
    })
  })

  after(async () => {
    const cveIdRepo = repositories.getCveIdRepository()
    const cveIdRangeRepo = repositories.getCveIdRangeRepository()
    const userRepo = repositories.getUserRepository()
    const orgRepo = repositories.getOrgRepository()
    await cveIdRepo.deleteMany({})
    await cveIdRangeRepo.deleteMany({})
    await userRepo.deleteMany({})
    await orgRepo.deleteMany({})
  })
})
