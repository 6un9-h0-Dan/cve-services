const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CveIdRange = require('../../../src/model/cve-id-range')
const CveId = require('../../../src/model/cve-id')
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const availableCveIds = require('./mockObjects.non-sequential').availableCveIdsE
const userAHeader = require('./mockObjects.non-sequential').userAHeader
const orgA = require('./mockObjects.non-sequential').orgA
const userA = require('./mockObjects.non-sequential').userA
const year = require('./mockObjects.non-sequential').year
const reservedByOther = require('../../../test-utils/reserveCaseE.non-sequential').reservedByOther
const ids = []
let reserved

describe('Test ID Reservator for Non-Sequential Case E', () => {
  before(async () => {
    // Create a Cve Id Range for year 3050
    const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
    defaultDoc.cve_year = year
    defaultDoc.ranges.general.top_id = 10
    defaultDoc.ranges.general.start = 0
    defaultDoc.ranges.general.end = 10
    await CveIdRange.findOneAndUpdate({ cve_year: defaultDoc.cve_year }, defaultDoc, { upsert: true })

    // Create org A
    await Org.findOneAndUpdate()
      .byShortName(orgA.short_name)
      .updateOne(orgA)
      .setOptions({ upsert: true })

    // Create user A
    await User.findOneAndUpdate()
      .byUserNameAndCnaShortName(userA.username, userA.cna_short_name)
      .updateOne(userA)
      .setOptions({ upsert: true })

    // Create 1 available CVE ID
    await CveId.insertMany(availableCveIds)
  })

  context('Case E', () => {
    it('Pool is incremented and 3 ids are reserved (partial error)', (done) => {
      // perform the request to the api
      chai.request(server)
        .post(`/api/test/cve-id/case/E?batch_type=non-sequential&short_name=${userA.cna_short_name}&cve_year=${year}&amount=5`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // checking header
          const quotaHeader = (orgA.policies.id_quota - 3).toString()
          expect(res.header).to.have.property('cve-api-remaining-quota').and.to.equal(quotaHeader)

          // assert expected response
          expect(res).to.have.status(206)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array')
          res.body.cve_ids.forEach(obj => {
            ids.push(obj.cve_id)
            const index = parseInt(obj.cve_id.match(/\d+$/g))
            expect(index).to.be.greaterThan(0).and.lessThan(8) // Available id range: CVE-YYYY-20001 to CVE-YYYY-20007
            expect(obj).to.have.property('state').and.to.equal('RESERVED') // checking that all CVE IDs returned are RESERVED
          })
          done()
        })
    })

    it('Reserved ids are non-sequential', (done) => {
      // checking that returned ids are non-sequential
      let isSequential = false
      const index = []

      for (let i = 0; i < ids.length - 1; i++) {
        const currentId = parseInt(ids[i].match(/\d+$/g))
        const nextId = parseInt(ids[i + 1].match(/\d+$/g))

        if (nextId - currentId === 1) {
          isSequential = true
          index.push(i)
        } else {
          isSequential = false
        }
      }

      if (!isSequential) {
        expect(isSequential).to.equal(false) // pass: Result is non-sequential
      } else {
        const isSequential = index.length === ids.length - 1
        expect(isSequential).to.equal(false) // pass: Result is non-sequential
      }

      done()
    })

    it('Check count of reserved ids by userA in the db', async () => {
      // checking that the correct amount of RESERVED ids were created
      const reservedCount = await CveId.countDocuments({ owning_cna: userA.cna_short_name, cve_year: year, state: 'RESERVED' })
      expect(reservedCount).to.equal(3) // end - start + 1
    })

    it('Check count of available ids in the db', async () => {
      // check that the correct amount of AVAILABLE ids were created
      const availableCount = await CveId.countDocuments({ state: 'AVAILABLE' })
      expect(availableCount).to.equal(0)
    })

    it('Check that reserved ids by userA are reserved in the db', async () => {
      // checking that all CVE IDs returned are RESERVED
      reserved = await CveId.find({ cve_id: { $in: ids }, cve_year: year }) // cve ids reserved by userA
      reserved.forEach(obj => {
        expect(obj).to.have.property('state').and.to.equal('RESERVED')
      })
    })

    it('Check that there are no duplicates in the reserved ids by userA', (done) => {
      // checking that there are no duplicates
      reserved.forEach(id1 => {
        let counter = 0

        reserved.forEach(id2 => {
          if (id1 === id2) {
            counter++
          }
        })

        expect(counter).to.equal(1)
      })

      done()
    })

    it('Check that unreserved ids by userA are reserved in the db', async () => {
      const topId = (await CveIdRange.findOneAndUpdate({ cve_year: year })).ranges.general.top_id // get top_id
      // checking that all CVE IDs not returned are RESERVED
      reserved = await CveId.find({ cve_id: { $in: reservedByOther }, cve_year: year }) // cve ids reserved by secretariatUser
      reserved.forEach(obj => {
        const index = parseInt(obj.cve_id.match(/\d+$/g))
        expect(index).to.be.lessThan(topId + 1) // check that the id is less than the current top id
        expect(obj).to.have.property('state').and.to.equal('RESERVED')
      })
    })
  })

  after(async () => {
    await CveId.deleteMany({})
    await CveIdRange.deleteMany({})
    await User.deleteMany({})
    await Org.deleteMany({})
  })
})
