const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const headers = require('./constants').headers
const cvePass = require('./schemas/4.0/CVE-2017-5832.json')
const Cve = require('../src/model/cve')
const cveId = 'CVE-2017-5832'
const nonExistentCveId = 'CVE-2017-35437'

describe('Test local MongoDB for Cve Controller', () => {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      Cve.findOneAndRemove()
        .byCveId(cveId)
        .exec((err) => {
          if (err) {
            done(err)
          }
          done()
        })
    })
  })

  context('Creating a cve', () => {
    it('Cve is created in MongoDB', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve')
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' has been created.')
          done()
        })
    })

    it('Cve is not created in MongoDB because it already exists', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve')
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' already exists.')
          done()
        })
    })
  })

  context('Updating a cve', () => {
    it('Cve id does not match', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve/' + nonExistentCveId)
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentCveId + ' parameter does not match ' + cveId + ' in the JSON body.')
          done()
        })
    })

    it('Cve is updated in MongoDB', (done) => {
      cvePass.description.description_data[0].value = 'This is a test description'
      chai.request('http://localhost:3000')
        .post('/api/cve/' + cveId)
        .set(headers)
        .send(cvePass)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' has been updated.')
          done()
        })
    })

    it('Cve is not created in MongoDB because it does not exists', (done) => {
      Cve.findOneAndRemove()
        .byCveId(cveId)
        .exec((err) => {
          if (err) {
            done(err)
          }

          chai.request('http://localhost:3000')
            .post('/api/cve/' + cveId)
            .set(headers)
            .send(cvePass)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(cveId + ' does not exist.')
              done()
            })
        })
    })
  })

  after((done) => {
    Cve.findOneAndRemove()
      .byCveId(cveId)
      .exec((err) => {
        if (err) {
          done(err)
        }
        mongoose.connection.close(done)
      })
  })
})
