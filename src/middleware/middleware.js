const User = require('../model/user')
const cveSchema = require('./jsonSchema')
const logger = require('./logger')
const Validator = require('jsonschema').Validator
const v = new Validator()
const uuidAPIKey = require('uuid-apikey')
const Djv = require('djv')
const env = new Djv()
require('dotenv').config() // This enables us to read from the .env file
env.addSchema('cve', cveSchema.cveSchema5) // What is this used for?

const validateUser = (req, res, next) => {
  const cna = req.header('CVE-API-CNA')
  const submitter = req.header('CVE-API-SUBMITTER')
  const secret = req.header('CVE-API-SECRET')

  logger.info('Authenticating user: ' + submitter)

  User.findOne()
    .byUserName(submitter)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result && (result.cna_short_name !== cna || uuidAPIKey.toAPIKey(result.secret) !== secret)) {
        logger.warn('User authentication FAILED for ' + submitter)
        return res.status(500).json({ message: 'User Authentication FAILED' })
      }

      logger.info('SUCCESSFUL user authentication for ' + submitter)
      next()
    })
}

// TODO: Request body sanitation, better user messages, and use correct status codes
const validateCveJsonSchema = (req, res, next) => {
  if (req.method === 'POST') {
    const cve = req.body
    logger.info('Validating CVE JSON schema')

    // For validating schema 4.0
    const schema4 = cveSchema.cveSchema4
    const result = v.validate(cve, schema4, { nestedErrors: true })

    // For validating schema 5.0
    // const schema = cveSchema.cveSchema5
    // v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.1.json?20190610')
    // v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.0.json?20170531')
    // v.addSchema(schema, '/https://www.first.org/cvss/cvss-v2.0.json?20170531')
    // const result = v.validate(cve, schema, { nestedErrors: true })

    if (result.valid) {
      logger.info('SUCCESSFUL CVE JSON schema validation')
      next()
    } else {
      logger.error(result)
      logger.error('CVE JSON schema validation FAILED')

      const temp = result.toString().split('\n')
      const errors = []
      temp.forEach((error) => {
        if (error !== '') {
          const array = error.split(':', 2)
          errors.push(array[1].trim())
        }
      })

      return res.status(400).json({ message: 'CVE JSON schema validation FAILED', errors: errors })
    }
  } else if (req.method === 'GET') {
    next()
  } else {
    return res.status(400).json({ message: 'CVE JSON schema validation FAILED' })
  }
}

module.exports = {
  validateUser,
  validateCveJsonSchema
}
