const User = require('../model/user')
const cveSchema = require('./jsonSchema')
const logger = require('./logger')
const Djv = require('djv')
const env = new Djv()
const cveIdPattern = cveSchema.cveIdPattern
require('dotenv').config() // This enables us to read from the .env file

env.addSchema('cve', cveSchema.cveSchema) // What is this used for?

const validateUser = (req, res, next) => {
  const cna = req.header('CVE-API-CNA')
  const submitter = req.header('CVE-API-SUBMITTER')
  const secret = req.header('CVE-API-SECRET')

  logger.info('Authenticating user: ' + submitter)

  User.findOne()
    .byUserName(submitter)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      if (result.cna_short_name !== cna || result.secret !== secret) {
        logger.warn('User authentication FAILED for ' + submitter)
        res.status(500).send('User Authentication FAILED')
      }

      logger.info('SUCCESSFUL user authentication for ' + submitter)
      next()
    })
}

const validateURLs = (req, res, next) => {
  logger.info('Validating URL')

  const validURLs = [
    /^\/api\/cve\/?$/i,
    /^(\/api\/cve\/)(\S*)$/i,
    /^\/api\/planets\/?$/i, // for testing only
    /^(\/api\/planets\/)(\S*)$/i // for testing only
  ]

  if (process.env.NODE_ENV === 'dev') {
    validURLs.push(/^\/mongo\/user\/?$/i) // dev only
    validURLs.push(/^\/mongo\/user\/\S*$/i) // dev only
    validURLs.push(/^\/mongo\/cna\/?$/i) // dev only
    validURLs.push(/^\/mongo\/cna\/\S*$/i) // dev only
  }

  let index = -1
  let id

  for (let i = 0; i < validURLs.length; i++) {
    const result = req.url.match(validURLs[i])

    if (result) {
      index = i
      id = result[2]
      break
    }
  }

  if (index < 0) {
    logger.warn('Unknown URL - URL Validation FAILED')
    res.status(404).send('Unknown URL')
  }

  // api/cve/:id
  if (index === 1 && id) {
    if (id.match(cveIdPattern)) {
      logger.info('SUCCESSFUL URL validation')
      next()
    } else {
      logger.warn('Wrong CVE ID format in URL - URL Validation FAILED')
      res.status(400).send('Wrong CVE ID format in URL')
    }
  } else {
    // TODO: Validate URL parameters for URLs other than api/cve/:id

    logger.info('SUCCESSFUL URL validation')
    next()
  }
}

// TODO: Request body sanitation, better user messages, and use correct status codes
const validateCveJsonSchema = (req, res, next) => {
  const cve = req.body.cve

  if (cve) {
    logger.info('Validating CVE JSON schema')

    // TODO: Implement steps needed to make sure it's safe to parse the JSON
    // TODO: Validate CVE JSON against JSON schema to avoid bad data

    // Make sure the Submitter in the headers matches the JSON author before passing to CPS
    // if (cve.author != req.header("CVE-API-AUTHOR")) {
    //   return res.status(500).send("CVE JSON Schema validation FAILED!");
    // }

    // let err = env.validate("cve", cve);
    // if (err) {
    //   return res.status(500).send("CVE JSON Schema validation FAILED!");
    // }

    logger.info('SUCCESSFUL CVE JSON schema validation')
  }

  next()
}

module.exports = {
  validateUser,
  validateURLs,
  validateCveJsonSchema
}
