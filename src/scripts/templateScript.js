/*
 * A template for creating additional one-time-use scripts.
 * Example use-cases:
 * 1. migrating documents
 * 2. populating a new MongoDb-compatible database
 * 3. creating a database snapshot
 * 4. ...
 */
const config = require('config')
const mongoose = require('mongoose')

const errors = require('../utils/error')
const logger = require('../middleware/logger')

const error = new errors.IDRError()

const appEnv = process.env.NODE_ENV
let dbUser, dbPassword
if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: false,
  useFindAndModify: false
})

const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error(error.connectionError())
})

db.once('open', async () => {
  logger.info(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)

  // do stuff here

  mongoose.connection.close()
})
