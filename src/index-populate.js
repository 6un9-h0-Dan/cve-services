const express = require('express')
const config = require('config')
const mongoose = require('mongoose')
const uuid = require('uuid')
const app = express()
const logger = require('./middleware/logger')
const CveIdRange = require('./model/cve-id-range')
const CveId = require('./model/cve-id')
const Org = require('./model/org')
const User = require('./model/user')
const uuidAPIKey = require('uuid-apikey')
const cveIdRangeData = require('../datadump/pre-population/cve-ids-range')
const cveIdData = require('../datadump/pre-population/cve-ids')
const orgData = require('../datadump/pre-population/orgs')
const userData = require(('../datadump/pre-population/users'))
const CONSTANTS = require('./constants')
const fs = require('fs')
const apiKeyFile = 'user-secret.txt'
require('dotenv').config() // This enables us to read from the .env file.

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
// Make mongoose connection available globally
global.mongoose = mongoose

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error('Connection Error: Something went wrong!')
})

db.once('open', async () => {
  // we're connected!
  logger.info(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)

  // Ask user to confirm pre-population, which will prep MongoDB by removing the Cve-Id, Org, and User collections
  const prompt = require('prompt-sync')({ sigint: true })
  let userInput = prompt(`Are you sure you wish to pre-populate the database for the ${appEnv} environment? Doing so will drop the 'Cve-Id-Range', 'Cve-Id', 'Org' and 'User' collections in the ${dbName} database. (y/n) `)

  while (userInput.toLowerCase() !== 'n' && userInput.toLowerCase() !== 'y') {
    console.log('Unrecognized Input')
    userInput = prompt(`Do you wish to pre-populate the database for the ${appEnv} environment? Doing so will drop the 'Cve-Id-Range', 'Cve-Id', 'Org' and 'User' collections in the ${dbName} database. (y/n) `)
  }

  // droping Cve-Id, Org, and User collections
  if (userInput.toLowerCase() === 'y') {
    let names = []
    let collections = await db.db.listCollections().toArray()
    collections.forEach(collection => {
      names.push(collection.name)
    })

    if (names.includes('Cve-Id-Range')) {
      await db.dropCollection('Cve-Id-Range')
    }

    if (names.includes('Cve-Id')) {
      await db.dropCollection('Cve-Id')
    }

    if (names.includes('Org')) {
      await db.dropCollection('Org')
    }

    if (names.includes('User')) {
      await db.dropCollection('User')
    }

    names = []
    collections = await db.db.listCollections().toArray()
    collections.forEach(collection => {
      names.push(collection.name)
    })

    if (!names.includes('Cve-Id-Range') && !names.includes('Cve-Id') && !names.includes('Org') && !names.includes('User')) {
      // Populating Cve-Id-Range, Cve-Id, Org and User collections
      await populateCveIdRangeCollection()
      await populateCveIdCollection()
      await populateOrgCollection()
      await populateUserCollection()

      logger.info('Successfully pre-populated the database!')
    }
  }

  // close MongoDB connection
  mongoose.connection.close()
})

async function populateCveIdRangeCollection () {
  await CveIdRange.insertMany(cveIdRangeData)
  logger.info('Cve-Id-Range collection populated')
}

// Populating Cve-Id collection
async function populateCveIdCollection () {
  await CveId.insertMany(cveIdData)
  logger.info('Cve-Id collection populated')
}

// Populating Org collection
async function populateOrgCollection () {
  orgData.forEach(org => {
    org.UUID = uuid.v4()
    org.policies = {
      id_quota: 0
    }

    if (!org.authority.active_roles.includes('SECRETARIAT')) {
      // random number between 0 (inclusive) and 1000 (inclusive)
      org.policies.id_quota = Math.floor(Math.random() * (CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max -
        CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min + 1)) + CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min
    }
  })

  await Org.insertMany(orgData)
  logger.info('Org collection populated')
}

// Populating User collection
async function populateUserCollection () {
  const color = require('kleur')
  let secretUUID
  let secreteKey

  if (process.env.NODE_ENV === 'development') {
    secretUUID = 'd31e22fa-1a58-4899-9a86-2741d97b98d4'
    secreteKey = 'TCF25YM-39C4H6D-KA32EGF-V5XSHN3'

    // provide secret to user
    console.log(color.bold().black().bgWhite('Use the following API secret for all users:') + ' ' + color.bold().black().italic().bgGreen(secreteKey))
  } else {
    // delete file for user secrets if one already exists
    fs.unlink(apiKeyFile, err => {
      if (err && err.code !== 'ENOENT') {
        logger.error('File Delete Error: Something went wrong!')
        logger.error(err)
        // close MongoDB connection
        mongoose.connection.close()
      }
    })

    console.log(color.bold().black().bgWhite('The users\' API secret can be found in:') + ' ' + color.bold().black().italic().bgGreen(apiKeyFile))
  }

  userData.forEach(user => {
    if (process.env.NODE_ENV === 'development') {
      user.secret = secretUUID
    } else {
      const pair = uuidAPIKey.create()
      user.secret = pair.uuid

      const payload = {
        username: user.username,
        secret: pair.apiKey
      }

      // write pair.apiKey to apiKey file
      fs.writeFile(apiKeyFile, JSON.stringify(payload) + '\n', { flag: 'a' }, (err) => {
        if (err) {
          logger.error('File Write Error: Something went wrong!')
          logger.error(err)
          // close MongoDB connection
          mongoose.connection.close()
        }
      })
    }

    user.UUID = uuid.v4()
  })

  await User.insertMany(userData)
  logger.info('User collection populated')
}
