import * as _ from 'lodash';

const db = require('./models/index'); // tslint:disable
import { CNADetailsObject } from './dbconstants';
import { ICNA } from './interfaces/db-interfaces';

export const dbOperations = {
    /**
     * Returns all CVEs stored in DB without. Does not take into account
     * Users organization.
     * @returns {Object} - Returns all CVES stored in database.
     */
    async getAllCves() {
        return db.CVES.findAll({}).then(resolve => {
            return Promise.resolve(resolve);
        });
    },
    /**
     * Returns all Active CNA's
     * @returns {Object} - Returns all CNA's that are active.
     */
    async getAllCNA() {
        return db.CNAs.findAll({ where: { cnaStatus: 'ACTIVE' } }).then(resolve => {
            const cnas = resolve.map(cna => _.omit(cna.dataValues, CNADetailsObject));
            return Promise.resolve(cnas);
        });
    },
    /**
     * Returns all CVE's owned by the requesting organization
     * @param {string} cveOrganizationUUID - Organization UUID.
     * @returns {Object} - Returns all CVE's from organization
     */
    async getAllOrgCvesNoFilter(cveOrganizationUUID) {
        return db.CVES.findAll({ where: { cveOrganizationUUID } }).then(resolve => {
            const cves = resolve.map(cve => _.omit(cve.dataValues));
            return Promise.resolve(cves);
        });
    },

    /**
     * Returns all CVE's owned by Organization, filtering by CVE status
     * @param {string} cveOrganizationUUID - Organization UUID
     * @param {string} cveStatus - Status desired to filter by
     * @returns {Object} - Returns all CVE's with desired status
     */
    async getAllOrgCvesFilter(cveOrganizationUUID, cveStatus) {
        return db.CVES.findAll({ where: { cveOrganizationUUID, cveStatus } }).then(resolve => {
            const cves = resolve.map(cve => _.omit(cve.dataValues));
            return Promise.resolve(cves);
        });
    },

    /**
     * Returns a single CVE based on CVE ID
     * @param {string} cveID - CVE ID to obtain
     * @param {string} cveOrganizationUUID - Organization ID pertaining to that ID
     * @returns {Object} - Returns CVE's Info pertaining to given ID
     */
    async getCveByID(cveID, cveOrganizationUUID) {
        return db.CVES.findAll({ where: { cveID, cveOrganizationUUID } }).then(resolve => {
            const cves = resolve.map(cve => _.omit(cve.dataValues));
            return Promise.resolve(cves);
        });
    },
    /**
     * Returns a single CVE based on CVE ID
     * @param {Object} user - User object.
     * @returns {string} - Returns new users UUID
     */
    async createUser(user) {
        return db.Users.create(user).then(
            resolve => {
                const { userUUID } = resolve;
                return Promise.resolve(userUUID);
            },
            rejected => {
                return Promise.reject(rejected);
            },
        );
    },

    /**
     * Returns all user information from a given UUID
     * @param {string} UUID - Users UUID.
     * @returns {Object} - Returns users data pertaining to the UUID
     */
    async getUserData(UUID) {
        return db.Admins.findOne({
            where: {
                adminUUID: UUID,
            },
        })
            .then(
                resolved => {
                    const { adminPublicKey, adminUUID } = resolved;
                    return Promise.resolve({ adminPublicKey, adminUUID });
                },
                rejection => {},
            )
            .catch(err => {
                return db.CNAs.findOne({
                    where: {
                        cnaUUID: UUID,
                        cnaStatus: 'ACTIVE',
                    },
                }).then(
                    resolved => {
                        const {
                            cnaUUID,
                            cnaPublicKey,
                            cnaName,
                            cnaType,
                            cnaDescription,
                            cnaEmail,
                            cnaWebSite,
                            cnaGPGKeys,
                        } = resolved;
                        return Promise.resolve({
                            cnaUUID,
                            cnaPublicKey,
                            cnaName,
                            cnaType,
                            cnaDescription,
                            cnaEmail,
                            cnaWebSite,
                            cnaGPGKeys,
                        });
                    },
                    rejection => {
                        return Promise.reject(rejection);
                    },
                );
            });
    },

    /**
     * Creates a new CVE instance in the DB
     * @param {Object} cveObject - CVE object
     */
    async saveCVE(cveObject) {
        var data = {
            cveID: cveObject.cve_id,
            cveStatus: cveObject.status,
            cveOrganizationUUID: cveObject.Organization.org_id,
            cveOragnizationName: cveObject.Organization.org_name,
        };
        return db.CVES.create(data)
            .then(
                resolved => {
                    return Promise.resolve(resolved);
                },
                rejection => {
                    console.log(rejection);
                    return Promise.reject(rejection);
                },
            )
            .catch(err => {
                console.log(err);
                return Promise.reject(err);
            });
    },

    /**
     * Edits the status of a given CVE ID
     * @param {string} cveID - CVE ID to edit status
     * @param {string} status - Status to give to the CVE
     * @param {string} cveOrganizationUUID - Organization pertaining to the CVE
     * @returns {Object} - Returns the new CVE
     */
    async editCveStatus(cveID, status: string, cveOrganizationUUID) {
        return db.CVES.update(
            { cveStatus: status },
            {
                where: { cveID, cveOrganizationUUID },
            },
        )
            .then(
                isInDb => {
                    console.log(isInDb[0]);
                    return Promise.resolve(isInDb);
                },
                rejection => {
                    console.log('here2');
                    return Promise.reject(rejection);
                },
            )
            .catch(err => {
                return Promise.reject({ error: err });
            });
    },
    /**
     * Edits the status of a given User ID
     * @param {string} userUUID - User ID to edit status
     * @param {string} userStatus - Status to give to the User
     * @param {string} userCNAUUID - Organization pertaining to the User
     */
    async deactivateCNA(cnaUUID: string) {
        return db.CNAs.update(
            { cnaStatus: 'INACTIVE' },
            {
                where: { cnaUUID },
            },
        )
            .then(
                resolved => {
                    console.log(resolved);
                    return Promise.resolve(resolved);
                },
                rejection => {
                    return Promise.reject(rejection);
                },
            )
            .catch(err => {
                console.log(err);
                return Promise.reject({ error: err });
            });
    },
    /**
     * Edits the status of a given User ID
     * @param {string} cnaUUID - User ID to edit status
     * @param {Object} user - User Object
     * @param {string} userCNAUUID - Organization pertaining to the User making the call
     */
    async updateCNA(cnaUUID: string, cna: ICNA) {
        const { cnaPublicKey, cnaName, cnaType, cnaDescription, cnaEmail, cnaWebSite, cnaGPGKeys } = cna;
        return db.CNAs.update(
            {
                cnaPublicKey,
                cnaName,
                cnaType,
                cnaDescription,
                cnaEmail,
                cnaWebSite,
                cnaGPGKeys,
            },
            {
                where: { cnaUUID },
            },
        )
            .then(
                resolved => {
                    return Promise.resolve(resolved);
                },
                rejection => {
                    return Promise.reject(rejection);
                },
            )
            .catch(err => {
                return Promise.reject({ error: err });
            });
    },

    /**
     * Create a CNA with a given cna object
     * @param {CNA} cna - User ID to edit status
     * @returns {string} - Returns the new CNA UUID
     */
    async createCNA(cna) {
        return db.CNAs.create(cna).then(
            resolve => {
                const { cnaUUID } = resolve;
                return Promise.resolve(cnaUUID);
            },
            rejected => {
                return Promise.reject(rejected);
            },
        );
    },
};
