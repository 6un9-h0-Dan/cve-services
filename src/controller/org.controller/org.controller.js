require('dotenv').config()
const User = require('../../model/user')
const Org = require('../../model/org')
const logger = require('../../middleware/logger')
const argon2 = require('argon2')
const CONSTANTS = require('../../constants')
const cryptoRandomString = require('crypto-random-string')
const utils = require('../../utils/utils')
const uuid = require('uuid')
const errors = require('./error')
const error = new errors.OrgControllerError()

// Get the details of all cnas
async function getCnas (req, res, next) {
  try {
    const repo = req.ctx.repositories.getOrgRepository()
    const result = await repo.aggregate([
      {
        $project: {
          _id: false,
          UUID: true,
          short_name: true,
          name: true,
          'authority.active_roles': true,
          'policies.id_quota': true,
          time: true
        }
      }
    ])

    logger.info('The CNAs were sent to the user.')
    return res.status(200).json(result)
  } catch (err) {
    next(err)
  }
}

// Get the details of a single cna for the specified shortname
async function getCna (req, res, next) {
  try {
    const shortName = req.ctx.params.shortname
    const repo = req.ctx.repositories.getOrgRepository()
    const result = await repo.aggregate([
      {
        $match: { short_name: shortName }
      },
      {
        $project: {
          _id: false,
          UUID: true,
          short_name: true,
          name: true,
          'authority.active_roles': true,
          'policies.id_quota': true,
          time: true
        }
      }
    ])

    if (utils.isEmptyObject(result)) {
      logger.info(shortName + ' CNA does not exist.')
      return res.status(404).json(error.cnaDneParam(shortName))
    }

    logger.info({ message: shortName + ' CNA was sent to the user.', cna: result })
    return res.status(200).json(result[0])
  } catch (err) {
    next(err)
  }
}

// Get the details of a single user for the specified username
async function getUser (req, res, next) {
  try {
    const username = req.ctx.params.username
    const cnaShortName = req.ctx.params.shortname
    let returned = false
    const orgRepo = req.ctx.repositories.getOrgRepository()
    const orgUUID = await orgRepo.getOrgUUID(cnaShortName)
    if (!orgUUID) {
      returned = true
      logger.info(cnaShortName + ' CNA does not exist.')
      return res.status(404).json(error.cnaDneParam(cnaShortName))
    }

    if (!returned) {
      const userRepo = req.ctx.repositories.getUserRepository()
      const result = await userRepo.aggregate([
        {
          $match: { username: username, org_UUID: orgUUID }
        },
        {
          $project: {
            _id: false,
            UUID: true,
            username: true,
            org_UUID: true,
            name: true,
            active: true,
            time: true
          }
        }
      ])

      if (utils.isEmptyObject(result)) {
        logger.info(username + ' does not exist.')
        return res.status(404).json(error.userDne(username))
      }

      logger.info({ message: username + ' was sent to the user.', user: result })
      return res.status(200).json(result[0])
    }
  } catch (err) {
    next(err)
  }
}

// Get details on ID quota for a org with the specified org shortname
async function getOrgIdQuota (req, res, next) {
  try {
    const cnaShortName = req.ctx.org
    const shortName = req.ctx.params.shortname
    const repo = req.ctx.repositories.getOrgRepository()
    const isSecretariat = await repo.isSecretariat(cnaShortName)
    if (cnaShortName !== shortName && !isSecretariat) {
      logger.info({ message: shortName + ' CNA id quota can only be viewed by the owning CNA or the Secretariat.' })
      return res.status(403).json(error.notOwnerOrSecretariat())
    }

    let result = await repo.findOneByShortName(shortName)
    if (!result) {
      logger.info(shortName + ' CNA does not exist.')
      return res.status(404).json(error.cnaDneParam(shortName))
    }

    const returnPayload = {
      id_quota: result.policies.id_quota,
      total_reserved: null,
      available: null
    }

    const query = {
      owning_cna: await repo.getOrgUUID(shortName),
      state: 'RESERVED'
    }
    const cveIdRepo = req.ctx.repositories.getCveIdRepository()
    result = await cveIdRepo.countDocuments(query)
    returnPayload.total_reserved = result
    returnPayload.available = returnPayload.id_quota - returnPayload.total_reserved

    logger.info({ message: 'The CVE ID quota returned to the user.', details: returnPayload })
    return res.status(200).json(returnPayload)
  } catch (err) {
    next(err)
  }
}

// Creates a new cna only if the cna doesn't exist for the specified shortname. If the cna exists, it does not update the cna.
async function createCna (req, res, next) {
  try {
    const newCna = new Org(req.ctx.body)
    const orgRepo = req.ctx.repositories.getOrgRepository()

    const result = await orgRepo.findOneByShortName(newCna.short_name) // Find cna in MongoDB
    if (result) {
      logger.info(newCna.short_name + ' CNA was not created because it already exists.')
      return res.status(400).json(error.cnaExists(newCna.short_name))
    }

    newCna.inUse = false

    // policies are undefined
    if (newCna.authority.active_roles.length === 0) {
      newCna.authority.active_roles = [CONSTANTS.AUTH_ROLE_ENUM.CNA] // default role
    }

    if (newCna.UUID === undefined || newCna.UUID === null) {
      newCna.UUID = uuid.v4()
    }

    if (newCna.policies.id_quota === undefined || newCna.policies.id_quota === null) {
      newCna.policies.id_quota = CONSTANTS.DEFAULT_ID_QUOTA
    }

    await orgRepo.updateByOrgUUID(newCna.UUID, newCna, { upsert: true }) // Create cna in MongoDB if it doesn't exist

    const responseMessage = {
      message: newCna.short_name + ' CNA was successfully created.',
      created: newCna
    }

    const payload = {
      action: 'create_org',
      change: newCna.short_name + ' CNA was successfully created.',
      req_UUID: req.ctx.uuid,
      org_UUID: await orgRepo.getOrgUUID(req.ctx.org),
      org: newCna
    }
    const userRepo = req.ctx.repositories.getUserRepository()
    payload.user_UUID = await userRepo.getUserUUID(req.ctx.user, payload.org_UUID)
    logger.info(JSON.stringify(payload))
    return res.status(200).json(responseMessage)
  } catch (err) {
    next(err)
  }
}

// Updates a cna only if the cna exist for the specified shortname. If no cna exists, it does not create the cna.
async function updateCna (req, res, next) {
  try {
    const shortName = req.ctx.params.shortname
    const newCna = new Org()
    let returned = false
    let quota
    let name
    let shortname
    const removeRoles = []
    const addRoles = []
    const orgRepo = req.ctx.repositories.getOrgRepository()
    const org = await orgRepo.findOneByShortName(shortName)

    // org doesn't exist
    if (!org) {
      returned = true
      logger.info(shortName + ' CNA could not be updated in MongoDB because it does not exist.')
      return res.status(404).json(error.cnaDneParam(shortName))
    }

    // parsing query parameters
    if ('id_quota' in req.ctx.query) {
      quota = req.ctx.query.id_quota
    }
    if ('name' in req.ctx.query) {
      name = req.ctx.query.name
    }
    if ('shortname' in req.ctx.query) {
      shortname = req.ctx.query.shortname
    }
    if ('active_roles.add' in req.ctx.query) {
      if (Array.isArray(req.ctx.query['active_roles.add'])) {
        req.ctx.query['active_roles.add'].forEach(r => {
          addRoles.push(r)
        })
      }
    }
    if ('active_roles.remove' in req.ctx.query) {
      if (Array.isArray(req.ctx.query['active_roles.remove'])) {
        req.query['active_roles.remove'].forEach(r => {
          removeRoles.push(r)
        })
      }
    }

    // updating the org's roles
    if (org && !returned) {
      const roles = org.authority.active_roles
      newCna.policies.id_quota = org.policies.id_quota

      // adding roles
      addRoles.forEach(role => {
        if (!roles.includes(role)) {
          roles.push(role)
        }
      })

      // removing roles
      removeRoles.forEach(role => {
        const index = roles.indexOf(role)

        if (index > -1) {
          roles.splice(index, 1)
        }
      })

      newCna.authority.active_roles = roles
    }

    // updating the org's quota
    if (quota && !returned) {
      newCna.policies.id_quota = quota
    }

    // updating the org's name (the name field is never an empty string due to the stripping of the quotes and double quotes)
    if (name && !returned) {
      newCna.name = name
    }

    // updating the org's shortname (the shortname field is never an empty string due to the stripping of the quotes and double quotes)
    if (shortname && !returned) {
      newCna.short_name = shortname
      const result = await orgRepo.findOneByShortName(newCna.short_name)

      if (result && !returned) {
        returned = true
        return res.status(403).json(error.duplicateShortname(newCna.short_name))
      }
    }

    // update org
    if (!returned) {
      const result = await orgRepo.updateByOrgUUID(org.UUID, newCna)

      if (result.n === 0) {
        logger.info(shortName + ' CNA could not be updated in MongoDB because it does not exist.')
        return res.status(404).json(error.cnaDneParam(shortName))
      }

      const responseMessage = {
        message: shortName + ' CNA was successfully updated.',
        updated: newCna
      }

      const payload = {
        action: 'update_org',
        change: shortName + ' CNA was successfully updated.',
        req_UUID: req.ctx.uuid,
        org_UUID: await orgRepo.getOrgUUID(req.ctx.org),
        org: newCna
      }
      const userRepo = req.ctx.repositories.getUserRepository()
      payload.user_UUID = await userRepo.getUserUUID(req.ctx.user, payload.org_UUID)
      logger.info(JSON.stringify(payload))
      return res.status(200).json(responseMessage)
    }
  } catch (err) {
    next(err)
  }
}

// Creates a user only if the cna exist and the user doesn't exist for the specified shortname and username respectively.
async function createUser (req, res, next) {
  try {
    const cnaShortName = req.ctx.params.shortname
    const newUser = new User(req.ctx.body)
    const orgRepo = req.ctx.repositories.getOrgRepository()
    const userRepo = req.ctx.repositories.getUserRepository()

    const orgUUID = await orgRepo.getOrgUUID(cnaShortName)
    if (!orgUUID) {
      logger.info('The user could not be created because ' + cnaShortName + ' CNA does not exist.')
      return res.status(404).json(error.cnaDneParam(cnaShortName))
    }

    if (newUser.org_UUID === undefined || newUser.org_UUID === null) {
      newUser.org_UUID = orgUUID
    }

    // If org's UUID was provided in the body, it must match the org's UUID of the org provided in the URL params
    if (newUser.org_UUID !== orgUUID) {
      const temp = await orgRepo.findOneByUUID(newUser.org_UUID)
      let sn

      if (!temp) {
        sn = null
      } else {
        sn = temp.short_name
      }

      return res.status(400).json(error.shortnameMismatch(cnaShortName, sn))
    }

    let result = await orgRepo.findOneByUUID(newUser.org_UUID) // Check the cna exists

    if (!result) {
      logger.info('The user could not be created because ' + cnaShortName + ' CNA does not exist.')
      return res.status(400).json(error.cnaDneParam(cnaShortName))
    }

    newUser.active = true
    const randomKey = cryptoRandomString({ length: CONSTANTS.CRYPTO_RANDOM_STRING_LENGTH })
    newUser.secret = await argon2.hash(randomKey)

    if (newUser.UUID === undefined || newUser.UUID === null) {
      newUser.UUID = uuid.v4()
    }

    result = await userRepo.findOneByUserNameAndOrgUUID(newUser.username, newUser.org_UUID) // Find user in MongoDB

    if (result) {
      logger.info(newUser.username + ' was not created because it already exists.')
      return res.status(400).json(error.userExists(newUser.username))
    }
    await userRepo.updateByUserNameAndOrgUUID(newUser.username, newUser.org_UUID, newUser, { upsert: true }) // Create user in MongoDB if it doesn't exist

    newUser.secret = randomKey
    const responseMessage = {
      message: newUser.username + ' was successfully created.',
      created: newUser
    }

    const payload = {
      action: 'create_user',
      change: newUser.username + ' was successfully created.',
      req_UUID: req.ctx.uuid,
      org_UUID: await orgRepo.getOrgUUID(req.ctx.org),
      user: newUser
    }
    payload.user_UUID = await utils.getUserUUID(req.ctx.user, payload.org_UUID)
    logger.info(JSON.stringify(payload))
    return res.status(200).json(responseMessage)
  } catch (err) {
    next(err)
  }
}

// Updates a user only if the user exist for the specified username. If no user exists, it does not create the user.
async function updateUser (req, res, next) {
  try {
    const username = req.ctx.params.username
    const shortName = req.ctx.params.shortname
    const newUser = new User()
    let returned = false
    let nameChanged = false
    let newUsername
    let newCnaShortname
    let active
    const name = {
      first: null,
      ast: null,
      middle: null,
      surname: null,
      suffix: null
    }
    const userRepo = req.ctx.repositories.getUserRepository()
    const orgRepo = req.ctx.repositories.getOrgRepository()

    const orgUUID = await orgRepo.getOrgUUID(shortName)
    if (!orgUUID) {
      returned = true
      logger.info('The user could not be updated because ' + shortName + ' CNA does not exist.')
      return res.status(404).json(error.cnaDneParam(shortName))
    }

    const user = await userRepo.findOneByUserNameAndOrgUUID(username, orgUUID)
    if (!user) {
      returned = true
      logger.info('The user could not be updated because ' + username + ' does not exist for ' + shortName + ' CNA')
      return res.status(404).json(error.userDne(username))
    }

    if ('new_username' in req.ctx.query) {
      newUsername = req.ctx.query.new_username
    }
    if ('new_cna_shortname' in req.ctx.query) {
      newCnaShortname = req.ctx.query.new_cna_shortname
    }
    if ('active' in req.ctx.query) {
      active = req.ctx.query.active
    }
    if ('name.first' in req.ctx.query) {
      name.first = req.ctx.query['name.first']
      user.name.first = name.first
      nameChanged = true
    }
    if ('name.last' in req.ctx.query) {
      name.last = req.ctx.query['name.last']
      user.name.last = name.last
      nameChanged = true
    }
    if ('name.middle' in req.ctx.query) {
      name.middle = req.ctx.query['name.middle']
      user.name.middle = name.middle
      nameChanged = true
    }
    if ('name.suffix' in req.ctx.query) {
      name.suffix = req.ctx.query['name.suffix']
      user.name.suffix = name.suffix
      nameChanged = true
    }
    if ('name.surname' in req.ctx.query) {
      name.surname = req.ctx.query['name.surname']
      user.name.surname = name.surname
      nameChanged = true
    }

    // updating the user's username (the username field is never an empty string due to the stripping of the quotes and double quotes)
    if (newUsername && !returned) {
      newUser.username = newUsername
    }

    if (active && !returned) {
      newUser.active = active
    }

    // only update the name sub fields that were changed
    if (nameChanged && !returned) {
      newUser.name = user.name
    }

    // check if the new org exist
    if (newCnaShortname && !returned) {
      newUser.org_UUID = await orgRepo.getOrgUUID(newCnaShortname)

      if (!newUser.org_UUID) {
        returned = true
        logger.info('The user could not be updated because ' + newCnaShortname + ' CNA does not exist.')
        return res.status(404).json(error.cnaDne(newCnaShortname))
      }
    }

    // check if org has user of same username already
    if ((newUsername && newCnaShortname) && !returned) {
      const duplicateUsers = await User.find({ org_UUID: newUser.org_UUID, username: newUser.username })
      if (duplicateUsers.length) {
        returned = true
        logger.info('The user could not be updated because ' + newCnaShortname + ' CNA contains a user with the same name.')
        return res.status(403).json(error.duplicateUsername(newCnaShortname, newUsername))
      }
    } else if (newUsername && !returned) {
      const duplicateUsers = await User.find({ org_UUID: orgUUID, username: newUser.username })
      if (duplicateUsers.length) {
        returned = true
        logger.info('The user could not be updated because ' + shortName + ' CNA contains a user with the same name.')
        return res.status(403).json(error.duplicateUsername(shortName, newUsername))
      }
    } else if (newCnaShortname && !returned) {
      const duplicateUsers = await User.find({ org_UUID: newUser.org_UUID, username: username })
      if (duplicateUsers.length) {
        returned = true
        logger.info('The user could not be updated because ' + newCnaShortname + ' CNA contains a user with the same name.')
        return res.status(403).json(error.duplicateUsername(newCnaShortname, username))
      }
    }

    if (!returned) {
      const result = await userRepo.updateByUserNameAndOrgUUID(username, orgUUID, newUser)

      if (result.n === 0) {
        logger.info('The user could not be updated because ' + username + ' does not exist for ' + shortName + ' CNA')
        return res.status(404).json(error.userDne(username))
      }

      const responseMessage = {
        message: username + ' was successfully updated.',
        updated: newUser
      }

      const payload = {
        action: 'update_user',
        change: username + ' was successfully updated.',
        req_UUID: req.ctx.uuid,
        org_UUID: await orgRepo.getOrgUUID(req.ctx.org),
        user: newUser
      }
      payload.user_UUID = await userRepo.getUserUUID(req.ctx.user, payload.org_UUID)
      logger.info(JSON.stringify(payload))
      return res.status(200).json(responseMessage)
    }
  } catch (err) {
    next(err)
  }
}

// Resets the user secret
async function resetSecret (req, res, next) {
  try {
    const username = req.ctx.params.username
    const cnaShortName = req.ctx.params.shortname
    const newUser = new User()
    const randomKey = cryptoRandomString({ length: CONSTANTS.CRYPTO_RANDOM_STRING_LENGTH })
    newUser.secret = await argon2.hash(randomKey) // store in db
    newUser.username = username
    const userRepo = req.ctx.repositories.getUserRepository()
    const orgRepo = req.ctx.repositories.getOrgRepository()
    const orgUUID = await orgRepo.getOrgUUID(cnaShortName) // userUUID may be null if user does not exist

    if (!orgUUID) {
      logger.info(cnaShortName + ' CNA does not exist.')
      return res.status(404).json(error.cnaDneParam(cnaShortName))
    }

    const result = await userRepo.updateByUserNameAndOrgUUID(newUser.username, orgUUID, newUser)
    if (result.n === 0) {
      logger.info('The user could not be updated because ' + username + ' does not exist for ' + cnaShortName)
      return res.status(404).json(error.userDne(username))
    }

    logger.info(JSON.stringify(`The API secret was successfully reset and sent to ${username}`))
    const payload = {
      action: 'reset_userAPIkey',
      change: 'API secret was successfully reset.',
      req_UUID: req.ctx.uuid,
      org_UUID: await orgRepo.getOrgUUID(req.ctx.org)
    }
    payload.user_UUID = await userRepo.getUserUUID(req.ctx.user, payload.org_UUID)
    logger.info(JSON.stringify(payload))
    return res.status(200).json({ 'API-secret': randomKey })
  } catch (err) {
    next(err)
  }
}

module.exports = {
  CNA_ALL: getCnas,
  CNA_SINGLE: getCna,
  CNA_CREATE_SINGLE: createCna,
  CNA_UPDATE_SINGLE: updateCna,
  ORG_ID_QUOTA: getOrgIdQuota,
  USER_SINGLE: getUser,
  USER_CREATE_SINGLE: createUser,
  USER_UPDATE_SINGLE: updateUser,
  USER_RESET_SECRET: resetSecret
}
