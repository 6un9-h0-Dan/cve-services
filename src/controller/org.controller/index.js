const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./org.controller')
const { check, query, validationResult, sanitize } = require('express-validator')
const CONSTANTS = require('../../constants')
const logger = require('../../middleware/logger')

router.get('/org',
    mw.onlySecretariat,
    mw.validateUser,
    controller.CNA_ALL)
router.post('/org',
    mw.onlySecretariat,
    mw.validateUser,
    check(['body']).isJSON(),
    check(['short_name']).isString().trim().escape().notEmpty(),
    check(['name']).isString().trim().escape().notEmpty(),
    parseError,
    parsePostParams,
    controller.CNA_CREATE_SINGLE)
router.get('/org/:shortname',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape(),
    parseError,
    parseGetParams,
    controller.CNA_SINGLE)
router.post('/org/:shortname',
    mw.onlySecretariat,
    mw.validateUser,
    query(['shortname']).optional().isString().trim().escape().notEmpty(),
    check(['id_quota']).optional().isNumeric(),
    check(['name']).optional().isString().trim().escape().notEmpty(),
    check(['active_roles.add']).optional().toArray(),
    check(['active_roles.add']).optional().customSanitizer(val => {return val.map(x => {return x.toUpperCase()})}).custom(val => {return isCNARole(val)}),
    check(['active_roles.remove']).optional().toArray(),
    check(['active_roles.remove']).optional().customSanitizer(val => {return val.map(x => {return x.toUpperCase()})}).custom(val => {return isCNARole(val)}),
    parseError,
    parsePostParams,
    controller.CNA_UPDATE_SINGLE)
router.post('/org/:shortname/user',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).optional().isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    check(['org_UUID']).optional().isString().trim().escape(),
    parseError,
    parsePostParams,
    controller.USER_CREATE_SINGLE)
router.get('/org/:shortname/user/:username',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    parseError,
    parseGetParams,
    controller.USER_SINGLE)
router.post('/org/:shortname/user/:username',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    check(['active']).optional().isString().trim().escape().isIn(['true', 'false']),
    check(['new_username']).optional().isString().trim().escape().notEmpty(),
    check(['new_cna_shortname']).optional().isString().trim().escape().notEmpty(),
    check(['name.first']).optional().isAlpha().trim().escape(),
    check(['name.last']).optional().isAlpha().trim().escape(),
    check(['name.middle']).optional().isAlpha().trim().escape(),
    check(['name.suffix']).optional().isAlpha().trim().escape(),
    check(['name.surname']).optional().isAlpha().trim().escape(),
    parseError,
    parsePostParams,
    controller.USER_UPDATE_SINGLE)
router.post('/org/:shortname/user/:username/reset_secret',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    parseError,
    parsePostParams,
    controller.USER_RESET_SECRET)
router.get('/org/:shortname/id_quota',
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    parseError,
    parseGetParams,
    controller.ORG_ID_QUOTA)

function isCNARole(val) {
    val.forEach(role => {
        if (!CONSTANTS.CNA_ROLES.includes(role)) {
            logger.info('Invalid role for CNA', role)
            throw new Error('CNA role \'' + role + '\' does not exist.')
        }
    })

    return true
}

function parsePostParams(req, res, next) {
    if(!('body' in req.ctx)) {
        req.ctx.body = {}
    }
    if(!('params' in req.ctx)) {
        req.ctx.params = {}
    }
    if(!('query' in req.ctx)) {
        req.ctx.query = {}
    }
    if(req.body) {
        req.ctx.body = req.body
    }
    if('shortname' in req.params) {
        req.ctx.params.shortname = req.params.shortname
    }
    if('username' in req.params) {
        req.ctx.params.username = req.params.username
    }
    if('shortname' in req.query) {
        req.ctx.query.shortname = req.query.shortname
    }
    if('name' in req.query) {
        req.ctx.query.name = req.query.name
    }
    if('id_quota' in req.query) {
        req.ctx.query.id_quota = req.query.id_quota
    }
    if('active_roles.add' in req.query) {
        req.ctx.query['active_roles.add'] = req.query['active_roles.add']
    }
    if('active_roles.remove' in req.query) {
        req.ctx.query['active_roles.remove'] = req.query['active_roles.remove']
    }
    if('active' in req.query) {
        req.ctx.query.active = req.query.active
    }
    if('new_username' in req.query) {
        req.ctx.query.new_username = req.query.new_username
    }
    if('new_cna_shortname' in req.query) {
        req.ctx.query.new_cna_shortname= req.query.new_cna_shortname
    }
    if('name.first' in req.query) {
        req.ctx.query['name.first'] = req.query['name.first']
    }
    if('name.last' in req.query) {
        req.ctx.query['name.last'] = req.query['name.last']
    }
    if('name.middle' in req.query) {
        req.ctx.query['name.middle'] = req.query['name.middle']
    }
    if('name.suffix' in req.query) {
        req.ctx.query['name.suffix'] = req.query['name.suffix']
    }
    if('name.surname' in req.query) {
        req.ctx.query['name.surname'] = req.query['name.surname']
    }
    next()
}

function parseGetParams(req, res, next) {
    if(!('params' in req.ctx)) {
        req.ctx.params = {}
    }
    if('shortname' in req.params) {
        req.ctx.params.shortname = req.params.shortname
    }
    if('username' in req.params) {
        req.ctx.params.username = req.params.username
    }
    next()
}

function parseError(req, res, next) {
    const errors = validationResult(req);
    if(!errors.isEmpty()) {
        return res.status(400).json({ error:'BAD_INPUT', message:'Parameters were invalid', details: errors.array()})
    }
    next();
}

module.exports = router
