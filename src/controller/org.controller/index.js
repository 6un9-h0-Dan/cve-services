const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./org.controller')
const { check, param, query } = require('express-validator')
const { parseGetParams, parsePostParams, parseError, isCNARole } = require('./org.middleware')
const CONSTANTS = require('../../../src/constants')

router.get('/org',
    mw.onlySecretariat,
    mw.validateUser,
    controller.CNA_ALL)
router.post('/org',
    mw.onlySecretariat,
    mw.validateUser,
    check(['body']).isJSON(),
    check(['short_name']).isString().trim().escape().notEmpty(),
    check(['name']).isString().trim().escape().notEmpty(),
    parseError,
    parsePostParams,
    controller.CNA_CREATE_SINGLE)
router.get('/org/:shortname',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape(),
    parseError,
    parseGetParams,
    controller.CNA_SINGLE)
router.post('/org/:shortname',
    mw.onlySecretariat,
    mw.validateUser,
    param(['shortname']).isString().trim().escape(),
    query(['shortname']).optional().isString().trim().escape().notEmpty(),
    check(['id_quota']).optional().isInt({min: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min , max: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max}).withMessage('The id_quota does not comply with CVE id quota limitations.'),
    check(['name']).optional().isString().trim().escape().notEmpty(),
    check(['active_roles.add']).optional().toArray(),
    check(['active_roles.add']).optional().customSanitizer(val => {return val.map(x => {return x.toUpperCase()})}).custom(val => {return isCNARole(val)}),
    check(['active_roles.remove']).optional().toArray(),
    check(['active_roles.remove']).optional().customSanitizer(val => {return val.map(x => {return x.toUpperCase()})}).custom(val => {return isCNARole(val)}),
    parseError,
    parsePostParams,
    controller.CNA_UPDATE_SINGLE)
router.post('/org/:shortname/user',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).optional().isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    check(['org_UUID']).optional().isString().trim().escape(),
    parseError,
    parsePostParams,
    controller.USER_CREATE_SINGLE)
router.get('/org/:shortname/user/:username',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    parseError,
    parseGetParams,
    controller.USER_SINGLE)
router.post('/org/:shortname/user/:username',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    check(['active']).optional().isString().trim().escape().isIn(['true', 'false']),
    check(['new_username']).optional().isString().trim().escape().notEmpty(),
    check(['new_cna_shortname']).optional().isString().trim().escape().notEmpty(),
    check(['name.first']).optional().isAlpha().trim().escape(),
    check(['name.last']).optional().isAlpha().trim().escape(),
    check(['name.middle']).optional().isAlpha().trim().escape(),
    check(['name.suffix']).optional().isAlpha().trim().escape(),
    check(['name.surname']).optional().isAlpha().trim().escape(),
    parseError,
    parsePostParams,
    controller.USER_UPDATE_SINGLE)
router.post('/org/:shortname/user/:username/reset_secret',
    mw.onlySecretariat,
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    check(['username']).isString().trim().escape().notEmpty(),
    parseError,
    parsePostParams,
    controller.USER_RESET_SECRET)
router.get('/org/:shortname/id_quota',
    mw.validateUser,
    check(['shortname']).isString().trim().escape().notEmpty(),
    parseError,
    parseGetParams,
    controller.ORG_ID_QUOTA)


module.exports = router
