const Cve = require('../../model/cve')
const axios = require('axios')
const querystring = require('querystring')
const logger = require('../../middleware/logger')

// TODO: Pagination
async function getAllCves (req, res) {
  try {
    const result = await axios.get('http://swapi.co/api/planets/?page=1')

    // CPS work item was approved
    if (result) {
      logger.info('The CVEs were sent to the user')
      res.status(200).json(result.data) // send CVEs to user
    } else {
      logger.info('The CPS work item was not approved. The CVEs were not sent to the user.')
      res.status(500).json('A problem ocurred. The CVEs could not be fetched.') // send error message to user
    }
  } catch (err) {
    logger.error(err.stack)
    res.status(500).send('Internal Server Error') // send error message to user
  }
}

async function getCve (req, res) {
  // validated in middleware
  const cveId = req.params.id

  try {
    const result = await axios.get('https://swapi.co/api/planets/' + cveId)

    // CPS work item was approved
    if (result) {
      logger.info(cveId + ' was sent to the user')
      res.status(200).send(result.data) // send CVE to user
    } else {
      logger.info('The CPS work item was not approved. ' + cveId + ' was not sent to the user.')
      res.status(500).json('A problem ocurred. ' + cveId + ' could not be fetched.') // send error message to user
    }
  } catch (err) {
    logger.error(err.stack)
    res.status(500).send('Internal Server Error') // send error message to user
  }
}

// TODO: Request body sanitation <- in JSON Validator
/* Creates a new CVE if one does not exists for the specified CVE id in the CVE's body req. If one exists, it updates the CVE. */
async function submitCve (req, res) {
  try {
    const result = await axios.post('https://swapi.co/api/people/', querystring.stringify(req.body.cve))

    // const result = req.body;
    const cveId = result.cve.CVE_data_meta.ID

    // CPS work item was approved
    if (result) {
      logger.info(cveId + ' has been created/updated in CPS')

      // Store CVE in MongoDB
      Cve.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne({ cve: result.cve })
        .setOptions({ upsert: true })
        .exec(err => {
          if (err) {
            logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not stored in the database.')
            logger.error(err.stack)
          } else {
            logger.info(cveId + ' was successfully stored in MongoDB')
          }

          res.status(200).send(cveId + ' has been created/updated') // send message to user
        })
    } else {
      logger.info('The CPS work item was not approved. ' + cveId + ' was not created/updated.')
      res.status(500).send('A problem ocurred. ' + cveId + ' could not be created/updated.') // send error message to user
    }
  } catch (err) {
    // Request to CPS failed
    logger.error(err.stack)
    res.status(500).send('Internal Server Error') // send error message to user
  }
}

// TODO: Request body sanitation <- in JSON Validator
async function updateCve (req, res) {
  // validated in middleware
  const cveId = req.params.id

  try {
    const result = await axios.post('https://swapi.co/api/people/' + cveId, querystring.stringify(req.body.cve))
    // const result = req.body;

    // CPS work item was approved
    if (result) {
      logger.info(cveId + ' has been updated in CPS')

      // Store CVE in MongoDB
      Cve.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne({ cve: result.cve })
        .exec(err => {
          if (err) {
            logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not stored in the database.')
            logger.error(err.stack)
          } else {
            logger.info(cveId + ' was successfully stored in MongoDB')
          }

          res.status(200).send(cveId + ' has been updated') // send message to user
        })
    } else {
      logger.info('The CPS work item was not approved. ' + cveId + ' was not updated.')
      res.status(500).send('A problem ocurred. ' + cveId + ' could not be updated.') // send error message to user
    }
  } catch (err) {
    // Request to CPS failed
    logger.error(err.stack)
    res.status(500).send('Internal Server Error') // send error message to user
  }
}

module.exports = {
  CVE_LIST_ALL: getAllCves,
  CVE_SINGLE: getCve,
  CVE_SUBMIT: submitCve,
  CVE_UPDATE_SINGLE: updateCve
}
