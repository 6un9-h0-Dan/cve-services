const Cve = require('../../model/cve')
const logger = require('../../middleware/logger')

// Creates a new CVE only if it does not exists for the specified CVE ID in the request body. If it exists, it does not update the CVE.
async function submitCve (req, res) {
  const cve = req.body
  const cveId = cve.CVE_data_meta.ID

  // Find CVE in MongoDB
  Cve.findOne()
    .byCveId(cveId)
    .exec((err, result) => {
      if (err) {
        logger.warn('An error ocurred in MongoDB while trying to check if ' + cveId + ' already exists.')
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result) {
        logger.info(cveId + ' already exists.')
        return res.status(400).json({ message: cveId + ' already exists.' })
      }

      // Create CVE in MongoDB if it doesn't exist
      const newCve = new Cve({ cve: cve })

      // Find and Update CVE in MongoDB
      Cve.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne(newCve)
        .setOptions({ upsert: true })
        .exec((err) => {
          if (err) {
            logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not created in the database.')
            logger.error(err.stack)
            return res.status(500).json({ message: 'Failed to create ' + cveId + '.' })
          }

          logger.info(cveId + ' has been created.')
          return res.status(200).json({ message: cveId + ' has been created.' })
        })
    })
}

// Updates a CVE if one exists for the specified CVE ID
async function updateCve (req, res) {
  const cve = req.body
  const cveId = req.params.id

  if (cveId !== cve.CVE_data_meta.ID) {
    return res.status(400).json({ message: cveId + ' parameter does not match ' + cve.CVE_data_meta.ID + ' in the JSON body.' })
  }

  const newCve = new Cve({ cve: cve })

  // Find and Update CVE in MongoDB
  Cve.findOneAndReplace()
    .byCveId(cveId)
    .replaceOne(newCve)
    .exec((err, result) => {
      if (err) {
        logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not updated in the database.')
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.n === 0) {
        logger.info(cveId + ' does not exist.')
        return res.status(404).json({ message: cveId + ' does not exist.' })
      }

      logger.info(cveId + ' has been updated.')
      return res.status(200).json({ message: cveId + ' has been updated.' })
    })
}

module.exports = {
  CVE_SUBMIT: submitCve,
  CVE_UPDATE_SINGLE: updateCve
}
