const Cve = require('../../model/cve')
const axios = require('axios')
const logger = require('../../middleware/logger')

// INFO: DO NOT USE - Not integrated with CPS
// TODO: Pagination
async function getAllCves (req, res) {
  try {
    const result = await axios.get('')

    // CPS work item was approved
    if (!result.Error) {
      logger.info('The CVEs were sent to the user')
      return res.status(200).json(result.data) // send CVEs to user
    } else {
      logger.warn('The CPS work item was not approved. The CVEs were not sent to the user.')
      return res.status(500).json({ message: 'A problem ocurred. The CVEs could not be fetched.' }) // send error message to user
    }
  } catch (err) {
    logger.error(err.stack)
    return res.status(500).send('Internal Server Error') // send error message to user
  }
}

// TODO: Request parameter validation
async function getCve (req, res) {
  const cveId = req.params.id
  const instance = axios.create({
    timeout: 10000,
    headers: {
      'CVE-API-CNA': req.header('CVE-API-CNA'),
      'CVE-API-SUBMITTER': req.header('CVE-API-SUBMITTER'),
      'CVE-API-SECRET': req.header('CVE-API-SECRET')
    }
  })

  try {
    const result = await instance.get('https://cvecps-dev.mitre.org/cps/ws/cve/' + cveId)

    // CPS work item was approved
    if (result) {
      logger.info(cveId + ' was sent to the user')
      return res.status(200).json(result.data) // send CVE to user
    } else {
      logger.warn('The CPS work item was not approved. ' + cveId + ' was not sent to the user.')
      return res.status(500).json({ message: 'A problem ocurred. ' + cveId + ' could not be fetched.' }) // send error message to user
    }
  } catch (err) {
    logger.error(err.stack)
    return res.status(500).send('Internal Server Error') // send error message to user
  }
}

// TODO: Request body sanitation
// MongoDB: Creates a new CVE if it does not exists for the specified CVE id in the CVE's body req. If it exists, it updates the CVE.
async function submitCve (req, res) {
  const cve = req.body
  const cveId = cve.CVE_data_meta.ID
  const instance = axios.create({
    timeout: 10000,
    headers: {
      'CVE-API-CNA': req.header('CVE-API-CNA'),
      'CVE-API-SUBMITTER': req.header('CVE-API-SUBMITTER'),
      'CVE-API-SECRET': req.header('CVE-API-SECRET')
    }
  })

  try {
    const cpsResult = await instance.post('https://cvecps-dev.mitre.org/cps/ws/cve/' + cveId + '/', cve)
    const updatedCve = JSON.parse(cpsResult.data.Entry)

    // CPS work item was approved
    if (!cpsResult.data.Error) {
      logger.info(cveId + ' has been created/updated in CPS')
      logger.info(cpsResult.data.Message)

      // Store CVE in MongoDB
      Cve.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne({ cve: updatedCve })
        .setOptions({ upsert: true })
        .exec((err, result) => {
          if (err) {
            logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not created/updated in the database.')
            logger.error(err.stack)
          } else {
            if (result.upserted) {
              logger.info(cveId + ' was successfully created in MongoDB')
            } else {
              logger.info(cveId + ' was successfully updated in MongoDB')
            }
          }

          // Respond to the user always
          return res.status(200).json({ message: cveId + ' has been created' }) // send message to user
        })
    } else {
      logger.warn('The CPS work item was not approved. ' + cveId + ' was not created/updated.')
      logger.warn(cpsResult.data.Error)
      return res.status(500).json({ message: 'The CPS work item was not approved. ' + cveId + ' could not be created.' }) // send error message to user
    }
  } catch (err) {
    // Request to CPS failed
    logger.error(err.stack)
    return res.status(500).send('Internal Server Error') // send error message to user
  }
}

// TODO: Request body sanitation and parameter validation
// MongoDB: Updates a CVE if it exists. If no CVE exists, the CVE does not get created and no changes are made.
async function updateCve (req, res) {
  const cve = req.body
  const cveId = req.params.id
  const instance = axios.create({
    timeout: 10000,
    headers: {
      'CVE-API-CNA': req.header('CVE-API-CNA'),
      'CVE-API-SUBMITTER': req.header('CVE-API-SUBMITTER'),
      'CVE-API-SECRET': req.header('CVE-API-SECRET')
    }
  })

  try {
    const cpsResult = await instance.post('https://cvecps-dev.mitre.org/cps/ws/cve/' + cveId + '/', cve)
    const updatedCve = JSON.parse(cpsResult.data.Entry)

    // CPS work item was approved
    if (!cpsResult.data.Error) {
      logger.info(cveId + ' has been updated in CPS')
      logger.info(cpsResult.data.Message)

      // Store CVE in MongoDB
      Cve.findOneAndReplace()
        .byCveId(cveId)
        .replaceOne({ cve: updatedCve })
        .exec((err, result) => {
          if (err) {
            logger.warn('An error ocurred in MongoDB. ' + cveId + ' was not updated in the database.')
            logger.error(err.stack)
          } else {
            if (result.n === 0) {
              logger.info(cveId + ' was not updated in MongoDB because it does not exists in the database.')
            } else {
              logger.info(cveId + ' was successfully updated in MongoDB')
            }
          }

          // Respond to the user always
          return res.status(200).json({ message: cveId + ' has been updated' }) // send message to user
        })
    } else {
      logger.warn('The CPS work item was not approved. ' + cveId + ' was not updated.')
      logger.warn(cpsResult.data.Error)
      return res.status(500).json({ message: 'The CPS work item was not approved. ' + cveId + ' could not be updated.' }) // send error message to user
    }
  } catch (err) {
    // Request to CPS failed
    logger.error(err.stack)
    return res.status(500).send('Internal Server Error') // send error message to user
  }

  // res.status(200).json({ message: cveId + ' has been updated' })
}

module.exports = {
  CVE_LIST_ALL: getAllCves,
  CVE_SINGLE: getCve,
  CVE_SUBMIT: submitCve,
  CVE_UPDATE_SINGLE: updateCve
}
