import { dbOperations } from "../database/db-operations";
import { getCVEID } from "./utils/get-cve-ids";

export class CveIdAllocationController {
  async getAllCves(request, response, next) {
    try {
      dbOperations
        .getAllCves()
        .then(
          resolved => {
            response.status(200).json(resolved);
          },
          rejected => {
            response.status(400).json(rejected);
          }
        )
        .catch(err => {
          console.log(err);
          response.status(400).json({ error: "Something happened!" });
        });
    } catch (err) {
      console.log(err);
      response.status(400).json({ error: "Something happened!" });
    }
  }

  async getCveInfo(request, response, next) {
    const { payload } = request.body;
    console.log(payload);
    const filterRegex = /^(Free|Rejected|Disputed|Populated|Public|Published|Reserved|Obsolete)$/g; //Filter for status only
    var filterFlag = false;
    var result = [];
    try {
      if (payload.filter) {
        if (!new RegExp(filterRegex).test(payload.filter)) {
          response.status(400).json({ error: "Invalid Filter" });
          return;
        } else {
          filterFlag = true;
        }
      }
      console.log("this: ", request.CNAID);
      if (payload.ids) {
        var holdResponse = [];
        for (var i = 0; i < payload.ids.length; i++) {
          try {
            let cves = await dbOperations.getCveId(
              payload.ids[i],
              request.CNAID
            );
            holdResponse.push(cves);
          } catch (err) {
            console.log(err);
            response.status(400).json({ error: "No CVE foound with that ID" });
          }
        }
        for (var i = 0; i < holdResponse.length; i++) {
          var cveIdObject = {
            cve_id: "",
            status: "",
            Requestor: { user_id: "", user_name: "" },
            Organization: { org_id: "", org_name: "" },
            History: "TBD"
          };
          cveIdObject.cve_id = holdResponse[i][0].cveID;
          cveIdObject.status = holdResponse[i][0].cveStatus;
          cveIdObject.Requestor.user_id = holdResponse[i][0].cveRequesterUserID;
          cveIdObject.Requestor.user_name =
            holdResponse[i][0].cveRequesterUserName;
          cveIdObject.Organization.org_id =
            holdResponse[i][0].cveOrganizationUUID;
          cveIdObject.Organization.org_name =
            holdResponse[i][0].cveOragnizationName;
          result.push(cveIdObject);
        }
        response.status(200).json(result);
      } else {
        if (filterFlag) {
          dbOperations
            .getAllOrgCvesFilter(request.CNAID, payload.filter)
            .then(
              response => {
                for (var i = 0; i < response.length; i++) {
                  var cveIdObject = {
                    cve_id: "",
                    status: "",
                    Requestor: { user_id: "", user_name: "" },
                    Organization: { org_id: "", org_name: "" },
                    History: "TBD"
                  };
                  cveIdObject.cve_id = response[i].cveID;
                  cveIdObject.status = response[i].cveStatus;
                  cveIdObject.Requestor.user_name =
                    response[i].cveRequesterUserName;
                  cveIdObject.Requestor.user_id =
                    response[i].cveRequesterUserID;
                  cveIdObject.Organization.org_name =
                    response[i].cveOragnizationName;
                  cveIdObject.Organization.org_id =
                    response[i].cveOrganizationUUID;
                  result.push(cveIdObject);
                }
                response.status(200).json(result);
              },
              rejected => {
                response.status(400).json("rejected");
              }
            )
            .catch(err => {
              console.log(err);
              response.status(400).json({ error: "Something happened!" });
            });
        } else {
          dbOperations
            .getAllOrgCvesNoFilter(request.CNAID)
            .then(
              response => {
                for (var i = 0; i < response.length; i++) {
                  var cveIdObject = {
                    cve_id: "",
                    status: "",
                    Requestor: { user_id: "", user_name: "" },
                    Organization: { org_id: "", org_name: "" },
                    History: "TBD"
                  };
                  cveIdObject.cve_id = response[i].cveID;
                  cveIdObject.status = response[i].cveStatus;
                  cveIdObject.Requestor.user_name =
                    response[i].cveRequesterUserName;
                  cveIdObject.Requestor.user_id =
                    response[i].cveRequesterUserID;
                  cveIdObject.Organization.org_name =
                    response[i].cveOragnizationName;
                  cveIdObject.Organization.org_id =
                    response[i].cveOrganizationUUID;
                  result.push(cveIdObject);
                }
                response.status(200).json(result);
              },
              rejected => {
                response.status(400).json("rejected");
              }
            )
            .catch(err => {
              console.log(err);
              response.status(400).json({ error: "Something happened!" });
            });
        }
      }
    } catch (err) {
      console.log(err);
      response.status(400).json({ error: "Something happened!" });
    }
  }

  async getCveId(request, response, next) {
    const { payload } = request.body;
    const yearRegex = /^\d{4}$/g;
    const statusRegex = /^(Free|Rejected|Disputed|Populated|Public|Published|Reserved|Obsolete)$/g;
    const forceRegex = /^[0-1]*$/g;
    try {
      if (payload.year) {
        if (!new RegExp(yearRegex).test(payload.year)) {
          response.status(400).json({ error: "Invalid Year" });
          return;
        }
      }
      if (payload.force) {
        if (!new RegExp(forceRegex).test(payload.force)) {
          response.status(400).json({ error: "Force value" });
          return;
        }
      }
      if (payload.status) {
        if (!new RegExp(statusRegex).test(payload.status)) {
          response.status(400).json({ error: "Invalid Status" });
          return;
        }
      }

      let cveidobject = getCVEID.getID(
        payload.count,
        payload.year,
        request,
        payload.status
      );
      var result = [];
      for (var i = 0; i < cveidobject.length; i++) {
        var cveIdObject = {
          cve_id: "",
          status: "",
          Requestor: { user_id: "", user_name: "" },
          Organization: { org_id: "", org_name: "" },
          History: "TBD"
        };
        try {
          let response = await dbOperations.saveCVE(cveidobject[i]);
          cveIdObject.cve_id = response.cveID;
          cveIdObject.status = response.cveStatus;
          cveIdObject.Requestor.user_id = response.cveRequesterUserID;
          cveIdObject.Requestor.user_name = response.cveRequesterUserName;
          cveIdObject.Organization.org_id = response.cveOrganizationUUID;
          cveIdObject.Organization.org_name = response.cveOragnizationName;

          result.push(cveIdObject);
        } catch (err) {
          response.status(400).json({ error: "Something happened!" });
        }
      }
      response.status(200).json(result);
    } catch (err) {
      console.log(err);
      response.status(400).json({ error: "Something happened!" });
    }
  }

  async setCveIdStatus(request, response, next) {
    const { ids, status } = request.body;
    const statusRegex = /^(Free|Rejected|Disputed|Populated|Public|Published|Reserved|Obsolete)$/g;
    try {
      if (status) {
        if (!new RegExp(statusRegex).test(status)) {
          response.status(400).json({ error: "Invalid Status" });
          return;
        }
      }
      var result = [];
      for (let i = 0; i < ids.length; i++) {
        try {
          let response = await dbOperations.editCveStatus(
            ids[i],
            status,
            request.userOrgUUID
          );
          result.push(response);
        } catch (err) {
          response.status(400).json({ error: "Something happened!" });
        }
      }
      response.status(200).json({ Success: true });
    } catch (err) {
      console.log(err);
      response.status(400).json({ error: "Something happened!" });
    }
  }
}
