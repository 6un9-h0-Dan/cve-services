const User = require('../../model/user')
const Cna = require('../../model/cna')
const logger = require('../../middleware/logger')
const uuidAPIKey = require('uuid-apikey')

// TODO: Pagination
// Get all cnas
async function getCnas (req, res) {
  Cna.find().exec((err, result) => {
    if (err) {
      logger.error(err.stack)
      return res.status(500).send('Internal Server Error')
    }

    result.forEach((obj) => {
      const cna = Object.assign({}, obj)._doc
      delete cna._id
    })

    logger.info('The CNAs were sent to the user.')
    return res.status(200).json(result)
  })
}

// TODO: Request parameter validation
// Get the details of a single cna using cna's shortname
async function getCna (req, res) {
  const shortName = req.params.id

  Cna.findOne()
    .byShortName(shortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      const cna = Object.assign({}, result)._doc
      delete cna._id

      logger.info('The CNA was sent to the user.')
      return res.status(200).json(cna)
    })
}

// TODO: Request parameter validation
// Get the detalis of the user using user's username
async function getUser (req, res) {
  const username = req.params.id

  User.findOne()
    .byUserName(username)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      const user = Object.assign({}, result)._doc
      delete user._id
      delete user.secret

      logger.info('The User was sent to the user.')
      return res.status(200).json(user)
    })
}

// TODO: Request body sanitation
// Creates a new cna if one doesn't exist for the specified short_name in the request body. If one exists, it updates the cna.
async function createCna (req, res) {
  const shortName = req.body.short_name
  const name = req.body.name

  if (shortName === undefined || name === undefined) {
    return res.status(400).json({ message: 'Provide the cna\'s name and short name to create the cna' })
  } else if (typeof shortName !== 'string' || typeof name !== 'string') {
    return res.status(400).json({ message: 'Wrong value type' })
  }

  const cna = {
    short_name: shortName,
    name: name
  }

  Cna.findOneAndUpdate()
    .byShortName(shortName)
    .updateOne(cna)
    .setOptions({ upsert: true })
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.upserted) {
        logger.info(cna.short_name + ' CNA was successfully created in MongoDB')
      } else {
        logger.info(cna.name + ' CNA was successfully updated in MongoDB')
      }

      const responseMessage = {
        message: shortName + ' CNA was successfully created',
        created: cna
      }

      return res.status(200).json(responseMessage)
    })
}

// TODO: Request body sanitation and parameter validation
async function updateCna (req, res) {
  const shortName = req.params.id
  const cna = {}

  if (req.body.short_name !== undefined) {
    if (typeof req.body.short_name !== 'string') {
      return res.status(400).json({ message: 'Wrong value type' })
    }

    cna.short_name = req.body.short_name
  }

  if (req.body.name !== undefined) {
    if (typeof req.body.name !== 'string') {
      return res.status(400).json({ message: 'Wrong value type' })
    }

    cna.name = req.body.name
  }

  Cna.findOneAndUpdate()
    .byShortName(shortName)
    .updateOne(cna)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.n === 0) {
        logger.info(shortName + ' CNA was not updated in MongoDB because it does not exists in the database.')
        return res.status(200).json({ message: 'The cna does not exist' })
      } else {
        logger.info(shortName + ' CNA was successfully updated in MongoDB')
      }

      const responseMessage = {
        message: 'The cna was successfully updated',
        updated: cna
      }

      return res.status(200).json(responseMessage)
    })
}

// TODO: Request body sanitation and parameter validation
// Updates a user if one exist for the specified username. If one doesn't exists, it creates a user.
async function updateUser (req, res) {
  const username = req.params.id
  const user = {}

  if (req.body.username === undefined) {
    return res.status(400).json({ message: 'Provide the user\'s username to create or update the user' })
  } else {
    if (typeof req.body.username !== 'string') {
      return res.status(400).json({ message: 'Wrong value type' })
    }

    user.username = req.body.username
  }

  if (req.body.cna_name !== undefined) {
    if (typeof req.body.cna_name !== 'string') {
      return res.status(400).json({ message: 'Wrong value type' })
    }

    user.cna_name = req.body.cna_name
  }

  if (req.body.cna_short_name !== undefined) {
    if (typeof req.body.cna_short_name !== 'string') {
      return res.status(400).json({ message: 'Wrong value type' })
    }

    user.cna_short_name = req.body.cna_short_name
  }

  if (req.body.name !== undefined) {
    if (typeof req.body.name !== 'object') {
      return res.status(400).json({ message: 'Wrong value type' })
    }

    user.name = req.body.name

    if (req.body.name.first !== undefined) {
      if (typeof req.body.name.first !== 'string') {
        return res.status(400).json({ message: 'Wrong value type' })
      }

      user.name.first = req.body.name.first
    }

    if (req.body.name.last !== undefined) {
      if (typeof req.body.name.last !== 'string') {
        return res.status(400).json({ message: 'Wrong value type' })
      }

      user.name.last = req.body.name.last
    }

    if (req.body.name.middle !== undefined) {
      if (typeof req.body.name.middle !== 'string') {
        return res.status(400).json({ message: 'Wrong value type' })
      }

      user.name.middle = req.body.name.middle
    }

    if (req.body.name.surname !== undefined) {
      if (typeof req.body.name.surname !== 'string') {
        return res.status(400).json({ message: 'Wrong value type' })
      }

      user.name.surname = req.body.name.surname
    }

    if (req.body.name.suffix !== undefined) {
      if (typeof req.body.name.suffix !== 'string') {
        return res.status(400).json({ message: 'Wrong value type' })
      }

      user.name.suffix = req.body.name.suffix
    }
  }

  const key = uuidAPIKey.create()
  user.secret = key.uuid

  User.findOneAndUpdate()
    .byUserName(username)
    .updateOne(user)
    .setOptions({ upsert: true })
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      user.secret = key.apiKey
      const responseMessage = {
        message: 'The user was successfully updated'
      }

      if (result.upserted) {
        logger.info('The user was successfully created in MongoDB')
        responseMessage.created = user
      } else {
        logger.info('The user was successfully updated in MongoDB')
        responseMessage.updated = user
      }

      logger.info('The user was updated.')
      return res.status(200).json(responseMessage)
    })
}

module.exports = {
  CNA_ALL: getCnas,
  CNA_SINGLE: getCna,
  CNA_CREATE_SINGLE: createCna,
  CNA_UPDATE_SINGLE: updateCna,
  USER_SINGLE: getUser,
  USER_UPDATE_SINGLE: updateUser
}
