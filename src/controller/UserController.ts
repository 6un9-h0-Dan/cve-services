import { NextFunction, Request, Response } from "express";
import * as jwt from "jsonwebtoken";
import { dbOperations } from "../database/db-operations";

export class UserController {
  async userAuth(request: Request, response: Response, next: NextFunction) {
    try {
      const { userEmail, userPass } = request["body"];
      dbOperations.userAuthentication(userEmail, userPass).then(
        async resolved => {
          const {
            userUUID,
            userEmail,
            userUName,
            userOrganizationUUID
          } = resolved;
          const token = jwt.sign(
            {
              userUUID,
              userEmail,
              userUName,
              userOrganizationUUID
            },
            process.env.SECRET_WORD,
            {
              expiresIn: 43200 // expires in 12 hours. This should be changed when this moves to production. Should also be moved to env document.
            }
          );
          await dbOperations.createJWTRecord(token);
          response.status(200).json({ auth: "true", token });
        },
        rejected => {
          response
            .status(400)
            .json({ auth: "false", token: null, error: rejected });
        }
      );
    } catch (err) {
      response.status(400).json({ auth: "false", token: null });
    }
  }
}
