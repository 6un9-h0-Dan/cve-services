import { dbOperations } from "../database/db-operations";
export class CNA {
  /**
 * @api {post} /register-user Register New User
 * @apiName Register New User
 * @apiGroup CNA
 * @apiVersion  0.0.0
 * @apiHeader Signature RSA Signature.
 * @apiParamExample {json} Request-Example:
content-type: application/json
{
  "Payload": {
    "userPublicKey": "userPublicKey",
    "userType": "VENDOR| RESEARCHER| PUBLISHER",
    "userHardQuota": 100,
    "userSoftQuota":50,
    "userDescription": "user description",
    "userGithubID": "userGithubID",
    "userFName": "userFName",
    "userLName" : "userLName",
    "userEmail" : "Optional Email",
    "userURL": "Optional userURL",
    "userGPGKeys": "Optional userGPGKeys"
  },
  "userUUID": CNAUUID
}

 *@apiSuccessExample Success-Response:
 *HTTP/1.1 200 OK
{
  "userUUID": UUID,
  "message": "user created"
}
 * @apiErrorExample Error-Response 1:
 *HTTP/1.1 400 Bad Request
{
  "error": "error message"
}
 * @apiErrorExample Error-Response 2:
 *HTTP/1.1 500 Bad Request
{
  "error": "Failed to validate key."
}
 */

  async registerUser(request, response, next) {
    const { payload, userUUID } = request.body;
    payload.userCNAUUID = userUUID;
    payload.userCNAName = request.cnaOrgName;
    try {
      let newUUID = await dbOperations.createUser(payload);
      response.status(200).json({ userUUID: newUUID, message: "user created" });
    } catch (e) {
      response.status(400).json({ error: e });
    }
  }

  /**
 * @api {get} /get-all-cna Get All Active CNA's
 * @apiName Get All CNA's
 * @apiVersion  0.0.0
 * @apiGroup CNA
 *
 * @apiSuccessExample Success-Response:
 *HTTP/1.1 200 OK
  {
  "cnas": [
      {
          "cnaUUID": "09477123-85be-4bb7-b6b5-aafa018af770",
          "cnaName": "CNA Name",
          "cnaDescription": "test description",
          "cnaType": "CNAType",
          "cnaHardQuota": 100,
          "cnaSoftQuota": 50,
          "cnaPublicKey": "-----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtN FOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76 xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4 gwQco1KRMDSmXSMkDwIDAQAB -----END PUBLIC KEY-----",
          "cnaWebSite": "CNAWebsite",
          "cnaEmail": CNAEmail,
          "cnaGPGKey": CNAGPGKey
      }
  ]
}
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 400 Bad Request
    {
        "error": "error message"
    }
 */
  async getAllCNA(request, response, next) {
    try {
      let cnas = await dbOperations.getAllCNA();
      response.status(200).json({ cnas: cnas });
    } catch (e) {
      response.status(400).json({ error: e });
    }
  }
}
