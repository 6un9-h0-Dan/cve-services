import { dbOperations } from '../database/db-operations';
import { RESPONSE_ERROR_MESSAGE } from '../constants';
export class CNA {
    /**
 * @api {post} /register-user Register New User
 * @apiName Register New User
 * @apiGroup CNA
 * @apiVersion  0.0.0
 * @apiHeader Signature RSA Signature.
 * @apiParamExample {json} Request-Example:
content-type: application/json
{
  "payload": {
    "userPublicKey": "userPublicKey",
    "userType": "VENDOR| RESEARCHER| PUBLISHER",
    "userHardQuota": 100,
    "userSoftQuota":50,
    "userDescription": "user description",
    "userGithubID": "userGithubID",
    "userFName": "userFName",
    "userLName" : "userLName",
    "userEmail" : "Optional Email",
    "userURL": "Optional userURL",
    "userGPGKeys": "Optional userGPGKeys"
  },
  "userUUID": CNAUUID
}

 *@apiSuccessExample Success-Response:
 *HTTP/1.1 200 OK
{
  "userUUID": UUID,
  "message": "user created"
}
 * @apiErrorExample Error-Response 1:
 *HTTP/1.1 400 Bad Request
{
  "error": "error message"
}
 * @apiErrorExample Error-Response 2:
 *HTTP/1.1 500 Bad Request
{
  "error": "Failed to validate key."
}
 */

    public async registerUser(request, response, next) {
        const { payload, userUUID } = request.body;
        payload.userCNAUUID = userUUID;
        payload.userCNAName = request.cnaOrgName;
        try {
            let newUUID = await dbOperations.createUser(payload);
            response.status(200).json({ userUUID: newUUID, message: 'user created' });
        } catch (e) {
            console.log(e);
            response.status(400).json({ error: RESPONSE_ERROR_MESSAGE[400] });
        }
    }

    public async deactivateUser(request, response, next) {
        const { payload } = request.body;
        try {
            await dbOperations.deactivateUser(payload.userUUID, request.userData.cnaUUID);
            response.status(200).json({ deactivate: true });
        } catch (e) {
            console.log(e);
            response.status(400).json({ error: RESPONSE_ERROR_MESSAGE[400] });
        }
    }

    public async updateUser(request, response, next) {
        const { payload } = request.body;
        try {
            await dbOperations.updateUser(payload.userUUID, request.userData.cnaUUID, payload);
            response.status(200).json({ updated: true });
        } catch (e) {
            console.log(e);
            response.status(400).json({ error: RESPONSE_ERROR_MESSAGE[400] });
        }
    }
}
