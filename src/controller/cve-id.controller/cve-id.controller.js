require('dotenv').config()
const CveId = require('../../model/cve-id')
const CveIdRange = require('../../model/cve-id-range')
const Org = require('../../model/org')
const logger = require('../../middleware/logger')
const CONSTANTS = require('../../constants')
const util = require('../../utils/utils')

async function getCveId (req, res) {
  const id = req.params.id
  const cnaShortName = req.header('CVE-API-CNA')

  CveId.findOne()
    .byCveId(id)
    .exec(async (err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        return res.status(404).json({ message: id + ' not found' })
      }

      const isSecretariat = await util.isSecretariat(cnaShortName)
      if (cnaShortName !== result.owning_cna && !isSecretariat) {
        if (result.state === 'RESERVED') {
          const cveId = Object.assign({}, result)._doc
          delete cveId._id

          logger.info({ message: id + ' is RESERVED. A 404 status was sent to the requester.', cveId: result })
          return res.status(404).json({ message: id + ' not found' })
        }

        const cveId = {
          cve_id: result.cve_id,
          cve_year: result.cve_year,
          state: result.state,
          owning_cna: result.owning_cna
        }

        logger.info({ message: id + ' record was sent to the user.', cveId: cveId })
        return res.status(200).json(cveId)
      } else {
        const cveId = Object.assign({}, result)._doc
        delete cveId._id

        logger.info({ message: id + ' record was sent to the user.', cveId: cveId })
        return res.status(200).json(cveId)
      }
    })
}

async function getFilteredCveId (req, res) {
  let state
  let year
  const timestamps = {
    timeReserved: [],
    dateOperator: []
  }
  let returned = false

  Object.keys(req.query).forEach(k => {
    const key = k.toLowerCase()

    if (!returned) {
      if (key === 'state') {
        state = req.query.state.replace(/["']/g, '').toUpperCase()
      } else if (key === 'cve_id_year') {
        year = req.query.cve_id_year.replace(/["']/g, '')
      } else if (key === 'time_reserved.lt') {
        if (Array.isArray(req.query['time_reserved.lt'])) {
          returned = true
          return res.status(400).json({ message: 'Only one query parameter of \'' + key + '\' is allowed.' })
        }

        timestamps.dateOperator.push('lt')
        timestamps.timeReserved.push(req.query['time_reserved.lt'].replace(/["']/g, ''))
      } else if (key === 'time_reserved.gt') {
        if (Array.isArray(req.query['time_reserved.gt'])) {
          returned = true
          return res.status(400).json({ message: 'Only one query parameter of \'' + key + '\' is allowed.' })
        }

        timestamps.dateOperator.push('gt')
        timestamps.timeReserved.push(req.query['time_reserved.gt'].replace(/["']/g, ''))
      } else {
        returned = true
        return res.status(400).json({ message: 'Invalid query parameter \'' + key + '\'' })
      }
    }
  })

  // verify format of timestamps
  for (let i = 0; i < timestamps.timeReserved.length; i++) {
    let value = timestamps.timeReserved[i].match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/)

    if (!returned) {
      if (value) {
        timestamps.timeReserved[i] = new Date(`${value[0]}.000+00:00`)
      } else {
        value = timestamps.timeReserved[i].match(/^\d{4}-\d{2}-\d{2}$/)

        if (value) {
          timestamps.timeReserved[i] = new Date(`${value[0]}T00:00:00.000+00:00`)
        } else {
          returned = true
          return res.status(400).json({ message: 'Timestamp query parameter only supports formats "YYYY-MM-DDTHH:mm:ss" or "YYYY-MM-DD"' })
        }
      }
    }
  }

  const query = {
    owning_cna: req.header('CVE-API-CNA')
  }

  if (year) {
    query.cve_year = year
  }

  if (state) {
    query.state = state
  }

  if (timestamps.timeReserved.length > 0) {
    query.reserved = {}

    for (let i = 0; i < timestamps.timeReserved.length; i++) {
      if (timestamps.dateOperator[i] === 'lt') {
        query.reserved.$lt = timestamps.timeReserved[i]
      } else {
        query.reserved.$gt = timestamps.timeReserved[i]
      }
    }
  }

  if (!returned) {
    CveId.find(query)
      .exec((err, result) => {
        if (err) {
          logger.error(err.stack)
          return res.status(500).send('Internal Server Error')
        }

        if (!result || result.length === 0) {
          return res.status(404).json({ message: 'No CVE IDs were found for the specified query parameters.' })
        }

        result.forEach((obj) => {
          const cna = Object.assign({}, obj)._doc
          delete cna._id
        })

        logger.info({ message: 'The CVEs were sent to the user.' })
        return res.status(200).json(result)
      })
  }
}

async function modifyCveId (req, res) {
  const id = req.params.id
  const cnaShortName = req.header('CVE-API-CNA')
  let state = null
  let newCnaShortname = null

  const isSecretariat = await util.isSecretariat(cnaShortName)
  if (!isSecretariat) {
    logger.info({ message: id + ' cannot be updated by other than the secretariat.' })
    return res.status(403).json({ message: id + ' cannot be updated by other than the secretariat.' })
  }

  if (req.query.state) {
    state = req.query.state.toUpperCase()

    if (state === 'RESERVED') {
      return res.status(400).json({ message: 'Cannot change the state to RESERVED.' })
    } else if (state !== 'PUBLIC' && state !== 'REJECT') {
      return res.status(400).json({ message: 'Invalid CVE state.' })
    }
  }

  if (req.query.cna) {
    newCnaShortname = req.query.cna
  }

  CveId.findOne()
    .byCveId(id)
    .exec(async (err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        return res.status(404).json({ message: id + ' not found' })
      }

      const updatedCveId = Object.assign({}, result)._doc

      if (state) {
        updatedCveId.state = state
      }

      if (newCnaShortname) {
        const result = await Org.findOne().byShortName(newCnaShortname)

        if (!result) {
          logger.info(id + ' could not be reasigned to ' + newCnaShortname + ' in MongoDB because it does not exist.')
          return res.status(404).json({ message: newCnaShortname + ' CNA does not exist.' })
        }

        updatedCveId.owning_cna = newCnaShortname
      }

      delete updatedCveId._id
      delete updatedCveId.time

      CveId.findOneAndUpdate()
        .byCveId(id)
        .updateOne(updatedCveId)
        .exec(async err => {
          if (err) {
            logger.error(err.stack)
            return res.status(500).send('Internal Server Error')
          }

          const result = await CveId.findOne().byCveId(id)
          const cveId = Object.assign({}, result)._doc
          delete cveId._id

          const responseMessage = {
            message: id + ' was successfully updated.',
            updated: cveId
          }

          logger.info(JSON.stringify(responseMessage))
          return res.status(200).json(responseMessage)
        })
    })
}

async function reserveCveId (req, res) {
  const requester = req.header('CVE-API-SUBMITTER')
  const cnaShortName = req.header('CVE-API-CNA')
  let returned = false
  let batchType
  let amount
  let shortName
  let year
  let cveId

  Object.keys(req.query).forEach(k => {
    const key = k.toLowerCase()

    if (key === 'amount') {
      amount = req.query.amount.replace(/["']/g, '')
    } else if (key === 'batch_type') {
      batchType = req.query.batch_type.replace(/["']/g, '').toLowerCase()
    } else if (key === 'short_name') {
      shortName = req.query.short_name.replace(/["']/g, '').toLowerCase()
    } else if (key === 'cve_year') {
      year = req.query.cve_year.replace(/["']/g, '')
    } else {
      if (!returned) {
        returned = true
        return res.status(400).json({ message: 'Invalid query parameter \'' + key + '\'' })
      }
    }
  })

  const isSecretariat = await util.isSecretariat(cnaShortName)
  if (cnaShortName !== shortName && !isSecretariat && !returned) {
    returned = true
    return res.status(403).json({ message: 'CVE IDs can only be reserved by the owning CNA or by the Secretariat.' })
  }

  if (shortName === undefined && !returned) {
    returned = true
    return res.status(400).json({ message: 'Provide the cna\'s short name to reserve CVE IDs.' })
  }

  if (year === undefined && !returned) {
    returned = true
    return res.status(400).json({ message: 'Provide a year to reserve CVE IDs.' })
  }

  if (amount === undefined && !returned) {
    returned = true
    return res.status(400).json(CONSTANTS.NO_AMOUNT)
  }

  if (amount <= 0 && !returned) {
    returned = true
    return res.status(404).json(CONSTANTS.INVALID_AMOUNT)
  }

  if (amount > 1 && batchType === undefined && !returned) {
    returned = true
    return res.status(400).json({ message: 'A batch type (i.e. sequential, non-sequential) must be specified when allocating more than one CVE ID.' })
  }

  let result = await Org.findOne().byShortName(shortName)
  if (!result && !returned) {
    returned = true
    logger.info(shortName + ' CNA does not exist.')
    return res.status(404).json({ message: shortName + ' CNA does not exist.' })
  }

  let payload

  if (!returned) {
    payload = {
      id_quota: result.policies.id_quota
    }

    result = await CveId.countDocuments({ owning_cna: shortName, cve_year: year, state: 'RESERVED' })
    payload.total_reserved = result
    payload.available = (payload.id_quota - payload.total_reserved)
  }

  if (!returned && payload.available < 0) {
    returned = true
    logger.error({ message: ' An error occurred: Total reserved exceeded id_quota.', payload: payload })
    return res.status(400).json({ message: 'Total reserved exceeded id_quota, contact an administrator.' })
  }

  if (!returned && amount > payload.available) {
    returned = true
    CONSTANTS.OVER_ID_QUOTA.details = payload
    return res.status(404).json(CONSTANTS.OVER_ID_QUOTA)
  }

  if (!returned) {
    // priority
    if (batchType === undefined) {
      await priorityReservation(year, amount, cveId, shortName, cnaShortName, requester, payload.available, res)
    } else if (batchType === 'sequential') {
      await sequentialReservation(year, amount, cveId, shortName, cnaShortName, requester, payload.available, res)
    } else if (batchType === 'non-sequential' || batchType === 'nonsequential') {
      await nonSequentialReservation(year, amount, cveId, shortName, cnaShortName, requester, payload.availableIds, res)
      return res.status(200).json({ message: batchType })
    } else {
      return res.status(400).json({ message: 'Invalid value for query parameter \'batch_type\'' })
    }
  }
}

async function priorityReservation (year, amount, cveId, shortName, cnaShortName, requester, availableIds, res) {
  let result = await CveIdRange.findOne({ cve_year: year })
  let isFull = false

  // Cve Id Range for 'year' exists
  if (result) {
    const endRange = parseInt(result.ranges.priority.end)
    result = await CveIdRange.findOneAndUpdate({ cve_year: year, 'ranges.priority.top_id': { $lt: endRange } }, { $inc: { 'ranges.priority.top_id': amount } }, { new: true })

    // priority id block is full, reserve id in sequential block
    if (!result) {
      isFull = true
      logger.info('Priority id block is full for year ' + year + ', reserving id in sequential block')
      await sequentialReservation(year, amount, cveId, shortName, cnaShortName, requester, availableIds, res)
    }
  } else {
    logger.info('CVE IDs for year ' + year + ' cannot be reserved at this time.')
    return res.status(403).json({ message: 'CVE IDs for year ' + year + ' cannot be reserved at this time.' })
  }

  if (!isFull) {
    const id = generateIds(year, result.ranges.priority, amount)

    cveId = new CveId()
    cveId.cve_id = id[0]
    cveId.cve_year = year
    cveId.state = 'RESERVED'
    cveId.owning_cna = shortName // the org who gets assigned the reserved CVE IDs
    cveId.reserved = Date.now()
    cveId.requested_by = {
      cna: cnaShortName, // the org who requested the CVE IDs
      user: requester
    }

    // Create a CveId document
    await CveId.findOneAndUpdate().byCveId(id).updateOne(cveId).setOptions({ upsert: true })

    res.header('CVE-API-REMAINING-QUOTA', availableIds - amount)
    logger.info({ message: 'A priority CVE ID was reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_id: id })
    return res.status(200).json({ message: 'The following CVE IDs were reserved.', reserved: id })
  }
}

async function sequentialReservation (year, amount, cveId, shortName, cnaShortName, requester, availableIds, res) {
  let result = await CveIdRange.findOne({ cve_year: year })

  // Cve Id Range for 'year' exists
  if (result) {
    const endRange = parseInt(result.ranges.general.end)
    result = await CveIdRange.findOneAndUpdate({ cve_year: year, 'ranges.general.top_id': { $lt: endRange } }, { $inc: { 'ranges.general.top_id': amount } }, { new: true })

    // The cve id block is full
    if (!result) {
      logger.error('The cve id block is full for year ' + year + '. No more ids can be reserved at this time.')
      return res.status(403).json({ message: 'The cve id block is full for year ' + year + '. Please contact the Secretariat.' })
    }
  } else {
    logger.info('CVE IDs for year ' + year + ' cannot be reserved at this time.')
    return res.status(403).json({ message: 'CVE IDs for year ' + year + ' cannot be reserved at this time.' })
  }

  const ids = generateIds(year, result.ranges.general, amount)
  const cveIdDocuments = []
  // return res.status(200).json({ ids: ids })

  ids.forEach(id => {
    cveId = new CveId()
    cveId.cve_id = id
    cveId.cve_year = year
    cveId.state = 'RESERVED'
    cveId.owning_cna = shortName // the org who gets assigned the reserved CVE IDs
    cveId.reserved = Date.now()
    cveId.requested_by = {
      cna: cnaShortName, // the org who requested the CVE IDs
      user: requester
    }

    cveIdDocuments.push(cveId)
  })

  // Create multiple CveId documents
  await CveId.insertMany(cveIdDocuments)

  res.header('CVE-API-REMAINING-QUOTA', availableIds - amount)
  logger.info({ message: 'Sequential CVE IDs were reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_ids: ids })
  return res.status(200).json({ message: 'The following CVE IDs were reserved.', reserved: ids })
}

function generateIds (year, ranges, amount) {
  const start = ranges.top_id - amount + 1
  const end = ranges.top_id
  const ids = []

  for (let i = start; i < end + 1; i++) {
    ids.push('CVE-' + year + '-' + String(i).padStart(4, '0'))
  }

  return ids
}

async function nonSequentialReservation (year, amount, cveId, shortName, cnaShortName, requester, availableIds, res) {
  //
}

async function createCveIdRange (req, res) {
  const year = req.params.year
  const cnaShortName = req.header('CVE-API-CNA')

  const isSecretariat = await util.isSecretariat(cnaShortName)
  if (!isSecretariat) {
    logger.info({ message: 'The Cve Id Range cannot be created by other than the secretariat.' })
    return res.status(403).json({ message: 'The Cve Id Range for year ' + year + ' cannot be created by other than the secretariat.' })
  }

  const result = await CveIdRange.findOne({ cve_year: year })

  if (result) {
    logger.info('CVE Id Range document for year ' + year + ' already exists.')
    return res.status(400).json({ message: 'CVE Id Range document for year ' + year + ' was not created because it already exists.' })
  }

  const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
  defaultDoc.cve_year = year
  await CveIdRange.findOneAndUpdate({ cve_year: year }, defaultDoc, { upsert: true })

  logger.info('CVE Id Range document for year ' + year + ' was created.')
  return res.status(200).json({ message: 'CVE Id Range document for year ' + year + ' was created.' })
}

module.exports = {
  CVEID_GET_SINGLE: getCveId,
  CVEID_RESERVE: reserveCveId,
  CVEID_GET_FILTER: getFilteredCveId,
  CVEID_STATE_REASIGN_SINGLE: modifyCveId,
  CVEID_RANGE_CREATE: createCveIdRange
}
