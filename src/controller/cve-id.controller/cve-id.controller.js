
require('dotenv').config()
const Cve = require('../../model/cve')
const Org = require('../../model/org')
const logger = require('../../middleware/logger')

async function getCveId (req, res) {
  const id = req.params.id
  const cnaShortName = req.header('CVE-API-CNA')

  Cve.findOne()
    .byCveId(id)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        return res.status(404).json({ message: id + ' not found' })
      }

      if (cnaShortName !== result.owning_cna && cnaShortName !== process.env.SECRETARIAT) {
        if (result.cve.CVE_data_meta.STATE.toUpperCase() === 'RESERVED') {
          const cveId = Object.assign({}, result)._doc
          delete cveId._id
          cveId.state = cveId.cve.CVE_data_meta.STATE
          delete cveId.cve

          logger.info({ message: id + ' is RESERVED', cveId: result })
          return res.status(404).json({ message: id + ' is RESERVED' })
        } else {
          const cveId = {
            cve_id: result.cve_id,
            cve_year: result.cve_year,
            owning_cna: result.owning_cna,
            state: result.cve.CVE_data_meta.STATE
          }

          logger.info({ message: id + ' record was sent to the user.', cveId: cveId })
          return res.status(200).json(cveId)
        }
      } else {
        const cveId = Object.assign({}, result)._doc
        delete cveId._id
        cveId.state = cveId.cve.CVE_data_meta.STATE
        delete cveId.cve

        logger.info({ message: id + ' record was sent to the user.', cveId: cveId })
        return res.status(200).json(cveId)
      }
    })
}

async function getFilteredCveId (req, res) {
  let state
  let year
  const timestamps = {
    timeCreated: [],
    dateOperator: []
  }

  Object.keys(req.query).forEach(key => {
    if (key === 'state') {
      state = req.query.state.replace(/["']/g, '')
    } else if (key === 'cve_id_year') {
      year = req.query.cve_id_year.replace(/["']/g, '')
    } else if (key === 'time_created.lt') {
      if (Array.isArray(req.query['time_created.lt'])) {
        return res.status(400).json({ message: 'Only one query parameter of \'' + key + '\' is allowed.' })
      }

      timestamps.dateOperator.push('lt')
      timestamps.timeCreated.push(req.query['time_created.lt'].replace(/["']/g, ''))
    } else if (key === 'time_created.gt') {
      if (Array.isArray(req.query['time_created.gt'])) {
        return res.status(400).json({ message: 'Only one query parameter of \'' + key + '\' is allowed.' })
      }

      timestamps.dateOperator.push('gt')
      timestamps.timeCreated.push(req.query['time_created.gt'].replace(/["']/g, ''))
    } else {
      return res.status(400).json({ message: 'Invalid query parameter \'' + key + '\'' })
    }
  })

  for (let i = 0; i < timestamps.timeCreated.length; i++) {
    let value = timestamps.timeCreated[i].match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/)

    if (value) {
      timestamps.timeCreated[i] = new Date(`${value[0]}.000+00:00`)
    } else {
      value = timestamps.timeCreated[i].match(/^\d{4}-\d{2}-\d{2}$/)

      if (value) {
        timestamps.timeCreated[i] = new Date(`${value[0]}T00:00:00.000+00:00`)
      } else {
        return res.status(400).json({ message: 'Timestamp query parameter only supports formats "YYYY-MM-DDTHH:mm:ss" or "YYYY-MM-DD"' })
      }
    }
  }

  const query = {
    owning_cna: req.header('CVE-API-CNA')
  }

  if (year) {
    query.cve_year = year
  }

  if (state) {
    query['cve.CVE_data_meta.STATE'] = state.toUpperCase()
  }

  if (timestamps.timeCreated.length > 0) {
    query['time.created'] = {}

    for (let i = 0; i < timestamps.timeCreated.length; i++) {
      if (timestamps.dateOperator[i] === 'lt') {
        query['time.created'].$lt = timestamps.timeCreated[i]
      } else {
        query['time.created'].$gt = timestamps.timeCreated[i]
      }
    }
  }

  Cve.find(query)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result || result.length === 0) {
        return res.status(404).json({ message: 'No CVEs were found for the specified query parameters.' })
      }

      result.forEach((obj) => {
        const cna = Object.assign({}, obj)._doc
        delete cna._id
      })

      logger.info({ message: 'The CVEs were sent to the user.' })
      return res.status(200).json(result)
    })
}

async function modifyCveId (req, res) {
  const id = req.params.id
  const cnaShortName = req.header('CVE-API-CNA')
  let state = null
  let newCnaShortname = null

  if (req.query.state) {
    if (req.query.state.toUpperCase() === 'RESERVED') {
      return res.status(400).json({ message: 'Cannot change the state to RESERVED.' })
    }

    state = req.query.state.toUpperCase()
  }

  if (req.query.cna) {
    newCnaShortname = req.query.cna
  }

  Cve.findOne()
    .byCveId(id)
    .exec(async (err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        return res.status(404).json({ message: id + ' not found' })
      }

      if (cnaShortName !== process.env.SECRETARIAT) {
        logger.info({ message: id + ' cannot be updated by other than the secretariat.' })
        return res.status(403).json({ message: id + ' cannot be updated by other than the secretariat.' })
      }

      const updatedCveId = Object.assign({}, result)._doc
      delete updatedCveId._id
      delete updatedCveId.time

      if (state) {
        updatedCveId.cve.CVE_data_meta.STATE = state
      }

      if (newCnaShortname) {
        const result = await Org.findOne().byShortName(newCnaShortname)

        if (!result) {
          logger.info(id + ' could not be reasigned to ' + newCnaShortname + ' in MongoDB because it does not exist.')
          return res.status(404).json({ message: newCnaShortname + ' CNA does not exist.' })
        }

        updatedCveId.owning_cna = newCnaShortname

        if (state === 'PUBLIC') {
          updatedCveId.cve.containers.CNA.provider_data_meta.ID = result.UUID
        }
      }

      Cve.findOneAndUpdate()
        .byCveId(id)
        .updateOne(updatedCveId)
        .exec(async err => {
          if (err) {
            logger.error(err.stack)
            return res.status(500).send('Internal Server Error')
          }

          const result = await Cve.findOne().byCveId(id)
          const cveId = Object.assign({}, result)._doc
          delete cveId._id

          const responseMessage = {
            message: id + ' was successfully updated.',
            updated: cveId
          }

          logger.info(JSON.stringify(responseMessage))
          return res.status(200).json(responseMessage)
        })
    })
}

module.exports = {
  CVEID_GET_SINGLE: getCveId,
  CVEID_GET_FILTER: getFilteredCveId,
  CVEID_STATE_REASIGN_SINGLE: modifyCveId
}
