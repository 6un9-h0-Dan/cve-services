const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./cve-id.controller')
const { check, validationResult } = require('express-validator')
const { parseGetParams, parsePostParams } = require('./cve-id.middleware')

const CHOICES = ['REJECT', 'PUBLIC', 'RESERVED']

router.get('/cve-id',
        mw.validateUser,
        check(['state']).isString().trim().escape().customSanitizer(val => {return val.toUpperCase()}).isIn(CHOICES),
        check(['cve_id_year']).isNumeric(),
        check(['time_reserved.lt']).isString().trim().escape().customSanitizer(val => {return toDate(val)}).not().isEmpty(),
        check(['time_reserved.gt']).isString().trim().escape().customSanitizer(val => {return toDate(val)}).not().isEmpty(),
        parseError,
        parseGetParams,
        controller.CVEID_GET_FILTER)
router.post('/cve-id',
        mw.validateUser,
        mw.onlyCnas,
        check(['amount']).isInt(),
        check(['batch_type']).optional().isString().trim().escape().customSanitizer(val => {return val.toLowerCase()}),
        check(['short_name']).isString().trim().escape(),
        check(['cve_year']).isNumeric(),
        parseError,
        parsePostParams,
        controller.CVEID_RESERVE)
router.get('/cve-id/:id',
        mw.validateUser,
        check(['id']).isAlphanumeric().trim().escape(),
        parseError,
        parseGetParams,
        controller.CVEID_GET_SINGLE)
router.post('/cve-id/:id',
        mw.onlySecretariat,
        mw.validateUser,
        check(['id']).isAlphanumeric().trim().escape(),
        check(['state']).isString().trim().escape().customSanitizer(val => {return val.toUpperCase()}).isIn(CHOICES),
        check(['cna']).isString().trim().escape(),
        parseError,
        parsePostParams,
        controller.CVEID_STATE_REASIGN_SINGLE)
router.post('/cve-id-range/:year',
        mw.onlySecretariat,
        mw.validateUser,
        check(['year']).isNumeric(),
        parseError,
        parsePostParams,
        controller.CVEID_RANGE_CREATE)

function toDate(val) {
    let value = val.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/)
    let result
    if(value) {
        result = new Date(`${value[0]}.000+00:00`)
    } else {
        value = val.match(/^\d{4}-\d{2}-\d{2}$/)
        if(value) {
            result = new Date(`${value[0]}T00:00:00.000+00:00`)
        } else {
            result = null
        }
    }
    return result
}

function parseError(req, res, next) {
    const errors = validationResult(req);
    if(!errors.isempty()) {
        res.status(400).json({ error:'BAD_INPUT', message:'Parameters were invalid', details: errors.array()})
    }
    next();
}

module.exports = {
    router
}
