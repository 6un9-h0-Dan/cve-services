const { validationResult } = require('express-validator')
const errors = require('./error')
const error = new errors.CveIdControllerError()

function parseGetParams (req, res, next) {
  if (!('query' in req.ctx)) {
    req.ctx.query = {}
  }
  if (!('params' in req.ctx)) {
    req.ctx.params = {}
  }
  if ('id' in req.params) {
    req.ctx.params.id = req.params.id
  }
  if ('state' in req.query) {
    req.ctx.query.state = req.query.state
  }
  if ('cve_id_year' in req.query) {
    req.ctx.query.cve_id_year = req.query.cve_id_year
  }
  if ('time_reserved.lt' in req.query) {
    req.ctx.query['time_reserved.lt'] = req.query['time_reserved.lt']
  }
  if ('time_reserved.gt' in req.query) {
    req.ctx.query['time_reserved.gt'] = req.query['time_reserved.gt']
  }
  next()
}

function parsePostParams (req, res, next) {
  if (!('query' in req.ctx)) {
    req.ctx.query = {}
  }
  if (!('params' in req.ctx)) {
    req.ctx.params = {}
  }
  if ('state' in req.query) {
    req.ctx.query.state = req.query.state
  }
  if ('id' in req.params) {
    req.ctx.params.id = req.params.id
  }
  if ('year' in req.params) {
    req.ctx.params.year = req.params.year
  }
  if ('amount' in req.query) {
    req.ctx.query.amount = req.query.amount
  }
  if ('batch_type' in req.query) {
    req.ctx.query.batch_type = req.query.batch_type
  }
  if ('short_name' in req.query) {
    req.ctx.query.short_name = req.query.short_name
  }
  if ('cve_year' in req.query) {
    req.ctx.query.cve_year = req.query.cve_year
  }
  if ('cna' in req.query) {
    req.ctx.query.cna = req.query.cna
  }
  next()
}

// Sanitizer for dates
function toDate (val) {
  let value = val.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/)
  let result
  if (value) {
    result = new Date(`${value[0]}.000+00:00`)
  } else {
    value = val.match(/^\d{4}-\d{2}-\d{2}$/)
    if (value) {
      result = new Date(`${value[0]}T00:00:00.000+00:00`)
    } else {
      result = null
    }
  }
  return result
}

function parseError (req, res, next) {
  const err = validationResult(req)
  if (!err.isEmpty()) {
    return res.status(400).json(error.badInput(err.array()))
  }
  next()
}

module.exports = {
  parseGetParams,
  parsePostParams,
  parseError,
  toDate
}
