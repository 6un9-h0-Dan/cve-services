import { dbOperations } from '../../../database/db-operations';
//TODO: For now filtering only works for status
export const getCvsInfo = async (req, res) => {
    const { ids, filter } = req.body;
    const { userOrgUUID } = req;
    const filterRegex = /^(Free|Rejected|Disputed|Populated|Public|Published|Reserved|Obsolete)$/g; //Filter for status only
    var filterFlag = false;
    var result = [];
    try {
        if (filter) {
            if (!new RegExp(filterRegex).test(filter)) {
                res.status(400).json({ error: 'Invalid Filter' });
                return;
            } else {
                filterFlag = true;
            }
        }
        if (ids) {
            var holdResponse = [];
            for (var i = 0; i < ids.length; i++) {
                try {
                    let response = await dbOperations.getCveId(ids[i], req.userOrgUUID);
                    holdResponse.push(response);
                } catch (err) {
                    res.status(400).json({ error: 'Something happened!' });
                }
            }
            for (var i = 0; i < holdResponse.length; i++) {
                var cveIdObject = {
                    cve_id: '',
                    status: '',
                    Requestor: { user_id: '', user_name: '' },
                    Organization: { org_id: '', org_name: '' },
                    History: 'TBD',
                };
                cveIdObject.cve_id = holdResponse[i][0].cveID;
                cveIdObject.status = holdResponse[i][0].cveStatus;
                cveIdObject.Requestor.user_id = holdResponse[i][0].cveRequesterUserID;
                cveIdObject.Organization.org_id = holdResponse[i][0].cveOrganizationUUID;
                cveIdObject.Requestor.user_name = req.userUName;
                result.push(cveIdObject);
            }
            res.status(200).json(result);
        } else {
            if (filterFlag) {
                dbOperations
                    .getAllOrgCvesFilter(userOrgUUID, filter)
                    .then(
                        response => {
                            for (var i = 0; i < response.length; i++) {
                                var cveIdObject = {
                                    cve_id: '',
                                    status: '',
                                    Requestor: { user_id: '', user_name: '' },
                                    Organization: { org_id: '', org_name: '' },
                                    History: 'TBD',
                                };
                                cveIdObject.cve_id = response[i].cveID;
                                cveIdObject.status = response[i].cveStatus;
                                cveIdObject.Requestor.user_id = response[i].cveRequesterUserID;
                                cveIdObject.Organization.org_id = response[i].cveOrganizationUUID;
                                cveIdObject.Requestor.user_name = req.userUName;
                                result.push(cveIdObject);
                            }
                            res.status(200).json(result);
                        },
                        rejected => {
                            res.status(400).json(rejected);
                        },
                    )
                    .catch(err => {
                        console.log(err);
                        res.status(400).json({ error: 'Something happened!' });
                    });
            } else {
                dbOperations
                    .getAllOrgCvesNoFilter(userOrgUUID)
                    .then(
                        response => {
                            console.log(response);
                            for (var i = 0; i < response.length; i++) {
                                var cveIdObject = {
                                    cve_id: '',
                                    status: '',
                                    Requestor: { user_id: '', user_name: '' },
                                    Organization: { org_id: '', org_name: '' },
                                    History: 'TBD',
                                };
                                cveIdObject.cve_id = response[i].cveID;
                                cveIdObject.status = response[i].cveStatus;
                                cveIdObject.Requestor.user_id = response[i].cveRequesterUserID;
                                cveIdObject.Organization.org_id = response[i].cveOrganizationUUID;
                                cveIdObject.Requestor.user_name = req.userUName;
                                result.push(cveIdObject);
                            }
                            res.status(200).json(result);
                        },
                        rejected => {
                            res.status(400).json(rejected);
                        },
                    )
                    .catch(err => {
                        console.log(err);
                        res.status(400).json({ error: 'Something happened!' });
                    });
            }
        }
    } catch (err) {
        console.log(err);
        res.status(400).json({ error: 'Something happened!' });
    }
};
