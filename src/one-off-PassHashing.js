const express = require('express')
const config = require('config')
const mongoose = require('mongoose')
const app = express()
const logger = require('./middleware/logger')
const User = require('./model/user')
const argon2 = require('argon2')
const uuidAPIKey = require('uuid-apikey')
const errors = require('./utils/error')
const error = new errors.IDRError()
require('dotenv').config() // This enables us to read from the .env file.

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
// Make mongoose connection available globally
global.mongoose = mongoose

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
  logger.error(error.connectionError())
})

db.once('open', async () => {
  // we're connected!
  logger.info(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)

  const names = []
  const collections = await db.db.listCollections().toArray()
  collections.forEach(collection => {
    names.push(collection.name)
  })

  if (names.includes('User')) {
    // hash the secret
    await secretToHash()
  }

  // close MongoDB connection
  mongoose.connection.close()
})

// Populating User collection
async function secretToHash () {
  const userData = await User.find({})

  for (let i = 0; i < userData.length; i++) {
    const user = userData[i]

    if (uuidAPIKey.isUUID(user.secret)) {
      const apiKey = uuidAPIKey.toAPIKey(user.secret)
      user.secret = await argon2.hash(apiKey)

      await User.findOneAndUpdate({ UUID: user.UUID }, user, { new: true })
    } else {
      logger.error(error.invalidUUID(user.UUID))
      return
    }
  }

  logger.info('User secrets were successfully hashed.')
}
