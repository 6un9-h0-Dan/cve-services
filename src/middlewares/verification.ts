import { dbOperations } from '../database/db-operations';
import { verifySignature } from '../controller/utils/VerifySignature';
import * as NodeRSA from 'node-rsa';
import { RESPONSE_ERROR_MESSAGE } from '../constants';

export const verifyRequester = async (req, res, next) => {
    const noAuth = /(^\/health-check|\/sign|\/get-all-cna)/g; // Place route names here that dont need authentication
    const cnaAuth = /(^\/register-user |\/deactivate-user|\/update-user)/g; // Place route names here that only CNA role can use.
    const { userUUID, payload } = req.body;
    var verify = false;
    try {
        if (!new RegExp(noAuth).test(req.originalUrl)) {
            const signature = req.headers.signature; //signature- this is the header where signatures are sent by. NOTE: This can be changed to whatever name we want
            if (!signature) return res.status(404).send({ auth: false, message: RESPONSE_ERROR_MESSAGE[404] });

            if (new RegExp(cnaAuth).test(req.originalUrl)) {
                //routes that only Organizations can access
                let userData = await dbOperations.getUserData(userUUID);
                req.cnaOrgName = userData.cnaName;
                req.userData = userData;
                if (userData.cnaUUID) {
                    verify = verifySignature(signature, userData.cnaPublicKey, payload);
                } else {
                    return res.status(500).send({ auth: false, message: RESPONSE_ERROR_MESSAGE[500] });
                }
                if (verify) {
                    next();
                } else {
                    //routes authenticated users can access
                    return res.status(500).send({ auth: false, message: RESPONSE_ERROR_MESSAGE[500] });
                }
            } else {
                //verify signature. If true user is authenticated and can proceed. Else throw error
                let userData = await dbOperations.getUserData(userUUID);
                if (userData.cnaUUID) {
                    verify = verifySignature(signature, userData.cnaPublicKey, payload);
                    req.CNAID = userData.cnaUUID;
                } else {
                    verify = verifySignature(signature, userData.userPublicKey, payload);
                    req.userData = userData;
                    req.CNAID = userData.userCNAUUID;
                }
                if (verify) {
                    next();
                } else {
                    return res.status(500).send({ auth: false, message: RESPONSE_ERROR_MESSAGE[500] });
                }
            }
        } else {
            next();
        }
    } catch (err) {
        return res.status(500).send({ auth: false, message: RESPONSE_ERROR_MESSAGE[500] });
    }
};
