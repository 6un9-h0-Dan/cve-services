import * as jwt from "jsonwebtoken";
import { dbOperations } from "../database/db-operations";
import * as NodeRSA from "node-rsa";

export const verifyRequester = async (req, res, next) => {
  const regex = /(^\/health-check|\/user-auth)/g; // Place route names here that dont need authentication
  const { userEmail, payload } = req.body;
  try {
    if (!new RegExp(regex).test(req.originalUrl)) {
      const signature = req.headers.signature;
      if (!signature)
        return res
          .status(403)
          .send({ auth: false, message: "No Signature Provided." });

      let publicKey = await dbOperations.checkJWTRecord(userEmail); //TODO: change to verify public key
      let serverNodeRsa = new NodeRSA(publicKey);
      serverNodeRsa.setOptions({ signingScheme: "pkcs1-sha256" });
      let verify = serverNodeRsa.verify(payload, signature, null, "hex");

      if (verify) {
        next();
      } else {
        return res
          .status(500)
          .send({ auth: false, message: "Failed to validate key." });
      }
    } else {
      next();
    }
  } catch (err) {
    return res
      .status(500)
      .send({ auth: false, message: "Failed to validate key." });
  }
};
