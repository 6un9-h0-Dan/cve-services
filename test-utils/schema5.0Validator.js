const cveSchema = require('../src/middleware/jsonSchema')
const Validator = require('jsonschema').Validator
const v = new Validator()

const validateCveJsonSchema5 = (req, res, next) => {
  if (req.method.toUpperCase() === 'POST') {
    const cve = req.body.cve
    const cveState = cve.CVE_data_meta.STATE
    let schema

    if (cveState === 'PUBLIC') {
      schema = cveSchema.publicSchema
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.1.json?20190610')
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.0.json?20170531')
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v2.0.json?20170531')
    } else if (cveState === 'RESERVED') {
      schema = cveSchema.reservedSchema
    } else if (cveState === 'REJECT') {
      schema = cveSchema.rejectSchema
    } else {
      return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: ['instance.CVE_data_meta.STATE is not one of enum values'] })
    }

    const result = v.validate(cve, schema, { nestedErrors: true })

    if (result.valid) {
      next()
    } else {
      const temp = result.toString().split('\n')
      const errors = []
      temp.forEach((error) => {
        if (error !== '') {
          const array = error.split(':', 2)
          errors.push(array[1].trim())
        }
      })

      return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: errors })
    }
  } else {
    return res.status(400).send('Bad Request')
  }
}

module.exports = {
  validateCveJsonSchema5
}
