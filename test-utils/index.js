const express = require('express')
const config = require('config')
const mongoose = require('mongoose')
const app = express()
const orgController = require('../src/controller/org.controller/org.controller')
const cveController = require('../src/controller/cve.controller/cve.controller')
const orgParams = require('../src/controller/org.controller/org.middleware')
const cveIdController = require('../src/controller/cve-id.controller/cve-id.controller')
const cveIdParams = require('../src/controller/cve-id.controller/cve-id.middleware')
const cveIdControllerA = require('./reserveCaseA.non-sequential')
const cveIdControllerB = require('./reserveCaseB.non-sequential')
const cveIdControllerE = require('./reserveCaseE.non-sequential')
const cveIdControllerF = require('./reserveCaseF.non-sequential')
const cveIdControllerG = require('./reserveCaseG.non-sequential')
const middleware = require('../src/middleware/middleware')
const repos = require('./repositories')

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
app.use(middleware.createCtxAndReqUUID)

// Make mongoose connection available globally
global.mongoose = mongoose

//* ************API Routes Setup*********** */
//* ********** Middleware Routes ********** */

// validate user
app.route('/api/test/mw/user')
  .post(middleware.validateUser, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// secretariat only
app.route('/api/test/mw/secretariat_only')
  .post(middleware.onlySecretariat, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// cna only
app.route('/api/test/mw/cna_only')
  .post(middleware.onlyCnas, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// validate json schema 5.0
app.route('/api/test/mw/schema5')
  .post(middleware.validateCveJsonSchema, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

//* ************* Cve Routes ************ */

// create cve
app.route('/api/test/cve')
  .post(cveController.CVE_SUBMIT)

// update cve
app.route('/api/test/cve/:id')
  .post(cveController.CVE_UPDATE_SINGLE)

// --- create org --- //
app.route('/org-created-when-uuid-undefined')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreated() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-created-when-uuid-null')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreated() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-created-when-uuid-defined')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreated() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-created-when-roles-defined')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedWhenRolesDefined() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-created-when-roles-undefined-id_quota-defined')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreated() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-created-when-id_quota-undefined')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreated() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-created-when-id_quota-null')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreated() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

app.route('/org-not-created-already-exists')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgNotCreatedAlreadyExists() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_CREATE_SINGLE)

// --- update org --- //
app.route('/org-not-updated-doesnt-exists/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgNotUpdatedDoesNotExist() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_UPDATE_SINGLE)

app.route('/org-not-updated-shortname-exists/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgNotUpdatedShortNameExists() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_UPDATE_SINGLE)

app.route('/org-updated-id_quota-undefined/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgNotUpdatedIdQuotaUndefined() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_UPDATE_SINGLE)

app.route('/org-not-updated-no-query-parameters/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgNotUpdatedNoQueryParameters() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.CNA_UPDATE_SINGLE)

// --- get org --- //
app.route('/org-cant-get-doesnt-exist/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgGet() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.CNA_SINGLE)

app.route('/org-get-does-exist/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgGet() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.CNA_SINGLE)

// --- get id quota --- //
app.route('/org-id_quota-secretariat/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgSecretariatIdQuota() },
      getCveIdRepository: () => { return new repos.CveIdSecretariatIdQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

app.route('/org-id_quota-owning-org/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgOwnerIdQuota() },
      getCveIdRepository: () => { return new repos.CveIdOwnerIdQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

app.route('/org-id_quota-not-owning-secretariat-org/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgNotOwnerOrSecretariatIdQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

app.route('/org-id_quota-org-does-not-exist/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgDoesNotExistIdQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

app.route('/org-id_quota-exceeds-min-quota-limit/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgExceedsMinIdQuota() },
      getCveIdRepository: () => { return new repos.CveIdExceedsMinQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

app.route('/org-id_quota-exceeds-max-quota-limit/:shortname')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgExceedsMaxIdQuota() },
      getCveIdRepository: () => { return new repos.CveIdExceedsMaxQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.ORG_ID_QUOTA)

// --- get all orgs --- //
app.route('/org-all-cnas')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgsGet() }
    }
    req.ctx.repositories = factory
    next()
  }, orgController.CNA_ALL)

app.route('/org-no-cnas-exist')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgsCantGet() }
    }
    req.ctx.repositories = factory
    next()
  }, orgController.CNA_ALL)

// --- create user --- //
app.route('/user-not-created-org-does-not-exist/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCantCreateUserCnaDoesNotExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-not-created-org-does-not-match/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCantCreateUserCnaDoesNotMatch() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-created-org-undefined/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedUserOrgUndefined() },
      getUserRepository: () => { return new repos.UserCreatedOrgUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-created-org-null/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedUserOrgUndefined() },
      getUserRepository: () => { return new repos.UserCreatedOrgUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-created-uuid-undefined/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedUserOrgUndefined() },
      getUserRepository: () => { return new repos.UserCreatedOrgUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-created-uuid-null/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedUserOrgUndefined() },
      getUserRepository: () => { return new repos.UserCreatedOrgUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-created-uuid-defined/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedUserOrgUndefined() },
      getUserRepository: () => { return new repos.UserCreatedOrgUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

app.route('/user-not-created-already-exists/:shortname')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgCreatedUserOrgUndefined() },
      getUserRepository: () => { return new repos.UserNotCreatedAlreadyExists() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_CREATE_SINGLE)

// --- update user --- //
app.route('/user-not-updated-org-doesnt-exist/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserNotUpdatedOrgDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

app.route('/user-not-updated-doesnt-exist/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserNotUpdatedUserDoesntExist() },
      getUserRepository: () => { return new repos.UserNotUpdatedUserDoesntExist() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

app.route('/user-not-updated-user-doesnt-exist/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserNotUpdatedOrgQueryDoesntExist() },
      getUserRepository: () => { return new repos.UserNotUpdatedOrgQueryDoesntExist() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

app.route('/user-not-updated-no-parameters/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserNotUpdatedOrgQueryDoesntExist() },
      getUserRepository: () => { return new repos.UserNotUpdatedNoQuery() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

// --- reset secret --- //
app.route('/user-secret-not-reset-org-doesnt-exist/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserSecretNotResetOrgDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_RESET_SECRET)

app.route('/user-secret-not-reset-user-doesnt-exist/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserSecretNotResetUserDoesntExist() },
      getUserRepository: () => { return new repos.UserSecretNotResetUserDoesntExist() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_RESET_SECRET)

app.route('/user-secret-reset/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserSecretReset() },
      getUserRepository: () => { return new repos.UserSecretReset() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_RESET_SECRET)

// --- get user --- //
app.route('/user-get-user-org-doesnt-exist/:shortname/:username')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgGetUserOrgDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.USER_SINGLE)

app.route('/user-get-user-user-doesnt-exist/:shortname/:username')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgGetUser() },
      getUserRepository: () => { return new repos.UserGetUserDoesntExist() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.USER_SINGLE)

app.route('/user-get-user/:shortname/:username')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgGetUser() },
      getUserRepository: () => { return new repos.UserGetUser() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.USER_SINGLE)

// --- get cve-id --- //
app.route('/cve-id-doesnt-exist/:id')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.NullOrgRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_SINGLE)

app.route('/cve-id-available/:id')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdAvailable() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.NullOrgRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_SINGLE)

app.route('/cve-id-not-owning-org-reserved/:id')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdNotOwningOrg() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNotOwnerOrgReserved() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_SINGLE)

app.route('/cve-id-not-owning-org-not-reserved/:id')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdNotOwningOrgNotReserved() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNotOwnerOrgNotReserved() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_SINGLE)

app.route('/cve-id-owning-org/:id')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdOwningOrg() },
      getUserRepository: () => { return new repos.UserGetCveIdOwningOrg() },
      getOrgRepository: () => { return new repos.OrgGetCveIdOwningOrg() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_SINGLE)

app.route('/cve-id-is-secretariat/:id')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdOwningOrg() },
      getUserRepository: () => { return new repos.UserGetCveIdRequestorSecretariat() },
      getOrgRepository: () => { return new repos.OrgGetCveIdRequestorSecretariat() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_SINGLE)

// --- get filtered cve-id --- //
app.route('/cve-id-filtered-none-found')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdNoResultsWithParams() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNoCveIdsWithParams() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

app.route('/cve-id-filtered-state-provided')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdStateProvided() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNoCveIdsWithParams() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

app.route('/cve-id-filtered-no-available-cves-returned')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdNoAvailableCves() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNoCveIdsWithParams() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

app.route('/cve-id-filtered-cve-id-year-provided')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdYearProvided() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNoCveIdsWithParams() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

app.route('/cve-id-filtered-not-secretariat-no-query')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdNotSecretariatNoQuery() },
      getOrgRepository: () => { return new repos.OrgGetCveIdNoCveIdsWithParams() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

app.route('/cve-id-filtered-secretariat-no-query')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdSecretariatNoQuery() },
      getOrgRepository: () => { return new repos.OrgGetCveIdRequestorSecretariatNoQuery() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

app.route('/cve-id-filtered-update-user-org-request-cve-id-1/:shortname/:username')
  .post((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgUserNotUpdatedOrgQueryDoesntExist() },
      getUserRepository: () => { return new repos.UserNotUpdatedNoQuery() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

app.route('/cve-id-filtered-update-user-org-request-cve-id-2/:shortname/:username')
  .get((req, res, next) => {
    const factory = {
      getOrgRepository: () => { return new repos.OrgGetUserUpdated() },
      getUserRepository: () => { return new repos.UserGetUserUpdated() }
    }
    req.ctx.repositories = factory
    next()
  }, orgParams.parseGetParams, orgController.USER_SINGLE)

app.route('/cve-id-filtered-requested-field-not-changed')
  .get((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdGetCveIdRequestedNotChanged() },
      getOrgRepository: () => { return new repos.OrgGetCveIdRequestedNotChanged() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

// --- update cve-id --- //
app.route('/cve-id-modify-secretariat-cve-id-doesnt-exist/:id')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdModifyCveIdDoesntExist() },
      getOrgRepository: () => { return new repos.OrgModifyCveIdDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_UPDATE_SINGLE)

app.route('/cve-id-modify-cna-doesnt-exist/:id')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getOrgRepository: () => { return new repos.OrgModifyCveIdCnaDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_UPDATE_SINGLE)

app.route('/cve-id-modify-state-query-is-reserved/:id')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getOrgRepository: () => { return new repos.NullOrgRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_UPDATE_SINGLE)

app.route('/cve-id-modify-state-query-is-invalid/:id')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getOrgRepository: () => { return new repos.NullOrgRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_UPDATE_SINGLE)

app.route('/cve-id-modify-org-and-state-modified/:id')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdModifyCveIdCnaAndStateModified() },
      getOrgRepository: () => { return new repos.OrgModifyCveIdCnaAndStateModified() },
      getUserRepository: () => { return new repos.UserModifyCveIdCnaAndStateModified() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_UPDATE_SINGLE)

app.route('/cve-id-modify-no-query/:id')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdModifyCveIdNoQuery() },
      getOrgRepository: () => { return new repos.OrgModifyCveIdCnaAndStateModified() },
      getUserRepository: () => { return new repos.UserModifyCveIdCnaAndStateModified() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_UPDATE_SINGLE)

// --- reserve cve-id (default checks) --- //
app.route('/cve-id-reserve-not-owning-org')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveNotOwningOrg() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-shortname-undefined')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-year-undefined')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-amount-undefined')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-amount-0')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-batchtype-undefined')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveShortNameUndefined() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-org-doesnt-exist')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveOrgDoesntExist() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-amount-greater-nonsequential')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveAmountLargerThanNonSequential() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-amount-greater-id-quota')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveAmountGreaterIdQuota() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-invalid-batchtype')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveAmountLargerThanNonSequential() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

// --- reserve cve-id: priority --- //
app.route('/cve-id-reserve-year-2025-doesnt-exist')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.NullCveIdRepo() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveYearDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveYear2025RangeDoesntExist() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-sequential-block-priority-full')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-range-2021-full')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialIsFull() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveSequentialIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-complete')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriority() }, // CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

// --- reserve cve-id: sequential --- //
app.route('/cve-id-reserve-2025-doesnt-exist-sequential')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveYearDoesntExist() }, // CveIdRangeReserveSequentialIsFull() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveYear2025RangeDoesntExistSequential() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-2021-full-sequential')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.OrgReserveYear2025RangeDoesntExistSequential() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-2020-sequential')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

// --- reserve cve-id-range --- //
app.route('/cve-id-range-2022/:year')
  .post((req, res, next) => {
    const factory = {
      getCveIdRangeRepository: () => { return new repos.CveIdRange2022NotExists() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.NullOrgRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RANGE_CREATE)

app.route('/cve-id-range-2022-already-exists/:year')
  .post((req, res, next) => {
    const factory = {
      getCveIdRangeRepository: () => { return new repos.CveIdRange2022Exists() },
      getUserRepository: () => { return new repos.NullUserRepo() },
      getOrgRepository: () => { return new repos.NullOrgRepo() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RANGE_CREATE)

// --- reserve cve-id: nonsequential --- //
app.route('/cve-id-reserve-nonsequential-2025-doesnt-exist')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReserveNonSequentialIsFull() }, // CveIdReserveSequentialPriorityIsFull() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveYearDoesntExist() },
      getUserRepository: () => { return new repos.NullUserRepo() }, // UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveNonSequentialYearDoesntExist() } // OrgReserveSequentialPriorityIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-nonsequential-3000-10-ids')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-user-a-10-ids')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveSequentialPriorityIsFull() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-user-b-10-ids')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveUserB10Ids() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-user-a-10-ids-year-full')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-a-pool-incremented-reservation-fails')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdControllerA.CVEID_RESERVE)

app.route('/cve-id-reserve-b-pool-incremented-reservation-fails')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdControllerB.CVEID_RESERVE)

app.route('/cve-id-reserve-c-pool-incremented-10-ids')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-d-year-full')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdController.CVEID_RESERVE)

app.route('/cve-id-reserve-e-pool-incremented-3-ids')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdControllerE.CVEID_RESERVE)

app.route('/cve-id-reserve-f-year-full-after-race-condition')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdControllerF.CVEID_RESERVE)

app.route('/cve-id-reserve-g-pool-incremented-10-ids')
  .post((req, res, next) => {
    const factory = {
      getCveIdRepository: () => { return new repos.CveIdReservePoolIncremented10Ids() },
      getCveIdRangeRepository: () => { return new repos.CveIdRangeReserveSequentialPriorityIsFull() },
      getUserRepository: () => { return new repos.UserReserveSequentialPriorityIsFull() },
      getOrgRepository: () => { return new repos.OrgReserveBase() }
    }
    req.ctx.repositories = factory
    next()
  }, cveIdParams.parsePostParams, cveIdControllerG.CVEID_RESERVE)
// ---------------------------- //

// // get a user
// app.route('/api/test/cna/:shortname/user/:username')
//   .get(orgParams.parseGetParams, orgController.USER_SINGLE)

// // update a user
// app.route('/api/test/cna/:shortname/user/:username')
//   .post(orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

// // get a filtered cve document
// app.route('/api/test/cve-id')
//   .get(cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

//* ********API Routes Setup END*********** */

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
// TODO: can we not repeat `src/index.js` and `test-utils/index.js`
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
})

db.once('open', () => {
  console.log(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)
  const port = config.get('port')
  app.listen(port)
})

module.exports = app
