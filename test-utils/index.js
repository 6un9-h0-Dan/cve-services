const express = require('express')
const config = require('config')
const mongoose = require('mongoose')
const app = express()
const orgController = require('../src/controller/org.controller/org.controller')
const cveController = require('../src/controller/cve.controller/cve.controller')
const middleware = require('../src/middleware/middleware')
// const schemaVal5 = require('./schema5.0Validator')

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data

// Make mongoose connection available globally
global.mongoose = mongoose

//* ************API Routes Setup*********** */
// create cve
app.route('/api/test/cve')
  .post(cveController.CVE_SUBMIT)

// update cve
app.route('/api/test/cve/:id')
  .post(cveController.CVE_UPDATE_SINGLE)

// get all cnas
app.route('/api/test/cna')
  .get(orgController.CNA_ALL)

// get a cna
app.route('/api/test/cna/:shortname')
  .get(orgController.CNA_SINGLE)

// create a cna
app.route('/api/test/cna')
  .post(orgController.CNA_CREATE_SINGLE)

// update a cna
app.route('/api/test/cna/:shortname')
  .post(orgController.CNA_UPDATE_SINGLE)

// get a user
app.route('/api/test/cna/:shortname/user/:username')
  .get(orgController.USER_SINGLE)

// create a user
app.route('/api/test/cna/:shortname/user')
  .post(orgController.USER_CREATE_SINGLE)

// update a user
app.route('/api/test/cna/:shortname/user/:username')
  .post(orgController.USER_UPDATE_SINGLE)

// validate user
app.route('/api/test/mw/user')
  .post(middleware.validateUser, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// // validate json schema 4.0
// app.route('/api/test/mw/schema4')
//   .post(middleware.validateCveJsonSchema, (req, res) => {
//     return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
//   })

// // validate json schema 5.0
// app.route('/api/test/mw/schema5')
//   .post(schemaVal5.validateCveJsonSchema5, (req, res) => {
//     return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
//   })

// validate json schema 5.0
app.route('/api/test/mw/schema5')
  .post(middleware.validateCveJsonSchema, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })
//* ********API Routes Setup END*********** */

// Construct MongoDB connection string
const dbConnectionStr = config.has('test.username') && config.has('test.userpass')
  ? `mongodb://${config.get('test.username')}:${config.get('test.userpass')}@${config.get('test.host')}:${config.get('test.port')}/${config.get('test.database')}`
  : `mongodb://${config.get('test.host')}:${config.get('test.port')}/${config.get('test.database')}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
})

db.once('open', () => {
  const port = config.get('port')
  app.listen(port)
})

module.exports = app
